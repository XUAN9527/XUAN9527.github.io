<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ESP32开发小贴士</title>
    <url>/2024/02/22/ESP32%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    <content><![CDATA[<h2 id="ESP32-ESP-IDF自定义组件"><a href="#ESP32-ESP-IDF自定义组件" class="headerlink" title="ESP32 ESP-IDF自定义组件"></a>ESP32 ESP-IDF自定义组件</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://link.zhihu.com/?target=https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html%23component-cmakelists-files">英文官方文档链接</a><br><a href="https://link.zhihu.com/?target=https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/build-system.html%23id21">中文官方文档链接</a></p>
<h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h4><p>此示例在《ESP32 smart_config和airkiss配网》<br><a href="https://zhuanlan.zhihu.com/p/440454542">https://zhuanlan.zhihu.com/p/440454542</a><br><a href="https://link.zhihu.com/?target=https://blog.csdn.net/chentuo2000/article/details/121687760">https://link.zhihu.com/?target=https%3A//blog.csdn.net/chentuo2000/article/details/121687760</a><br>基础上，增加连接成功后点亮板载LED功能。<br>实现所需功能后将各功能代码分离，再将分离后的代码构造成组件，使得项目有清晰的结构，方便功能代码移植.</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>《Win10启用Linux子系统安装Ubuntu》<br><a href="https://link.zhihu.com/?target=https://blog.csdn.net/chentuo2000/article/details/112131624">https://link.zhihu.com/?target=https%3A//blog.csdn.net/chentuo2000/article/details/112131624</a></p>
<p>《用乐鑫国内Gitee镜像搭建ESP32开发环境》<br><a href="https://link.zhihu.com/?target=https://blog.csdn.net/chentuo2000/article/details/113424934">https://link.zhihu.com/?target=https%3A//blog.csdn.net/chentuo2000/article/details/113424934</a></p>
<h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><h4 id="拷贝-初始化例程"><a href="#拷贝-初始化例程" class="headerlink" title="拷贝 &amp;&amp; 初始化例程"></a>拷贝 &amp;&amp; 初始化例程</h4><p>将例子项目<code>hello_world</code>复制到ESP-IDF开发工具之外,更名为components_demo:</p>
<pre><code>cd ~/esp
cp -r ~/esp/esp-adf/esp-idf/examples/get-started/hello_world ./components_demo
</code></pre>
<p>清空build目录:</p>
<pre><code>cd ~/esp/components_demo
rm -r build/*
</code></pre>
<p>注意，每当添加了新组件就要删除build目录下的全部内容，或者执行下面这条命令：</p>
<pre><code>idf.py fullclean
</code></pre>
<p>清除以前的构建。</p>
<h4 id="添加组件letter-shell"><a href="#添加组件letter-shell" class="headerlink" title="添加组件letter_shell"></a>添加组件letter_shell</h4><pre><code>idf.py -C components create-component letter_shell
</code></pre>
<p>该命令会创建一个新组件,新组件将包含构建组件所需的一组空文件。我们的工作就是在这一组空文件中写上我们的代码。<br>如果熟悉了组件结构，也可以直接在项目中手工创建。</p>
<h4 id="项目树"><a href="#项目树" class="headerlink" title="项目树"></a>项目树</h4><p>构建好的项目结构如下:</p>
<p><img src="/../pictures/component_demo%E8%AE%BE%E5%A4%87%E6%A0%91.png" alt="component_demo设备树"></p>
<p>注意：组件目录components名字不能改，其下的组件名可以随意取。build目录是编译时生成的，编译的结果都放在其中。dependencies.lock是随原来的项目复制过来的不要改。sdkconfig文件可以用idf.py menuconfig命令修改。</p>
<h3 id="代码和说明"><a href="#代码和说明" class="headerlink" title="代码和说明"></a>代码和说明</h3><p>各文件的位置关系很重要，请对照前面的项目树看代码文件。</p>
<h4 id="项目的根CMakeLists-txt文件"><a href="#项目的根CMakeLists-txt文件" class="headerlink" title="项目的根CMakeLists.txt文件"></a>项目的根CMakeLists.txt文件</h4><pre><code># The following lines of boilerplate have to be in your project&#39;s
# CMakeLists in this exact order for cmake to work correctly
cmake_minimum_required(VERSION 3.16)

include($ENV&#123;IDF_PATH&#125;/tools/cmake/project.cmake)
project(components_demo)
</code></pre>
<p>只需要修改<code>project</code>中的项目名称。</p>
<h4 id="main目录"><a href="#main目录" class="headerlink" title="main目录"></a>main目录</h4><p>CMakeLists.txt</p>
<pre><code>idf_component_register(SRCS &quot;main.c&quot;
                INCLUDE_DIRS &quot;.&quot;)
</code></pre>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shell_port.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;nvs_flash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *TAG = <span class="string">&quot;sample test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">esp_err_t</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize NVS.</span></span><br><span class="line">    ret = nvs_flash_init();</span><br><span class="line">    <span class="keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) &#123;</span><br><span class="line">        ESP_ERROR_CHECK(nvs_flash_erase());</span><br><span class="line">        ret = nvs_flash_init();</span><br><span class="line">    &#125;</span><br><span class="line">    ESP_ERROR_CHECK( ret );</span><br><span class="line"></span><br><span class="line">	esp_log_level_set(TAG, ESP_LOG_INFO);</span><br><span class="line">	ESP_LOGI(TAG,<span class="string">&quot;this is a test program&quot;</span>);</span><br><span class="line">    </span><br><span class="line">	userShellInit();</span><br><span class="line"></span><br><span class="line">	logInfo(<span class="string">&quot;log info!&quot;</span>);</span><br><span class="line">	logDebug(<span class="string">&quot;log debug!&quot;</span>);</span><br><span class="line">	logWarning(<span class="string">&quot;log warning!&quot;</span>);</span><br><span class="line">	logError(<span class="string">&quot;log error!&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		logDebug(<span class="string">&quot;log loop!&quot;</span>);</span><br><span class="line">		vTaskDelay(pdMS_TO_TICKS(<span class="number">2000</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>头文件nvs_flash.h是对系统组件的引用，shell_port.h是对自定义组件的引用。</p>
<h4 id="letter-shell组件"><a href="#letter-shell组件" class="headerlink" title="letter_shell组件"></a>letter_shell组件</h4><p><code>CMakeLists.txt</code>:</p>
<pre><code>idf_component_register(
    SRCS &quot;shell.c&quot;
        &quot;shell_ext.c&quot;
        &quot;log.c&quot;
        &quot;shell_port.c&quot;
    INCLUDE_DIRS &quot;include&quot;
    LDFRAGMENTS &quot;shell.lf&quot;
    # PRIV_REQUIRES led
    REQUIRES esp_driver_uart
)
</code></pre>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>1、PRIV_REQUIRES<br>该参数指定对其它自定义组件的依赖，即私有依赖项。</p>
<p><code>PRIV_REQUIRES led</code>表示指出在<code>smart_config</code>组件中要用到自定义的<code>led</code>组件。组件名字可以加引号，也可以不加。多个组件用空格分开。</p>
<p>2、 REQUIRES<br>该参数指定对系统组件的依赖，即公共依赖项。</p>
<p><code>REQUIRES esp_driver_uart</code> 表示在<code>letter_shell</code>组件中要用到系统组件<code>esp_driver_uart</code>。</p>
<p>3、系统组件的确定</p>
<p>对于要依赖的系统组件不像私有依赖项那样一目了然，有时我们并不清楚所要的系统组件名称。比如我们不知道需要组件wpa_supplicant，这时我们可以先编译一次，看看错误信息：</p>
<p><img src="/../pictures/requires_error.png" alt="requires_error"></p>
<p>在<code>CMakeLists.txt</code>中添加依赖组件<code>REQUIRES esp_driver_uart</code>，编译通过。</p>
<h4 id="关于CMakeLists-txt文件"><a href="#关于CMakeLists-txt文件" class="headerlink" title="关于CMakeLists.txt文件"></a>关于CMakeLists.txt文件</h4><p>根和每个目录都有一个<code>CMakeLists.txt</code>文件，开始遇到的问题是不知道目录结构和怎样写<code>CMakeLists.txt</code>文件，要注意每一层目录中<code>CMakeLists.txt</code>文件的写法，本文的例子给出了一个简单的示范。对于复杂的项目还需要更多编写<code>CMakeLists.txt</code>文件的知识，请看简介中给出的官方文档。</p>
<h2 id="ESP32移植Letter-shell问题"><a href="#ESP32移植Letter-shell问题" class="headerlink" title="ESP32移植Letter_shell问题"></a>ESP32移植Letter_shell问题</h2><h3 id="添加shell组件及其log，编译出错"><a href="#添加shell组件及其log，编译出错" class="headerlink" title="添加shell组件及其log，编译出错"></a>添加shell组件及其log，编译出错</h3><h4 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因:"></a>可能原因:</h4><ol>
<li><p>宏使用不正确: 如果 SHELL_FREE 旨在实际释放与 <code>companions</code> 对象关联的内存或资源，则当前定义不正确。它应该调用内存管理函数或执行其他必要的清理任务。</p>
</li>
<li><p>编译器警告被视为错误: <code>-Werror=unused-value</code> 标志已启用，它将警告视为错误。即使宏使用本身可能不是关键问题，这也可能导致编译失败。</p>
</li>
</ol>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h4><h5 id="修复-SHELL-FREE-定义"><a href="#修复-SHELL-FREE-定义" class="headerlink" title="修复 SHELL_FREE 定义:"></a>修复 SHELL_FREE 定义:</h5><ol>
<li>如果 <code>companions</code> 需要内存分配，请更新 <code>shell_cfg.h</code> 中的 SHELL_FREE 宏以调用适当的内存管理函数，例如 <code>free()</code>。</li>
<li>如果 <code>companions</code> 不需要内存管理，请从 <code>shell_companion.c</code> 中的第 57 行删除 <code>SHELL_FREE</code> 调用；或者将<code>shell_cfg.h</code> 中的第 36 行 <code>SHELL_USING_COMPANION</code> 的宏定义改为 0。</li>
</ol>
<h5 id="禁用-Werror-unused-value-如果适用"><a href="#禁用-Werror-unused-value-如果适用" class="headerlink" title="禁用 -Werror&#x3D;unused-value (如果适用):"></a>禁用 -Werror&#x3D;unused-value (如果适用):</h5><p>如果您希望将未使用的值警告视为警告而不是错误，您可以暂时在编译期间禁用 <code>-Werror=unused-value</code> 标志。但是，通常建议修复底层问题以避免潜在的内存泄漏或资源管理问题。</p>
<h5 id="其他提示"><a href="#其他提示" class="headerlink" title="其他提示:"></a>其他提示:</h5><ol>
<li>提供有关您的项目更多信息，例如具体的 ESP-IDF 版本、涉及的组件以及 <code>SHELL_FREE</code> 宏的用途。这将有助于了解根本原因并提供更定制的指导。</li>
<li>分享 <code>shell_cfg.h</code> 头文件和 <code>shell_companion.c</code> 文件的相关部分，以便分析代码结构和上下文。<br>考虑使用调试器逐步执行代码并检查 <code>companions</code> 在 <code>SHELL_FREE</code> 调用之前和之后的 值，以了解其使用情况和潜在的内存管理问题。</li>
<li>通过遵循这些步骤并提供更多信息，我可以帮助您有效地解决编译错误并确保您的 ESP-IDF 项目成功构建。</li>
</ol>
<h4 id="配置shell优先级"><a href="#配置shell优先级" class="headerlink" title="配置shell优先级"></a>配置shell优先级</h4><p>将shell的freertos优先级设置为 <code>tskIDLE_PRIORITY</code>，为0级，跟空闲函数优先级一样，所有其他优先级任务执行完后才会执行 <code>tskIDLE_PRIORITY</code>优先级任务。</p>
<h4 id="源代码例程"><a href="#源代码例程" class="headerlink" title="源代码例程"></a>源代码例程</h4><p><a href="git@github.com:XUAN9527/components_demo.git">ESP32移植letter_shell组件例程</a></p>
]]></content>
      <categories>
        <category>ESP32解决方案</category>
      </categories>
      <tags>
        <tag>ESP32</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32开发环境搭建</title>
    <url>/2024/02/19/ESP32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><p><a href="https://espressif-docs.readthedocs-hosted.com/projects/esp-adf/zh-cn/latest/get-started/index.html#quick-start">ESP-ADF快速上手连接</a><br><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32/get-started/linux-macos-setup.html#get-started-linux-macos-first-steps">ESP-IDF快速上手连接</a></p>
<h3 id="获取ESP-ADF"><a href="#获取ESP-ADF" class="headerlink" title="获取ESP-ADF"></a>获取ESP-ADF</h3><p>打开Linux or macOS终端,新建搭建环境所需文件夹。</p>
<pre><code>mkdir ~/esp
cd ~/esp
</code></pre>
<p>编译 ESP-IDF 需要以下软件包。请根据使用的 Linux 发行版本，选择合适的安装：<br>Ubuntu 和 Debian:</p>
<pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
</code></pre>
<p>CentOS 7 &amp; 8:</p>
<pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx
</code></pre>
<p>Arch:</p>
<pre><code>sudo pacman -S --needed gcc git make flex bison gperf python cmake ninja ccache dfu-util libusb
</code></pre>
<p>克隆最新版ESP-ADF：</p>
<pre><code>git clone --recursive https://github.com/espressif/esp-adf.git
</code></pre>
<p>若克隆失败，尝试以下指令：</p>
<pre><code>git clone --recursive git@github.com:espressif/esp-adf.git
</code></pre>
<p>若子模块拉取失败，尝试手动逐个拉取子模块：</p>
<pre><code>cd ~/esp/esp-adf/components
git clone git@github.com:espressif/esp-adf-libs.git

cd ~/esp/esp-adf/components
git clone git@github.com:espressif/esp-sr.git

cd ~/esp/esp-adf
git clone git@github.com:espressif/esp-idf.git
</code></pre>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>按自己实际路径，可按自己喜好设置，也可不配置，手动敲指令也可。</p>
<p><code>vi ~/.bashrc</code><br>在后面加上以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启ESP32编译环境</span></span><br><span class="line"><span class="built_in">alias</span> get-idf=<span class="string">&#x27;. $HOME/esp/esp-adf/esp-idf/export.sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> get-adf=<span class="string">&#x27;. $HOME/esp/esp-adf/export.sh&#x27;</span></span><br><span class="line"><span class="comment">#打开本地文件夹（wsl）</span></span><br><span class="line"><span class="built_in">alias</span> open-file=<span class="string">&#x27;explorer.exe .&#x27;</span></span><br><span class="line"><span class="comment">#烧录到设备，并打开监视器，/dev/ttyS15为USB挂载端口，需测试后填写，115200为监视器波特率，与设备UART0波特率对应</span></span><br><span class="line"><span class="built_in">alias</span> esp-download=<span class="string">&#x27;idf.py -p /dev/ttyS15 -b 115200 flash monitor&#x27;</span></span><br><span class="line"><span class="built_in">export</span> PATH=/home/qx_song/esp/esp-adf/esp-idf/tools:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> IDF_PATH=/home/qx_song/esp/esp-adf/esp-idf</span><br><span class="line"><span class="built_in">export</span> ADF_PATH=/home/qx_song/esp/esp-adf</span><br></pre></td></tr></table></figure>
<p>保存退出 <code>:wq</code></p>
<h3 id="设置工具"><a href="#设置工具" class="headerlink" title="设置工具"></a>设置工具</h3><p>除了 ESP-IDF 本身，还需要为支持 ESP32 的项目安装 ESP-IDF 使用的各种工具，比如编译器、调试器、Python 包等。</p>
<pre><code>cd ~/esp/esp-adf/esp-idf
</code></pre>
<p>安装esp32，esp32s2工具，运行以下指令：（按需求安装）</p>
<pre><code>./install.sh esp32,esp32s2
</code></pre>
<p>若需要安装所有工具，运行以下指令：</p>
<pre><code>./install.sh all
</code></pre>
<p>以下为ESP-IDF编译所需环境，请在需要运行ESP-IDF的终端窗口运行以下命令：</p>
<pre><code>. $HOME/esp/esp-adf/esp-idf/export.sh   
</code></pre>
<p>或者使用快捷指令：</p>
<pre><code>get-idf
</code></pre>
<h2 id="ESP32工程示例"><a href="#ESP32工程示例" class="headerlink" title="ESP32工程示例"></a>ESP32工程示例</h2><h3 id="开始创建工程"><a href="#开始创建工程" class="headerlink" title="开始创建工程"></a>开始创建工程</h3><p>现在，可以准备开发 ESP32 应用程序了。<br>从 ESP-IDF 中 examples 目录下的 <code>get-started/hello_world</code> 工程开始，将 <code>get-started/hello_world</code> 工程复制至本地的 ~&#x2F;esp 目录下：</p>
<pre><code>cd ~/esp
get-idf
cp -r $IDF_PATH/examples/get-started/hello_world .
</code></pre>
<h3 id="配置工程"><a href="#配置工程" class="headerlink" title="配置工程"></a>配置工程</h3><pre><code>cd ~/esp/hello_world
idf.py set-target esp32
</code></pre>
<p>由于ESP32是单核，默认配置是双核模式，需要配置参数：</p>
<pre><code>idf.py menuconfig
Component config -&gt; FreeRTOS -&gt;  [*]Run FreeRTOS only on first core
</code></pre>
<p>保存退出</p>
<h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3><pre><code>idf.py build
</code></pre>
<h3 id="烧录工程"><a href="#烧录工程" class="headerlink" title="烧录工程"></a>烧录工程</h3><pre><code>idf.py -p PORT flash
</code></pre>
<p>请将 PORT 替换为 ESP32 开发板的串口名称。如果 PORT 未经定义，<code>idf.py</code> 将尝试使用可用的串口自动连接。</p>
<h3 id="合并执行构建、烧录和监视过程："><a href="#合并执行构建、烧录和监视过程：" class="headerlink" title="合并执行构建、烧录和监视过程："></a>合并执行构建、烧录和监视过程：</h3><pre><code>idf.py -p PORT [-b BAUD] flash monitor
</code></pre>
<p>注：[-b BAUD] 和 monitor 配合使用，BAUD为程序中UART0的波特率	</p>
<pre><code>idf.py -p /dev/ttyS15 -b  115200  flash monitor	
idf.py -p [挂载端口]   -b [波特率] flash monitor
</code></pre>
<h3 id="擦除flash"><a href="#擦除flash" class="headerlink" title="擦除flash"></a>擦除flash</h3><pre><code>idf.py -p PORT erase-flash
</code></pre>
<p>若存在需要擦除的 OTA 数据，请运行以下命令：</p>
<pre><code>idf.py -p PORT erase-otadata
</code></pre>
<h3 id="挂载端口"><a href="#挂载端口" class="headerlink" title="挂载端口"></a>挂载端口</h3><h4 id="windows-子系统-wsl"><a href="#windows-子系统-wsl" class="headerlink" title="windows 子系统 wsl"></a>windows 子系统 wsl</h4><p>输入烧录指令：</p>
<pre><code>idf.py flash
</code></pre>
<p>观察终端设备是挂载在哪个端口上，有ERROR忽略，选择端口例如 <code>/dev/ttyS15</code>，程序中<code>UART0</code>的波特率115200，下次就可以直接输此端口就可以烧录啦。</p>
<pre><code>idf.py -p /dev/ttyS15 -b 115200 flash monitor	
</code></pre>
<p>如果 ESP-IDF 监视器在烧录后很快发生错误，或打印信息全是乱码（如下），很有可能是因为开发板采用了 26 MHz 晶振，而 ESP-IDF 默认支持大多数开发板使用的 40 MHz 晶振。</p>
<pre><code>x���ff�f�����`�~�~���f���x��f�f�����ff��`���f����`��~x������ff�f�����`�~�~�f����f����f`���x��f�f�����ff��`���f
</code></pre>
<p>此时，可以：<br>1、退出监视器。<br>2、返回 idf.py menuconfig。<br>3、进入 Component config –&gt; Hardware Settings –&gt; Main XTAL Config –&gt; Main XTAL frequency 进行配置，将 CONFIG_XTAL_FREQ_SEL 设置为 26 MHz。<br>4、重新编译和烧录应用程序。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>启动终端ESP32编译只需要进行以下步骤：</p>
<pre><code>. $HOME/esp/esp-adf/esp-idf/export.sh	//开启编译环境
idf.py set-target esp32			//首次搭建项目时配置
idf.py menuconfig   			//选择需要的配置
idf.py build
idf.py flash
</code></pre>
<p>快捷方式：</p>
<pre><code>get-idf
idf.py set-target esp32
idf.py menuconfig
idf.py build
esp-download
</code></pre>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>环境搭建</category>
        <category>Bluetooth</category>
      </categories>
      <tags>
        <tag>ESP32</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>I2C调试记录</title>
    <url>/2024/03/01/I2C%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="I2C基本原理介绍"><a href="#I2C基本原理介绍" class="headerlink" title="I2C基本原理介绍"></a>I2C基本原理介绍</h2><h3 id="时序介绍"><a href="#时序介绍" class="headerlink" title="时序介绍"></a>时序介绍</h3><p>参考Vishay的i2c时序图：</p>
<p><img src="/../pictures/i2c%E6%97%B6%E5%BA%8F%E5%9B%BE1.png" alt="i2c时序图1"><br><img src="/../pictures/i2c%E6%97%B6%E5%BA%8F%E5%9B%BE2.png" alt="i2c时序图2"></p>
<h3 id="代码实现详解"><a href="#代码实现详解" class="headerlink" title="代码实现详解"></a>代码实现详解</h3><p>I2C协议实现有硬件I2C和软件I2C之分，这里只讲解软件I2C实现的版本。一下列出主要结构体和初始化函数。</p>
<h4 id="I2C协议初始化"><a href="#I2C协议初始化" class="headerlink" title="I2C协议初始化"></a>I2C协议初始化</h4><p>I2C协议的scl和sda配置为开漏输出,需要外部上拉（一般为10K电阻）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define i2c_pin_mode(pin,mode)		drv_pin_mode(pin,mode)</span></span><br><span class="line"><span class="comment">#define i2c_pin_write(pin,level) 	drv_pin_write(pin,level)</span></span><br><span class="line"><span class="comment">#define i2c_pin_read(pin) 		drv_pin_read(pin)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define DRV_I2C_WR                      0x00</span></span><br><span class="line"><span class="comment">#define DRV_I2C_RD                      (1u &lt;&lt; 0)</span></span><br><span class="line"><span class="comment">#define DRV_I2C_ADDR_10BIT              (1u &lt;&lt; 2)  /* this is a ten bit chip address */</span></span><br><span class="line"><span class="comment">#define DRV_I2C_NO_START                (1u &lt;&lt; 4)</span></span><br><span class="line"><span class="comment">#define DRV_I2C_IGNORE_NACK             (1u &lt;&lt; 5)</span></span><br><span class="line"><span class="comment">#define DRV_I2C_NO_READ_ACK             (1u &lt;&lt; 6)  /* when I2C reading, we do not ACK */</span></span><br><span class="line"><span class="comment">#define DRV_I2C_NO_STOP                 (1u &lt;&lt; 7)</span></span><br><span class="line"></span><br><span class="line">typedef enum&#123;</span><br><span class="line">	EI2C_DEV_1 = 1,</span><br><span class="line">	EI2C_DEV_2,</span><br><span class="line">	EI2C_DEV_3</span><br><span class="line">&#125;EI2C_DEVICE;</span><br><span class="line"></span><br><span class="line">struct drv_soft_i2c_config</span><br><span class="line">&#123;</span><br><span class="line">	uint8_t scl;</span><br><span class="line">	uint8_t sda;</span><br><span class="line">	uint8_t i2c_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct drv_i2c_msg</span><br><span class="line">&#123;</span><br><span class="line">    uint16_t addr;</span><br><span class="line">    uint16_t flags;</span><br><span class="line">    uint16_t len;</span><br><span class="line">	uint8_t reg_addr;</span><br><span class="line">    uint8_t  *buf;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct drv_i2c_bit_ops</span><br><span class="line">&#123;</span><br><span class="line">    void *data;            /* private data <span class="keyword">for</span> lowlevel routines */</span><br><span class="line">    void (*set_sda)(void *data, int state);</span><br><span class="line">    void (*set_scl)(void *data, int state);</span><br><span class="line">    int (*get_sda)(void *data);</span><br><span class="line">    int (*get_scl)(void *data);</span><br><span class="line"></span><br><span class="line">    void (*udelay)(uint32_t us);</span><br><span class="line"></span><br><span class="line">    uint32_t delay_us;  /* scl and sda line delay */</span><br><span class="line">    uint32_t <span class="built_in">timeout</span>;   /* <span class="keyword">in</span> tick */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct drv_i2c_bus_device</span><br><span class="line">&#123;</span><br><span class="line">	struct drv_i2c_msg msg;</span><br><span class="line">	struct drv_i2c_bit_ops ops;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static void drv_i2c_gpio_init(struct drv_soft_i2c_config *i2c)</span><br><span class="line">&#123;</span><br><span class="line">    struct drv_soft_i2c_config* cfg = i2c;</span><br><span class="line"></span><br><span class="line">    i2c_pin_mode(cfg-&gt;scl, I2C_PIN_MODE_OUTPUT_OD);	//PIN_MODE_OUTPUT</span><br><span class="line">    i2c_pin_mode(cfg-&gt;sda, I2C_PIN_MODE_OUTPUT_OD);</span><br><span class="line"></span><br><span class="line">    i2c_pin_write(cfg-&gt;scl, I2C_PIN_HIGH);</span><br><span class="line">    i2c_pin_write(cfg-&gt;sda, I2C_PIN_HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int drv_hw_i2c_init(EI2C_DEVICE dev_e)</span><br><span class="line">&#123;</span><br><span class="line">	int size = sizeof(i2c_pin_config)/sizeof(struct drv_soft_i2c_config);</span><br><span class="line">	struct drv_i2c_bus_device *dev = get_i2c_device(dev_e);</span><br><span class="line">	uint8_t dev_num = (uint8_t)dev_e;</span><br><span class="line">	struct drv_soft_i2c_config *pin_cfg = NULL;</span><br><span class="line">	struct drv_i2c_bit_ops *ops = &amp;dev-&gt;ops;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(int i=0;i&lt;size;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i2c_pin_config[i].i2c_num == dev_num)</span><br><span class="line">		&#123;</span><br><span class="line">			pin_cfg = (struct drv_soft_i2c_config *)&amp;i2c_pin_config[i];</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pin_cfg == NULL)</span><br><span class="line">		<span class="built_in">return</span> -1;</span><br><span class="line">    ops-&gt;data  = (void*)pin_cfg;</span><br><span class="line">    ops-&gt;set_sda  = n32_set_sda;</span><br><span class="line">    ops-&gt;set_scl  = n32_set_scl;</span><br><span class="line">    ops-&gt;get_sda  = n32_get_sda;</span><br><span class="line">    ops-&gt;get_scl  = n32_get_scl;</span><br><span class="line">    ops-&gt;udelay   = n32_udelay;</span><br><span class="line">    ops-&gt;delay_us = 1;</span><br><span class="line">    ops-&gt;<span class="built_in">timeout</span>  = 5;</span><br><span class="line">    </span><br><span class="line">    drv_i2c_gpio_init(pin_cfg);</span><br><span class="line">    drv_i2c_bus_unlock(pin_cfg);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口函数"><a href="#接口函数" class="headerlink" title="接口函数"></a>接口函数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int drv_i2c_bit_xfer(struct drv_i2c_bit_ops *bus,</span><br><span class="line">                 struct drv_i2c_msg msgs[],</span><br><span class="line">                 uint32_t num);</span><br><span class="line">struct drv_i2c_bus_device *get_i2c_device(EI2C_DEVICE dev_e);</span><br><span class="line">static uint64_t i2c_tick_get(void);</span><br><span class="line">int drv_hw_i2c_init(EI2C_DEVICE dev_e);</span><br><span class="line">int drv_i2c_send_data(EI2C_DEVICE dev_e,uint16_t addr,uint8_t reg_addr,uint8_t *buf,uint16_t len);</span><br><span class="line">int drv_i2c_recv_data(EI2C_DEVICE dev_e,uint16_t addr,uint8_t reg_addr,uint8_t *buf,uint16_t len);</span><br></pre></td></tr></table></figure>

<h2 id="实战开发问题分析"><a href="#实战开发问题分析" class="headerlink" title="实战开发问题分析"></a>实战开发问题分析</h2><p>实际开发过程中，同样的I2C驱动程序，在不同厂家芯片的使用上出现一些问题，导致部分厂家通信异常，导致数据接收不正确，以下进行分析对比，作证并解决问题。</p>
<h3 id="Vishay-和-亿光-接近传感器模块对比"><a href="#Vishay-和-亿光-接近传感器模块对比" class="headerlink" title="Vishay 和 亿光 接近传感器模块对比"></a>Vishay 和 亿光 接近传感器模块对比</h3><p>Vishay 使用VCNL3682S型号芯片，亿光 使用APM-16D24-U6E型号芯片，I2C协议对比。</p>
<h5 id="Vishay-："><a href="#Vishay-：" class="headerlink" title="Vishay ："></a>Vishay ：</h5><p><img src="/../pictures/Vishay%E5%86%99i2c%E5%8D%8F%E8%AE%AE.png" alt="Vishay写i2c协议"><br><img src="/../pictures/Vishay%E8%AF%BBi2c%E5%8D%8F%E8%AE%AE.png" alt="Vishay读i2c协议"></p>
<h5 id="亿光："><a href="#亿光：" class="headerlink" title="亿光："></a>亿光：</h5><p><img src="/../pictures/%E4%BA%BF%E5%85%89i2c%E5%8D%8F%E8%AE%AE.png" alt="亿光i2c协议"></p>
<h6 id="对比波形"><a href="#对比波形" class="headerlink" title="对比波形"></a>对比波形</h6><p>对比协议来看基本上是一致的，用JI2C工具测的i2c波形也基本上一致，但是我自己写的软件i2c驱动，Vishay可以正常使用，亿光读取的数据就有问题，用逻辑分析仪抓一波波形分析一下。</p>
<p>发现每次读完都会多恢复一个ack，而协议上读完最后一个字节需要恢复nack。</p>
<h6 id="修改了以下代码"><a href="#修改了以下代码" class="headerlink" title="修改了以下代码"></a>修改了以下代码</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">static int i2c_send_ack_or_nack(struct drv_i2c_bit_ops *bus, int ack)</span><br><span class="line">&#123;</span><br><span class="line">    struct drv_i2c_bit_ops *ops = bus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ack)				//if(ack &gt;= 0) 改成 <span class="keyword">if</span>(ack)</span><br><span class="line">        SET_SDA(ops, 0);</span><br><span class="line">    i2c_delay(ops);</span><br><span class="line">    <span class="keyword">if</span> (SCL_H(ops) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">//        logVerbose(<span class="string">&quot;ACK or NACK timeout.&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> -2;</span><br><span class="line">    &#125;</span><br><span class="line">    SCL_L(ops);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>static int i2c_send_ack_or_nack(struct drv_i2c_bit_ops *bus, int ack)&#123;&#125;</code><br>函数主要处理响应回复。</p>
<pre><code>if(ack &gt;= 0)表示每次都会回复ack/nack
if(ack)表示除最后一次数据不回复，其他每次都会回复ack/nack
</code></pre>
]]></content>
      <categories>
        <category>硬件调试</category>
      </categories>
      <tags>
        <tag>逻辑分析仪</tag>
        <tag>接近传感器</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机开发问题汇总</title>
    <url>/2024/01/31/MCU%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="内核复位（kernel-reset）"><a href="#内核复位（kernel-reset）" class="headerlink" title="内核复位（kernel reset）"></a>内核复位（kernel reset）</h2><h3 id="常见通用问题"><a href="#常见通用问题" class="headerlink" title="常见通用问题"></a>常见通用问题</h3><ul>
<li><strong>内核复位代码，如ADC：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kernel_reset</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __DSB();</span><br><span class="line">    __disable_irq();							<span class="comment">//close irq</span></span><br><span class="line">	drv_adc_deinit(EADC_DEV1,EDMA_CH6);			<span class="comment">//disable adc data</span></span><br><span class="line">    SCB-&gt;AIRCR = ((<span class="number">0x5FA</span> &lt;&lt; SCB_AIRCR_VECTKEY_Pos)      |</span><br><span class="line">                  (SCB-&gt;AIRCR &amp; SCB_AIRCR_PRIGROUP_Msk) |</span><br><span class="line">                   SCB_AIRCR_VECTRESET_Msk);</span><br><span class="line">    __DSB();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>板级初始化前先要重置状态：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DMA_DeInit(dma_chx);		<span class="comment">//DMA开启循环接收后会持续接收字节</span></span><br><span class="line">ADC_DeInit(adc_handler);</span><br></pre></td></tr></table></figure>
</li>
<li><p>ADC驱动初始化&#x2F;反初始化:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">drv_adc_init</span><span class="params">(EADC_DEVICE adc_dev,EDMA_CHANNEL dma_ch)</span></span><br><span class="line">&#123;</span><br><span class="line">	drv_adc_configuration(adc_dev);</span><br><span class="line">	drv_dma_configuration(adc_dev,dma_ch);</span><br><span class="line">	drv_adc_enable(adc_dev,DISABLE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">drv_adc_deinit</span><span class="params">(EADC_DEVICE adc_dev,EDMA_CHANNEL dma_ch)</span></span><br><span class="line">&#123;</span><br><span class="line">	ADC_Module *adc_handler = drv_get_adc_device(adc_dev)-&gt;ADC_Handler;</span><br><span class="line">	DMA_ChannelType * dma_chx = drv_get_dma_channel(dma_ch);</span><br><span class="line">	</span><br><span class="line">	drv_adc_enable(adc_dev,DISABLE);</span><br><span class="line">	DMA_EnableChannel(dma_chx,DISABLE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<h3 id="n32g452rc内核复位问题"><a href="#n32g452rc内核复位问题" class="headerlink" title="n32g452rc内核复位问题"></a>n32g452rc内核复位问题</h3><h4 id="bootloader跳转到app"><a href="#bootloader跳转到app" class="headerlink" title="bootloader跳转到app"></a>bootloader跳转到app</h4><ul>
<li>栈大小改变后跳转成功：将ram空间数据uint16_t改为uint32_t。</li>
<li>堆大小改变后跳转成功：将队列申请长度20改为30。</li>
<li>代码大小变化后跳转失败：<ul>
<li>代码段变长，能跑进<code>system_init</code>,跑飞待查。</li>
<li>代码段变短，不能跑进<code>system_init</code>,跑飞待查。</li>
</ul>
</li>
</ul>
<br>

<h2 id="MCU复位后状态"><a href="#MCU复位后状态" class="headerlink" title="MCU复位后状态"></a>MCU复位后状态</h2><ul>
<li>复位期间和刚复位后,复用功能未开启,I&#x2F;O端口被配置成模拟功能模式(PCFGy[1:0]&#x3D;00b, PMODEy[1:0]&#x3D;00b)。<br></li>
<li>但有以下几个例外的信号：BOOT0、 NRST、 OSC_IN、 OSC_OUT 默认无 GPIO 功能：<ul>
<li>BOOT0 引脚默认输入下拉</li>
<li>NRST 上拉输入输出<br></li>
</ul>
</li>
<li>复位后，调试系统相关的引脚默认状态为启动 SWD-JTAG， JTAG 引脚被置于输入上拉或下拉模式：<ul>
<li>PA15:JTDI 置于输入上拉模式 </li>
<li>PA14:JTCK 置于输入下拉模式 </li>
<li>PA13:JTMS 置于输入上拉模式</li>
<li>PB4:NJTRST 置于输入上拉模式</li>
<li>PB3:JTD0 置于推挽输出无上下拉<br></li>
</ul>
</li>
<li>PD0 和 PD1<ul>
<li>PD0 和 PD1 在 80 及以上引脚封装默认为模拟模式</li>
<li>PD0 和 PD1 在 80 以下引脚封装复用到 OSC_IN&#x2F;OUT</li>
</ul>
</li>
<li>PC13、 PC14、 PC15：<ul>
<li>PC13～15 为备电域下的三个 IO， 备份域初次上电默认为模拟模式；<br></li>
</ul>
</li>
<li>PB2&#x2F;BOOT1：<ul>
<li>PB2&#x2F;BOOT1 默认处于下拉输入状态；<br></li>
</ul>
</li>
<li>BOOT0 默认输入下拉，参照下表， 若 BOOT 的引脚未连接，则默认选择 Flash 主存储区。</li>
</ul>
<p><img src="/../pictures/mcu%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9%E8%A1%A8.png" alt="mcu启动选项表"><br><br></p>
<h2 id="printf重定向"><a href="#printf重定向" class="headerlink" title="printf重定向"></a>printf重定向</h2><ul>
<li>MDK版本，勾选Use MicroLIB选项：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> is_lr_sent = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE* f)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (ch == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       is_lr_sent = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (!is_lr_sent)</span><br><span class="line">   	&#123;</span><br><span class="line">           USART_SendData(USART1, <span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">           <span class="keyword">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TXDE) == RESET);</span><br><span class="line">   	&#125;</span><br><span class="line">   	is_lr_sent = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">   	is_lr_sent = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   USART_SendData(USART1, ch);</span><br><span class="line">   <span class="keyword">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TXDE) == RESET);</span><br><span class="line">   <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>GCC版本</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span>* pBuffer, <span class="type">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        USART_SendData(USART1, pBuffer[i]);</span><br><span class="line">        <span class="keyword">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TXDE) == RESET);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="RT-THREAD调试问题"><a href="#RT-THREAD调试问题" class="headerlink" title="RT-THREAD调试问题"></a>RT-THREAD调试问题</h2><h3 id="串口通信异常"><a href="#串口通信异常" class="headerlink" title="串口通信异常"></a>串口通信异常</h3><ul>
<li>打开UART7接收为<code>DMA IDLE</code>中断，申请一个超时定时器，发送&#x2F;接受各一个任务，发送&#x2F;接受两个队列,以下是错误信息：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psr: 0x60000000</span><br><span class="line">r00: 0x00000000</span><br><span class="line">r01: 0x20007978</span><br><span class="line">r02: 0x20007978</span><br><span class="line">r03: 0x00000000</span><br><span class="line">r04: 0x00000000</span><br><span class="line">r05: 0x00000000</span><br><span class="line">r06: 0x00000000</span><br><span class="line">r07: 0x20000920</span><br><span class="line">r08: 0x20005908</span><br><span class="line">r09: 0x20000568</span><br><span class="line">r10: 0xdeadbeef</span><br><span class="line">r11: 0xdeadbeef</span><br><span class="line">r12: 0x00000000</span><br><span class="line"> lr: 0x0801156f</span><br><span class="line"> pc: 0x00000000</span><br><span class="line">hard fault on thread: timer</span><br><span class="line"></span><br><span class="line">E [00:00:07,324] (rtt-nano/src/kservice.c) rt_assert_handler [1340]: (rt_object_get_type(&amp;mq-&gt;parent.parent) == RT_Object_Class_MessageQueue) assertion failed at <span class="keyword">function</span>:rt_mq_send_wait, line number:2026 </span><br><span class="line"></span><br><span class="line">E [00:00:00,659] (rtt-nano/src/kservice.c) rt_assert_handler [1340]: (rt_object_get_type(&amp;timer-&gt;parent) == RT_Object_Class_Timer) assertion failed at <span class="keyword">function</span>:rt_timer_control, line number:474 </span><br><span class="line"></span><br><span class="line">E [00:00:39,282] (rtt-nano/src/kservice.c) rt_assert_handler [1340]: (rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread) assertion failed at function:rt_thread_resume, line number:<span class="number">760</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>问题定位到指针变量<code>p_srx_mq[0]</code>和<code>&amp;p_srx_mq[0]</code>的区别，代码如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define COMM_MAX_NUM     3</span></span><br><span class="line">static uint8_t *p_srx_mq[COMM_MAX_NUM];</span><br><span class="line">static struct comm_serial_mq srx_mq_data[COMM_MAX_NUM];</span><br><span class="line">static struct rt_timer comm_rx_stimer[COMM_MAX_NUM];</span><br><span class="line"></span><br><span class="line">static void comm_serial_recieve_data_deinit(uint8_t num)</span><br><span class="line">&#123;</span><br><span class="line">	srx_mq_data[num].size = 0;</span><br><span class="line">	p_srx_mq[num] = srx_mq_data[num].data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int usart_key_rx_indicate(ESERIAL_DEV serial_dev, uint16_t size)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(p_srx_mq[0] - srx_mq_data[0].data + size &gt; sizeof(srx_mq_data[0].data))</span><br><span class="line">	&#123;</span><br><span class="line">		comm_serial_recieve_data_deinit(0);</span><br><span class="line">		<span class="built_in">return</span> -1;</span><br><span class="line">	&#125;</span><br><span class="line">	rt_timer_start(&amp;comm_rx_stimer[0]);                   // 启动定时器</span><br><span class="line">	drv_fifo_data_get(serial_dev, (uint8_t *)p_srx_mq[0], size);</span><br><span class="line">	logPrintln(<span class="string">&quot;test = [%p][%p][%p]&quot;</span>,p_srx_mq[0],&amp;p_srx_mq[0],srx_mq_data[0].data);</span><br><span class="line">	p_srx_mq[0] += size;</span><br><span class="line">	srx_mq_data[0].size += size;</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针取址符-与取值-的区别"><a href="#指针取址符-与取值-的区别" class="headerlink" title="指针取址符&amp;与取值*的区别"></a>指针取址符&amp;与取值*的区别</h4><p><strong>1. 指针取址符(&amp;)</strong></p>
<pre><code>指针取址符 &amp; 用于获取一个变量的地址，并将该地址存储在一个指针变量中。
</code></pre>
<p><strong>具体来说:</strong></p>
<ul>
<li>&amp; 运算符位于变量名前面。</li>
<li>&amp; 运算符的返回值是一个指针，指向该变量的内存地址。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num; <span class="comment">// p 指向 num 的地址</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 取值符(*)</strong></p>
<pre><code>取值符 * 用于获取指针变量所指向的变量的值。
</code></pre>
<p><strong>具体来说:</strong></p>
<ul>
<li>运算符位于指针变量名前面。</li>
<li>运算符的返回值是该指针变量所指向变量的值。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> value = *p;		<span class="comment">// 访问 num 的值</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>指针取址符 &amp; 用于获取变量的地址，并将该地址存储在一个指针变量中。</li>
<li>取值符 * 用于获取指针变量所指向的变量的值。</li>
</ul>
<p><strong>需要注意的是：</strong></p>
<ul>
<li>不能对不存在的变量进行取址。</li>
<li>**<code>不能对指针变量进行取址</code>**。</li>
<li>取址操作可能会产生空指针，需要进行空指针检查。</li>
</ul>
<h4 id="为什么不能对指针变量进行取址"><a href="#为什么不能对指针变量进行取址" class="headerlink" title="为什么不能对指针变量进行取址"></a>为什么不能对指针变量进行取址</h4><p><strong>1. 指针变量本身也是一个变量</strong></p>
<p>指针变量也是一个变量，它存储的是另一个变量的地址。与其他变量一样，**<code>指针变量也存在于内存中，并拥有自己的地址</code>**。</p>
<p><strong>2. 取址操作会产生无限循环</strong></p>
<p>**<code>如果对指针变量进行取址，那么就会得到该指针变量的地址</code>**。但是，该指针变量本身也是一个变量，所以其地址也是存储在另一个变量中的。如此循环往复，就会产生无限循环。</p>
<p><strong>3. 违背了指针的定义</strong></p>
<p>指针的定义是指向另一个变量的地址。如果对指针变量进行取址，那么就意味着指针指向了它自己的地址，这违背了指针的定义。</p>
<p><strong>4. 可能导致程序崩溃</strong></p>
<p>在大多数情况下，对指针变量进行取址会导致程序崩溃。这是因为程序会试图访问一个不存在的内存地址。<br><br></p>
<h2 id="TFT屏ST7735S调试问题"><a href="#TFT屏ST7735S调试问题" class="headerlink" title="TFT屏ST7735S调试问题"></a>TFT屏ST7735S调试问题</h2><h3 id="硬件-软件spi初始化"><a href="#硬件-软件spi初始化" class="headerlink" title="硬件&#x2F;软件spi初始化"></a>硬件&#x2F;软件spi初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HARDWARE_SPI_MODE 1	<span class="comment">//1：hardware；0：software</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_SCLK_Clr() GPIO_ResetBits(GPIOA, GPIO_PIN_5)	<span class="comment">//SCL=SCLK</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_SCLK_Set() GPIO_SetBits(GPIOA, GPIO_PIN_5)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_MOSI_Clr() GPIO_ResetBits(GPIOA, GPIO_PIN_7)		<span class="comment">//SDA=MOSI</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_MOSI_Set() GPIO_SetBits(GPIOA, GPIO_PIN_7)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RES_Clr()  GPIO_ResetBits(GPIOB, GPIO_PIN_0)		<span class="comment">//RES</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RES_Set()  GPIO_SetBits(GPIOB, GPIO_PIN_0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_DC_Clr()   GPIO_ResetBits(GPIOB, GPIO_PIN_1)		<span class="comment">//DC</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_DC_Set()   GPIO_SetBits(GPIOB, GPIO_PIN_1)</span></span><br><span class="line"> 		     </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_Clr()   GPIO_ResetBits(GPIOA, GPIO_PIN_4)		<span class="comment">//CS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_Set()   GPIO_SetBits(GPIOA, GPIO_PIN_4)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BLK_Clr()											<span class="comment">//BLK</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BLK_Set()</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	GPIO_InitType GPIO_InitStructure;</span><br><span class="line">	RCC_EnableAPB2PeriphClk(RCC_APB2_PERIPH_GPIOA | RCC_APB2_PERIPH_GPIOB , ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HARDWARE_SPI_MODE</span></span><br><span class="line">	SPI_InitType SPI_InitStructure;</span><br><span class="line">	RCC_EnableAPB2PeriphClk(RCC_APB2_PERIPH_SPI1 | RCC_APB2_PERIPH_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct(&amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_InitStructure.Pin        = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;</span><br><span class="line">    GPIO_InitStructure.GPIO_Alternate = GPIO_AF0_SPI1;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_InitPeripheral(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SPIy Config -------------------------------------------------------------*/</span></span><br><span class="line">    SPI_InitStructure.DataDirection = SPI_DIR_SINGLELINE_TX;</span><br><span class="line">    SPI_InitStructure.SpiMode       = SPI_MODE_MASTER;</span><br><span class="line">    SPI_InitStructure.DataLen       = SPI_DATA_SIZE_8BITS;</span><br><span class="line">    SPI_InitStructure.CLKPOL        = SPI_CLKPOL_HIGH;</span><br><span class="line">    SPI_InitStructure.CLKPHA        = SPI_CLKPHA_FIRST_EDGE;</span><br><span class="line">    SPI_InitStructure.NSS           = SPI_NSS_HARD;</span><br><span class="line">    SPI_InitStructure.BaudRatePres  = SPI_BR_PRESCALER_2;</span><br><span class="line">    SPI_InitStructure.FirstBit      = SPI_FB_MSB;</span><br><span class="line">    SPI_InitStructure.CRCPoly       = <span class="number">7</span>;</span><br><span class="line">    SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line"></span><br><span class="line">	SPI_SSOutputEnable(SPI1, ENABLE);</span><br><span class="line">	SPI_EnableCalculateCrc(SPI1, DISABLE);</span><br><span class="line">    <span class="comment">/* Enable SPIy */</span></span><br><span class="line">    SPI_Enable(SPI1, ENABLE);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	GPIO_InitStruct(&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitPeripheral(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	GPIO_InitStruct(&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;</span><br><span class="line">	GPIO_InitPeripheral(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOB, GPIO_PIN_0 | GPIO_PIN_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Writ_Bus</span><span class="params">(u8 dat)</span> </span><br><span class="line">&#123;	</span><br><span class="line">	LCD_CS_Clr();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HARDWARE_SPI_MODE</span></span><br><span class="line">	SPI_I2S_TransmitData(SPI1, dat);</span><br><span class="line">	<span class="keyword">while</span> (SPI_I2S_GetStatus(SPI1, SPI_I2S_TE_FLAG) == RESET); <span class="comment">//必须等到SPI数据发完，才能拉高CS片选，发下一次数据，否则数据会出错</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	u8 i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;			  </span><br><span class="line">		LCD_SCLK_Clr();</span><br><span class="line">		<span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)</span><br><span class="line">		&#123;</span><br><span class="line">		   LCD_MOSI_Set();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">		   LCD_MOSI_Clr();</span><br><span class="line">		&#125;</span><br><span class="line">		LCD_SCLK_Set();</span><br><span class="line">		dat&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   LCD_CS_Set();	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_DATA8</span><span class="params">(u8 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">	LCD_Writ_Bus(dat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_DATA</span><span class="params">(u16 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">	LCD_Writ_Bus(dat&gt;&gt;<span class="number">8</span>);</span><br><span class="line">	LCD_Writ_Bus(dat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Cortex-M系列内核字节对齐汇总"><a href="#Cortex-M系列内核字节对齐汇总" class="headerlink" title="Cortex-M系列内核字节对齐汇总"></a>Cortex-M系列内核字节对齐汇总</h2><ul>
<li><p>4字节对齐的含义就是变量地址对4求余数为0；8字节对齐就是地址对8求余等于0，依次类推，比如：如果让p去访问0x20000001， 0x20000002，0x20000003这都是不对齐访问。</p>
</li>
<li><p>对于<code>M3和M4</code>而言，可以直接访问非对齐地址（注意芯片要在这个地址有对应的内存空间), 因为<code>M3和M4</code>是支持的，而<code>M0/M0+/M1</code>是不支持的，不支持的内核芯片，只要非对齐访问就会触发硬件异常。</p>
</li>
</ul>
<p><strong>综上所述，我们只讨论Cortex-M3&#x2F;M4内核情况。</strong></p>
<h3 id="全局变量对齐问题"><a href="#全局变量对齐问题" class="headerlink" title="全局变量对齐问题"></a>全局变量对齐问题</h3><ul>
<li><code>uint8_t</code>定义变量地址要1字节对齐。</li>
<li><code>uint16_t</code>定义变量地址要2字节对齐。</li>
<li><code>uint32_t</code>定义变量地址要4字节对齐。</li>
<li><code>uint64_t</code>定义变量地址要8字节对齐。</li>
<li><code>指针变量</code>是4字节对齐。</li>
</ul>
<h3 id="结构体成员对齐问题"><a href="#结构体成员对齐问题" class="headerlink" title="结构体成员对齐问题"></a>结构体成员对齐问题</h3><h4 id="自然对界"><a href="#自然对界" class="headerlink" title="自然对界"></a>自然对界</h4><p><strong>例子1</strong>（分析结构各成员的默认字节对界条界条件和结构整体的默认字节对界条件）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  <span class="type">char</span> x1; <span class="comment">// 成员x1为char型(其起始地址必须1字节对界)，其偏移地址为0 </span></span><br><span class="line">  <span class="type">char</span> x2; <span class="comment">// 成员x2为char型(其起始地址必须1字节对界，其偏移地址为1 </span></span><br><span class="line">  <span class="type">float</span> x3; <span class="comment">// 成员x3为float型(其起始地址必须4字节对界)，编译器在x2和x3之间填充了两个空字节，其偏移地址为4 </span></span><br><span class="line">  <span class="type">char</span> x4; <span class="comment">// 成员x4为char型(其起始地址必须1字节对界)，其偏移地址为8 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在Test结构体中，最大的成员为<code>float</code> x3，因此结构体的自然对界条件为4字节对齐。则结构体长度就为12字节，内存布局为<code>1100 1111 1000</code>。</p>
<br>

<h4 id="指令对齐"><a href="#指令对齐" class="headerlink" title="指令对齐"></a>指令对齐</h4><p><strong>1. 伪指令#pragma pack</strong></p>
<p>改变缺省的对界条件(指定对界)</p>
<ul>
<li>使用伪指令<code>#pragma pack (n)</code>，编译器将按照n个字节对齐。</li>
<li>使用伪指令<code>#pragma pack ()</code>，取消自定义字节对齐方式。<ul>
<li>数据成员对齐规则：结构(<code>struct</code>)(或联合(<code>union</code>))的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员的对齐按照<code>#pragma pack</code>指定的数值和这个数据成员自身长度中，比较小的那个进行。</li>
<li>结构(或联合)的整体对齐规则：在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐将按照<code>#pragma pack</code>指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行。</li>
</ul>
</li>
</ul>
<p>结合推断：当<code>#pragma pack</code>的n值等于或超过所有数据成员长度的时候，这个n值的大小将不产生任何效果。因此，当使用伪指令<code>#pragma pack (2)</code>时，Test结构体的大小为8，内存布局为<code>1111 1110</code>。</p>
<ul>
<li>需要注意一点，当结构体中包含一个子结构体时，子结构中的成员按照#pragma pack指定的数值和子结构最大数据成员长度中，比较小的那个进行进行对齐。例子如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(8)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">short</span> a;</span><br><span class="line">  <span class="type">long</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  s1 d;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure>
<p><code>sizeof(s2)</code>的结果为24。S1的内存布局为<code>1100 1111</code>，S2的内存布局为<code>1000 1100 1111 0000 1111 1111</code>。</p>
<p><strong>例子2</strong>(按照2个字节对齐时)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(2)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> aa1; <span class="comment">//2个字节对齐 1111</span></span><br><span class="line">  <span class="type">char</span> bb1;<span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">short</span> cc1;<span class="comment">//2个字节对齐 011</span></span><br><span class="line">  <span class="type">char</span> dd1; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">&#125; testlength1;</span><br><span class="line"><span class="type">int</span> length1 = <span class="keyword">sizeof</span>(testlength1); <span class="comment">//2个字节对齐，占用字节11 11 10 11 10,length = 10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> bb2;<span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">int</span> aa2; <span class="comment">//2个字节对齐 01111</span></span><br><span class="line">  <span class="type">short</span> cc2;<span class="comment">//2个字节对齐 11</span></span><br><span class="line">  <span class="type">char</span> dd2; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">&#125; testlength2;</span><br><span class="line"><span class="type">int</span> length2 = <span class="keyword">sizeof</span>(testlength2); <span class="comment">//2个字节对齐，占用字节10 11 11 11 10,length = 10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> bb3; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">char</span> dd3; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">int</span> aa3; <span class="comment">//2个字节对齐 11 11</span></span><br><span class="line">  <span class="type">short</span> cc23<span class="comment">//2个字节对齐 11</span></span><br><span class="line"> </span><br><span class="line">&#125; testlength3;</span><br><span class="line"><span class="type">int</span> length3 = <span class="keyword">sizeof</span>(testlength3); <span class="comment">//2个字节对齐，占用字节11 11 11 11,length = 8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> bb4; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">char</span> dd4; <span class="comment">//1个字节对齐 1</span></span><br><span class="line">  <span class="type">short</span> cc4;<span class="comment">//2个字节对齐 11</span></span><br><span class="line">  <span class="type">int</span> aa4; <span class="comment">//2个字节对齐 11 11</span></span><br><span class="line">&#125; testlength4;</span><br><span class="line"><span class="type">int</span> length4 = <span class="keyword">sizeof</span>(testlength4); <span class="comment">//2个字节对齐，占用字节11 11 11 11,length = 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;length1 = %d.\n&quot;</span>,length1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;length2 = %d.\n&quot;</span>,length2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;length3 = %d.\n&quot;</span>,length3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;length4 = %d.\n&quot;</span>,length4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. <strong>attribute</strong>((<strong>aligned</strong>(n)))</strong></p>
<p><code>__attribute__</code>是GCC里的编译参数，用法有很多种，感兴趣可以阅读一下gcc的相关文档。这里说一下<code>__attribute__</code>对变量和结构体对齐的影响。这里的影响大概分为两个方面，对齐和本身占用的字节数的大小，即sizeof（变量）的值。</p>
<ul>
<li><code>int a attribute((aligned(64))) = 10;</code></li>
</ul>
<p>这个修饰的影响主要是对齐，所谓对齐是存储为值的起始地址。变量a的地址&amp;a,本来是4字节对齐，变成了64字节对齐（有的环境对最大对齐数值有限制）。64字节对齐就是<code>&amp;a</code>的最后6位为0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(a) = <span class="number">4</span>; 		<span class="comment">//a 占用的字节数还是4个字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>typedef int myint attribute((aligned(64))) ;</code></li>
</ul>
<p>这样说明myint 声明的变量按照64字节对齐，大小是4字节，这样就会有一个问题，这个变量不能定义数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">myint myarray[<span class="number">2</span>]; 	<span class="comment">//这样定义编译器会报err</span></span><br></pre></td></tr></table></figure>
<p>报错的原因是数组的存储在内存中是连续的，而myint只有4字节确要64字节对齐，这样对齐和连续就不能同时保证，就会报错。</p>
<p><strong>例子1</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">st_tag</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">&#125; ST1;</span><br><span class="line">ST1 myst；</span><br></pre></td></tr></table></figure>

<p>在没有对齐的情况下：<code>sizeof(ST1) = sizeof(myst) = 8;</code><br>结构体对齐的原则可以总结为：</p>
<ul>
<li>结构体起始地址(&amp;myst)按最大变量字节数(sizeof(int))对齐；</li>
<li>结构体内每个变量按照自身字节数对齐；</li>
<li>结构体的大小<code>(sizeof(myst))</code>是最大变量字节数的整数倍（8&#x2F;4&#x3D;2）；</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">st_tag</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">&#125;  __attribute__((__aligned__(<span class="number">64</span>))) ST1;</span><br><span class="line">ST1 myst；</span><br><span class="line"><span class="keyword">sizeof</span>(ST1) = <span class="keyword">sizeof</span>(myst) = <span class="number">64</span>; </span><br></pre></td></tr></table></figure>
<p>对比：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">st_tag</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">&#125;  ST1 __attribute__((__aligned__(<span class="number">64</span>)));</span><br><span class="line">ST1 myst；</span><br><span class="line"><span class="keyword">sizeof</span>(ST1) = <span class="keyword">sizeof</span>(myst) = <span class="number">8</span> ;</span><br></pre></td></tr></table></figure>

<p>这第二种情况可以理解为<code>__attribute__((aligned(64)))</code>作用于变量ST1 ，只影响对齐，不影响结构的大小。</p>
<p><strong>例子2</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((<span class="title">packed</span>))</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> comm_version;</span><br><span class="line">    <span class="type">uint8_t</span> comm_lenth;</span><br><span class="line">    <span class="type">uint8_t</span> device_fw_verion[];</span><br><span class="line">&#125;ble_resp_device_info_desc;</span><br></pre></td></tr></table></figure>
<p><code>__attribute__((packed))</code>是GCC编译器提供的一个属性,<code>__attribute__((packed))</code>其中的成员变量不会进行对齐。</p>
<br>

<h2 id="HSV-模型"><a href="#HSV-模型" class="headerlink" title="HSV 模型"></a>HSV 模型</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将HSV颜色转换为RGB颜色</span></span><br><span class="line"><span class="comment">* hue,色调:0-360; saturation,纯度:0-1; value,明度:0-1</span></span><br><span class="line"><span class="comment">* r,g,b,RGB颜色，此值范围为0-255，但外界传入时的变量须是int类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hsv_to_rgb</span><span class="params">(<span class="type">float</span> h, <span class="type">float</span> s, <span class="type">float</span> v, <span class="type">int</span> *r, <span class="type">int</span> *g, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">float</span> f, x, y, z;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   v *= <span class="number">255.0</span>;</span><br><span class="line">   <span class="keyword">if</span> (s == <span class="number">0.0</span>) &#123;</span><br><span class="line">      *r = *g = *b = (<span class="type">int</span>)v;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (h &lt; <span class="number">0</span>)</span><br><span class="line">      h += <span class="number">360</span>;</span><br><span class="line">      h = <span class="built_in">fmod</span>(h, <span class="number">360</span>) / <span class="number">60.0</span>;</span><br><span class="line">      i = (<span class="type">int</span>)h;</span><br><span class="line">      f = h - i;</span><br><span class="line">      x = v * (<span class="number">1.0</span> - s);</span><br><span class="line">      y = v * (<span class="number">1.0</span> - (s * f));</span><br><span class="line">      z = v * (<span class="number">1.0</span> - (s * (<span class="number">1.0</span> - f)));</span><br><span class="line">      <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0</span>: *r = v; *g = z; *b = x; <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>: *r = y; *g = v; *b = x; <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>: *r = x; *g = v; *b = z; <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>: *r = x; *g = y; *b = v; <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>: *r = z; *g = x; *b = v; <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">5</span>: *r = v; *g = x; *b = y; <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用Demo如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_set_poll</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> red,green,blue;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">float</span> hue = <span class="number">0</span>;</span><br><span class="line">    hue = fmodf(hue + <span class="number">1.0</span>, <span class="number">360.0</span>);  <span class="comment">// 0-360 色调循环</span></span><br><span class="line">    hsv_to_rgb(hue, <span class="number">1.0</span>, <span class="number">1.0</span>, &amp;red, &amp;green, &amp;blue);</span><br><span class="line">    display_board_rgb_color_set(red, green, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p><code>RT-Thread</code>和<code>FreeRTOS</code>都是流行的嵌入式实时操作系统（<code>RTOS</code>），它们提供了内存管理机制来处理任务、队列、信号量等对象的创建和删除。尽管两者在内存管理的某些方面有相似之处，但它们在实现和配置上存在一些关键的区别：</p>
<ul>
<li><p>内存管理策略：</p>
<ul>
<li><strong>RT-Thread</strong>：提供了动态内存堆管理和静态内存池管理两种方式。动态内存堆管理允许在运行时动态分配和释放内存，而内存池管理则分配固定大小的内存块，适用于分配大量大小相同的小内存块的场景。</li>
<li><strong>FreeRTOS</strong>：提供了多种内存管理方案，包括简单的静态内存分配（<code>heap_1</code>）和更复杂的动态内存分配策略（如<code>heap_2</code>、<code>heap_3</code>、<code>heap_4</code>和<code>heap_5</code>）。<code>FreeRTOS</code>的动态内存分配策略允许内存的分配和释放，同时也提供了内存碎片管理的方法。</li>
</ul>
</li>
<li><p>内存分配函数：</p>
<ul>
<li><strong>RT-Thread</strong>：使用自己的内存分配函数，如<code>rt_malloc</code>、<code>rt_free</code>、<code>rt_realloc</code>和<code>rt_calloc</code>，这些函数与<code>C</code>标准库中的<code>malloc</code>和<code>free</code>类似，但是专为<code>RT-Thread</code>设计。</li>
<li><strong>FreeRTOS</strong>：使用<code>pvPortMalloc</code>和<code>vPortFree</code>函数进行内存分配和释放。<code>FreeRTOS</code>还提供了<code>xPortGetFreeHeapSize</code>等函数来获取内存堆的状态。</li>
</ul>
</li>
<li><p>内存堆的实现：</p>
<ul>
<li><strong>RT-Thread</strong>：内存堆管理根据内存设备的不同，分为小内存块分配管理、大内存块的<code>slab</code>分配管理和多内存堆分配情况的管理。</li>
<li><strong>FreeRTOS</strong>：提供了多种内存堆实现，例如<code>heap_1</code>不允许释放内存，<code>heap_2</code>允许释放但不合并相邻空闲块，<code>heap_3</code>包装了标准库的<code>malloc</code>和<code>free</code>，<code>heap_4</code>合并相邻空闲块以减少碎片，<code>heap_5</code>则支持跨多个不相邻内存区域的堆。</li>
</ul>
</li>
<li><p>内存碎片管理：</p>
<ul>
<li><strong>RT-Thread</strong>：通过内存池管理来减少内存碎片，内存池预先分配一块内存，并在其中管理固定大小的内存块。</li>
<li><strong>FreeRTOS</strong>：<code>heap_4</code>和<code>heap_5</code>实现了内存碎片管理，通过合并相邻的空闲内存块来减少碎片。</li>
</ul>
</li>
<li><p>内存管理的配置：</p>
<ul>
<li><strong>RT-Thread</strong>：内存管理的配置通常在<code>rtconfig.h</code>中进行，可以选择使用不同的内存管理算法。</li>
<li><strong>FreeRTOS</strong>：内存管理的配置也在配置文件中进行，需要选择一个合适的堆管理实现文件，并在<code>FreeRTOSConfig.h</code>中进行相应的配置。</li>
</ul>
</li>
<li><p>内存管理的适用性：</p>
<ul>
<li><strong>RT-Thread</strong>：内存管理机制适用于各种大小的内存块，特别是通过内存池管理来优化小内存块的分配效率。</li>
<li><strong>FreeRTOS</strong>：提供了多种内存管理策略，适用于不同的应用场景和内存需求，从简单的静态分配到复杂的动态分配。</li>
</ul>
</li>
</ul>
<p>总的来说，<code>RT-Thread</code>和<code>FreeRTOS</code>都提供了灵活的内存管理机制来满足不同嵌入式应用的需求。选择哪种内存管理策略取决于具体的应用场景、内存需求和开发偏好。</p>
<h2 id="国民UART-DMA-TX问题"><a href="#国民UART-DMA-TX问题" class="headerlink" title="国民UART+DMA+TX问题"></a>国民UART+DMA+TX问题</h2><p>改之前：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ec32_uart_dma_tx_config</span><span class="params">(<span class="keyword">struct</span> ec_serial_device *serial, <span class="type">uint8_t</span> *buffer, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(serial-&gt;Txbuffer-&gt;tail + length &gt; serial-&gt;dma.setting_tx_len) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(DMA_GetFlagStatus(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type) == RESET)&#123;&#125;</span><br><span class="line">        DMA_ClearFlag(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE);</span><br><span class="line">    DMA_InitType DMA_InitStructure;</span><br><span class="line">	</span><br><span class="line">    <span class="type">uint16_t</span> dma_get_counts = DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch);</span><br><span class="line">    <span class="comment">/* if no data waiting send*/</span></span><br><span class="line">    <span class="keyword">if</span>(dma_get_counts == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">	serial-&gt;Txbuffer-&gt;lenth = length &gt; serial-&gt;dma.setting_tx_len ? serial-&gt;dma.setting_tx_len : length;</span><br><span class="line">	<span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data, buffer, serial-&gt;Txbuffer-&gt;lenth);</span><br><span class="line">        DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)serial-&gt;Txbuffer-&gt;data;</span><br><span class="line">        DMA_InitStructure.BufSize = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">        serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">        <span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail, buffer, length);</span><br><span class="line">        DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail - dma_get_counts);</span><br><span class="line">        DMA_InitStructure.BufSize = length + dma_get_counts;</span><br><span class="line">        serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;tail + length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    DMA_InitStructure.PeriphAddr = (<span class="type">uint32_t</span>) &amp;(serial-&gt;uart_device-&gt;DAT);</span><br><span class="line">    DMA_InitStructure.Direction = DMA_DIR_PERIPH_DST;</span><br><span class="line">    DMA_InitStructure.PeriphInc = DMA_PERIPH_INC_DISABLE;</span><br><span class="line">    DMA_InitStructure.DMA_MemoryInc = DMA_MEM_INC_ENABLE;</span><br><span class="line">    DMA_InitStructure.PeriphDataSize = DMA_PERIPH_DATA_SIZE_BYTE;</span><br><span class="line">    DMA_InitStructure.MemDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">    DMA_InitStructure.CircularMode = DMA_MODE_NORMAL;</span><br><span class="line">    DMA_InitStructure.Priority = DMA_PRIORITY_MEDIUM;</span><br><span class="line">    DMA_InitStructure.Mem2Mem = DMA_M2M_DISABLE;</span><br><span class="line">    DMA_Init(serial-&gt;dma.tx_ch, &amp;DMA_InitStructure);</span><br><span class="line">	</span><br><span class="line">    DMA_ClearFlag(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type);</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, ENABLE);</span><br><span class="line">    <span class="comment">// while(DMA_GetFlagStatus(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type) == RESET)&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题解决来自<code>jindu-chen</code>，修改后：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ec32_uart_dma_tx_config</span><span class="params">(<span class="keyword">struct</span> ec_serial_device *serial, <span class="type">uint8_t</span> *buffer, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE);</span><br><span class="line">    DMA_InitType DMA_InitStructure;</span><br><span class="line">	</span><br><span class="line">    <span class="type">uint16_t</span> dma_get_counts = DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch);</span><br><span class="line">    <span class="comment">/* if no data waiting send*/</span></span><br><span class="line">    <span class="keyword">if</span>(dma_get_counts == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        serial-&gt;Txbuffer-&gt;lenth = length &gt; serial-&gt;dma.setting_tx_len ? serial-&gt;dma.setting_tx_len : length;</span><br><span class="line">        <span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data, buffer, serial-&gt;Txbuffer-&gt;lenth);</span><br><span class="line">        DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)serial-&gt;Txbuffer-&gt;data;</span><br><span class="line">        DMA_InitStructure.BufSize = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">        serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">        <span class="keyword">if</span>(serial-&gt;Txbuffer-&gt;tail + length &gt; serial-&gt;dma.setting_tx_len)</span><br><span class="line">        &#123;</span><br><span class="line">            DMA_EnableChannel(serial-&gt;dma.tx_ch, ENABLE);</span><br><span class="line">            <span class="keyword">while</span>(DMA_GetFlagStatus(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type) == RESET)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE);</span><br><span class="line">            <span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data, buffer, serial-&gt;Txbuffer-&gt;lenth);</span><br><span class="line">            DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)serial-&gt;Txbuffer-&gt;data;</span><br><span class="line">            DMA_InitStructure.BufSize = length;</span><br><span class="line">            serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail, buffer, length);</span><br><span class="line">            DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail - dma_get_counts);</span><br><span class="line">            DMA_InitStructure.BufSize = length + dma_get_counts;</span><br><span class="line">            serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;tail + length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    DMA_InitStructure.PeriphAddr = (<span class="type">uint32_t</span>) &amp;(serial-&gt;uart_device-&gt;DAT);</span><br><span class="line">    DMA_InitStructure.Direction = DMA_DIR_PERIPH_DST;</span><br><span class="line">    DMA_InitStructure.PeriphInc = DMA_PERIPH_INC_DISABLE;</span><br><span class="line">    DMA_InitStructure.DMA_MemoryInc = DMA_MEM_INC_ENABLE;</span><br><span class="line">    DMA_InitStructure.PeriphDataSize = DMA_PERIPH_DATA_SIZE_BYTE;</span><br><span class="line">    DMA_InitStructure.MemDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">    DMA_InitStructure.CircularMode = DMA_MODE_NORMAL;</span><br><span class="line">    DMA_InitStructure.Priority = DMA_PRIORITY_MEDIUM;</span><br><span class="line">    DMA_InitStructure.Mem2Mem = DMA_M2M_DISABLE;</span><br><span class="line">    DMA_Init(serial-&gt;dma.tx_ch, &amp;DMA_InitStructure);</span><br><span class="line">	</span><br><span class="line">    DMA_ClearFlag(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type);</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：修改前<code>tail</code>指针接近缓存区最大边界时，剩余空间不足时会进入以下函数, 一直卡在<code>while</code>中出不来, 需改到后面去：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(serial-&gt;Txbuffer-&gt;tail + length &gt; serial-&gt;dma.setting_tx_len) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(DMA_GetFlagStatus(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type) == RESET)&#123;&#125;</span><br><span class="line">    DMA_ClearFlag(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch) 需要实时获取</span><br></pre></td></tr></table></figure>
<p>即以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ec32_uart_dma_tx_config</span><span class="params">(<span class="keyword">struct</span> ec_serial_device *serial, <span class="type">uint8_t</span> *buffer, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE);</span><br><span class="line">    DMA_InitType DMA_InitStructure;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* if no data waiting send*/</span></span><br><span class="line">    <span class="keyword">if</span>(DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		serial-&gt;Txbuffer-&gt;lenth = length &gt; serial-&gt;dma.setting_tx_len ? serial-&gt;dma.setting_tx_len : length;</span><br><span class="line">		<span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data, buffer, serial-&gt;Txbuffer-&gt;lenth);</span><br><span class="line">        DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)serial-&gt;Txbuffer-&gt;data;</span><br><span class="line">        DMA_InitStructure.BufSize = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">        serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">        <span class="keyword">if</span>(serial-&gt;Txbuffer-&gt;tail + length &gt; serial-&gt;dma.setting_tx_len)</span><br><span class="line">        &#123;</span><br><span class="line">            DMA_EnableChannel(serial-&gt;dma.tx_ch, ENABLE);</span><br><span class="line">            <span class="keyword">while</span>(DMA_GetFlagStatus(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type) == RESET)&#123;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//需在serial-&gt;Txbuffer-&gt;lenth赋值之前，否则DMA_InitStructure.BufSize会刷新，会继续发送未知数据。</span></span><br><span class="line">            DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//需在DMA_EnableChannel(serial-&gt;dma.tx_ch, DISABLE)之后</span></span><br><span class="line">            serial-&gt;Txbuffer-&gt;lenth = length &gt; serial-&gt;dma.setting_tx_len ? serial-&gt;dma.setting_tx_len : length;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data, buffer, serial-&gt;Txbuffer-&gt;lenth);</span><br><span class="line">			DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)serial-&gt;Txbuffer-&gt;data;</span><br><span class="line">			DMA_InitStructure.BufSize = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">			serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;lenth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">memcpy</span>(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail, buffer, length);</span><br><span class="line">			DMA_InitStructure.MemAddr = (<span class="type">uint32_t</span>)(serial-&gt;Txbuffer-&gt;data + serial-&gt;Txbuffer-&gt;tail - DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch));</span><br><span class="line">			DMA_InitStructure.BufSize = length + DMA_GetCurrDataCounter(serial-&gt;dma.tx_ch);</span><br><span class="line">			serial-&gt;Txbuffer-&gt;tail = serial-&gt;Txbuffer-&gt;tail + length;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    DMA_InitStructure.PeriphAddr = (<span class="type">uint32_t</span>) &amp;(serial-&gt;uart_device-&gt;DAT);</span><br><span class="line">    DMA_InitStructure.Direction = DMA_DIR_PERIPH_DST;</span><br><span class="line">    DMA_InitStructure.PeriphInc = DMA_PERIPH_INC_DISABLE;</span><br><span class="line">    DMA_InitStructure.DMA_MemoryInc = DMA_MEM_INC_ENABLE;</span><br><span class="line">    DMA_InitStructure.PeriphDataSize = DMA_PERIPH_DATA_SIZE_BYTE;</span><br><span class="line">    DMA_InitStructure.MemDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">    DMA_InitStructure.CircularMode = DMA_MODE_NORMAL;</span><br><span class="line">    DMA_InitStructure.Priority = DMA_PRIORITY_MEDIUM;</span><br><span class="line">    DMA_InitStructure.Mem2Mem = DMA_M2M_DISABLE;</span><br><span class="line">    DMA_Init(serial-&gt;dma.tx_ch, &amp;DMA_InitStructure);</span><br><span class="line">	</span><br><span class="line">    DMA_ClearFlag(serial-&gt;dma.tx_gl_flag, serial-&gt;dma.tx_dma_type);</span><br><span class="line">    DMA_EnableChannel(serial-&gt;dma.tx_ch, ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="RT-THREAD下IAP升级问题"><a href="#RT-THREAD下IAP升级问题" class="headerlink" title="RT-THREAD下IAP升级问题"></a>RT-THREAD下IAP升级问题</h2><p>当前代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> RT_THREAD_PRIORITY_MAX          32 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_THREAD_COMM_TASK_PRIORITY    10</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">iap</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> proi = RT_THREAD_COMM_TASK_PRIORITY - <span class="number">1</span>;</span><br><span class="line">	<span class="type">rt_thread_t</span> th = rt_thread_find(<span class="string">&quot;tidle&quot;</span>);					<span class="comment">//fix it（2022.8.30）</span></span><br><span class="line">	rt_thread_control(th,RT_THREAD_CTRL_CHANGE_PRIORITY,&amp;proi);</span><br><span class="line">	SerialDownload();</span><br><span class="line">	proi = RT_THREAD_PRIORITY_MAX - <span class="number">1</span>;</span><br><span class="line">	rt_thread_control(th,RT_THREAD_CTRL_CHANGE_PRIORITY,&amp;proi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>思路是进入<code>IAP</code>升级后提高当前优先级，避免其他任务打断，传输数据接收异常，导致升级失败。</li>
<li>后面测试发现如果升级途中被外部字符输入打断，会一直在<code>YMODEM</code>里面出不来，开了看门口也没用（<code>YMODEM</code>接收程序里有看门狗）。</li>
<li>解决方法：<br>目前添加<code>rt_schedule();</code>暂时解决问题，测试中会偶发，最近测试没有发现，待进一步测试。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th = rt_thread_find(<span class="string">&quot;tidle&quot;</span>);					<span class="comment">//fix it（2022.8.30）</span></span><br><span class="line">    <span class="type">int</span> original_priority = th-&gt;current_priority;</span><br><span class="line">    <span class="type">int</span> new_priority = RT_THREAD_COMM_TASK_PRIORITY - <span class="number">1</span>;</span><br><span class="line">	<span class="type">rt_err_t</span> ret = rt_thread_control(th,RT_THREAD_CTRL_CHANGE_PRIORITY,&amp;new_priority);</span><br><span class="line">    <span class="comment">// rt_schedule();</span></span><br><span class="line"></span><br><span class="line">	SerialDownload();</span><br><span class="line"></span><br><span class="line">	ret = rt_thread_control(th,RT_THREAD_CTRL_CHANGE_PRIORITY,&amp;original_priority);</span><br><span class="line">    rt_schedule();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>MCU</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown小贴士</title>
    <url>/2024/02/19/Markdown%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    <content><![CDATA[<h3 id="Markdown-的基本语法"><a href="#Markdown-的基本语法" class="headerlink" title="Markdown 的基本语法"></a>Markdown 的基本语法</h3><p>Markdown 的语法非常简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。以下是一些常用的 Markdown 标记符号：</p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题	
</code></pre>
<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><pre><code>普通文本
**加粗文本**
*斜体文本*
**~删除线文本~**
</code></pre>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><pre><code>* 无序列表
1. 有序列表
    * 嵌套列表
</code></pre>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><pre><code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="文本中代码高亮"><a href="#文本中代码高亮" class="headerlink" title="文本中代码高亮"></a>文本中代码高亮</h4><pre><code>使用`printf(&quot;Hello, world!\n&quot;);`函数进行打印
</code></pre>
<p>效果：使用<code>printf(&quot;Hello, world!\n&quot;);</code>函数进行打印</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><strong>链接文本</strong>: <a href="https://www.example.com/">https://www.example.com</a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>网络地址: ![这是一张示例图片](https://www.example.com/example.png)
本地文件路径：![这是一张示例图片](../pictures/这是一张示例图片.png)
图片链接跳转: ![这是一张示例图片](example.png) &#123;link=https://www.example.com/&#125;
图片标题: ![这是一张示例图片](example.png) &#123;title=这是一张示例图片&#125;
图片居中: ![这是一张示例图片](example.png) &#123;align=center&#125;

示例：
![这是一张示例图片](example.png)
![这是一张 200x100 像素的图片](example.png) &#123;width=200 height=100&#125;
![这是一张居中的图片](example.png) &#123;align=center&#125;
![点击图片跳转到 https://www.example.com/](example.png) &#123;link=https://www.example.com/&#125;
![这是一张示例图片](example.png) &#123;title=这是一张示例图片&#125;
</code></pre>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table>
<thead>
<tr>
<th>头部1</th>
<th>头部2</th>
<th>头部3</th>
</tr>
</thead>
<tbody><tr>
<td>内容1</td>
<td>内容2</td>
<td>内容3</td>
</tr>
<tr>
<td>内容4</td>
<td>内容5</td>
<td>内容6</td>
</tr>
</tbody></table>
<h3 id="Markdown-的应用"><a href="#Markdown-的应用" class="headerlink" title="Markdown 的应用"></a>Markdown 的应用</h3><pre><code>博客文章
技术文档
README 文件
演示文稿
电子书
</code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>Markdown 是一种易于学习和使用的标记语言，非常适合编写各种文档。如果您还没有使用过 Markdown，建议您尝试一下。
</code></pre>
<p>以下是 Markdown 官方教学网站：<br><a href="https://markdown.com.cn/basic-syntax/headings.html">Markdown 官方网站</a></p>
]]></content>
      <categories>
        <category>文本编辑工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>CmBacktrace移植</title>
    <url>/2024/04/19/CmBacktrace%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<h2 id="CmBacktrace简介"><a href="#CmBacktrace简介" class="headerlink" title="CmBacktrace简介"></a>CmBacktrace简介</h2><ul>
<li>支持断言（assert）和故障（Hard Fault）</li>
<li>故障原因自动诊断</li>
<li>输出错误现场的 函数调用栈</li>
<li>适配 Cortex-M0&#x2F;M3&#x2F;M4&#x2F;M7 MCU；</li>
<li>支持 IAR、KEIL、GCC 编译器；</li>
</ul>
<h2 id="移植步骤"><a href="#移植步骤" class="headerlink" title="移植步骤"></a>移植步骤</h2><p><strong>1. 下载源码</strong></p>
<p><strong>官方源码地址</strong> : <a href="https://github.com/armink/CmBacktrace">https://github.com/armink/CmBacktrace</a><br><strong>示例项目地址</strong> : <a href="https://github.com/XUAN9527/cmbacktrace-demo">https://github.com/XUAN9527/cmbacktrace-demo</a></p>
<p><strong>2. copy源码文件</strong></p>
<p><img src="/../pictures/cmbacktrace%E7%9B%AE%E5%BD%95.png" alt="cmbacktrace目录"></p>
<ul>
<li>添加头文件<code>cm_backtrace.h</code> <code>cmb_cfg.h</code> <code>cmb_def.h</code></li>
<li>添加源文件<code>cm_backtrace.c</code></li>
<li>添加demos文件 <code>demos/non_os/stm32f10x/app/src/fault_test.c</code></li>
<li>修改添加<code>fault_handler/gcc/cmb_fault.S</code>为<code>fault_handler/gcc/cmb_fault.s</code></li>
</ul>
<p><strong>2.1 添加修改makefile：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ASM_SOURCES =  \</span><br><span class="line">CMSIS/device/startup/startup_n32l40x_gcc.s \</span><br><span class="line">components/cm_backtrace/fault_handler/gcc/cmb_fault.s #添加这一行</span><br></pre></td></tr></table></figure>

<p><strong>2.2 添加printf重定向：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span>* pBuffer, <span class="type">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> drv_serial_dma_write(ESERIAL_1, pBuffer, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.3 修改文件：</strong></p>
<ul>
<li><p><code>cmb_cfg.h</code>文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CMB_CFG_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CMB_CFG_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* print line, must config by user */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cmb_println(...)  printf(__VA_ARGS__);printf(<span class="string">&quot;\r\n&quot;</span>) <span class="comment">/* e.g., printf(__VA_ARGS__);printf(&quot;\r\n&quot;)  or  SEGGER_RTT_printf(0, __VA_ARGS__);SEGGER_RTT_WriteString(0, &quot;\r\n&quot;)  */</span></span></span><br><span class="line"><span class="comment">/* enable bare metal(no OS) platform */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMB_USING_BARE_METAL_PLATFORM</span></span><br><span class="line"><span class="comment">/* enable OS platform */</span></span><br><span class="line"><span class="comment">/* #define CMB_USING_OS_PLATFORM */</span></span><br><span class="line"><span class="comment">/* OS platform type, must config when CMB_USING_OS_PLATFORM is enable */</span></span><br><span class="line"><span class="comment">/* #define CMB_OS_PLATFORM_TYPE           CMB_OS_PLATFORM_RTT or CMB_OS_PLATFORM_UCOSII or CMB_OS_PLATFORM_UCOSIII or CMB_OS_PLATFORM_FREERTOS or CMB_OS_PLATFORM_RTX5 */</span></span><br><span class="line"><span class="comment">/* cpu platform type, must config by user */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMB_CPU_PLATFORM_TYPE   CMB_CPU_ARM_CORTEX_M4       <span class="comment">/* CMB_CPU_ARM_CORTEX_M0 or CMB_CPU_ARM_CORTEX_M3 or CMB_CPU_ARM_CORTEX_M4 or CMB_CPU_ARM_CORTEX_M7 */</span></span></span><br><span class="line"><span class="comment">/* enable dump stack information */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMB_USING_DUMP_STACK_INFO</span></span><br><span class="line"><span class="comment">/* language of print information */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMB_PRINT_LANGUAGE    CMB_PRINT_LANGUAGE_ENGLISH        <span class="comment">/* CMB_PRINT_LANGUAGE_ENGLISH(default) or CMB_PRINT_LANGUAGE_CHINESE */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _CMB_CFG_H_ */</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改n32l40x_flash.ld链接文件</p>
<ul>
<li>text段开始之前添加 <code>_stext = .;</code> 下面为例程：</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Define output sections */</span></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The startup code goes first into FLASH */</span></span><br><span class="line">  .isr_vector :</span><br><span class="line">  &#123;</span><br><span class="line">    . = ALIGN(<span class="number">4</span>);</span><br><span class="line">    KEEP(*(.isr_vector)) <span class="comment">/* Startup code */</span></span><br><span class="line">    . = ALIGN(<span class="number">4</span>);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  _stext = .;				<span class="meta"># text段开始之前添加</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The program code and other data goes into FLASH */</span></span><br><span class="line">  .text :</span><br><span class="line">  &#123;</span><br><span class="line">    . = ALIGN(<span class="number">4</span>);</span><br><span class="line">    *(.text)           <span class="comment">/* .text sections (code) */</span></span><br><span class="line">    *(.text*)          <span class="comment">/* .text* sections (code) */</span></span><br><span class="line">    *(.glue_7)         <span class="comment">/* glue arm to thumb code */</span></span><br><span class="line">    *(.glue_7t)        <span class="comment">/* glue thumb to arm code */</span></span><br><span class="line">    *(.eh_frame)</span><br><span class="line"></span><br><span class="line">    KEEP (*(.init))</span><br><span class="line">    KEEP (*(.fini))</span><br></pre></td></tr></table></figure>

<ul>
<li>text段开始之前添加 <code>_sstack = .;</code> 下面为例程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.bss :</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* This is used by the startup in order to initialize the .bss secion */</span></span><br><span class="line">  _sbss = .;         <span class="comment">/* define a global symbol at bss start */</span></span><br><span class="line">  __bss_start__ = _sbss;</span><br><span class="line">  *(.bss)</span><br><span class="line">  *(.bss*)</span><br><span class="line">  *(COMMON)</span><br><span class="line"></span><br><span class="line">  . = ALIGN(<span class="number">4</span>);</span><br><span class="line">  _ebss = .;         <span class="comment">/* define a global symbol at bss end */</span></span><br><span class="line">  __bss_end__ = _ebss;</span><br><span class="line">&#125; &gt;RAM</span><br><span class="line"></span><br><span class="line">_sstack = .;				<span class="meta"># stack段开始之前添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* User_heap_stack section, used to check that there is enough RAM left */</span></span><br><span class="line">._user_heap_stack :</span><br><span class="line">&#123;</span><br><span class="line">  . = ALIGN(<span class="number">4</span>);</span><br><span class="line">  PROVIDE ( end = . );</span><br><span class="line">  PROVIDE ( _end = . );</span><br><span class="line">  . = . + _Min_Heap_Size;</span><br><span class="line">  . = . + _Min_Stack_Size;</span><br><span class="line">  _estack = .;        <span class="comment">/* end of RAM */</span></span><br><span class="line">  . = ALIGN(<span class="number">4</span>);</span><br><span class="line">&#125; &gt;RAM</span><br></pre></td></tr></table></figure>

<p><strong>2.4 main函数例程：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cm_backtrace.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HARDWARE_VERSION               <span class="string">&quot;V1.0.0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOFTWARE_VERSION               <span class="string">&quot;V0.1.0&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">fault_test_by_unalign</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">fault_test_by_div0</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    main_system_init();</span><br><span class="line">	cm_backtrace_init(<span class="string">&quot;CmBacktrace&quot;</span>, HARDWARE_VERSION, SOFTWARE_VERSION);</span><br><span class="line">	</span><br><span class="line">	fault_test_by_unalign();</span><br><span class="line">    fault_test_by_div0();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译出错后代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Firmware name: CmBacktrace, hardware version: V1<span class="number">.0</span><span class="number">.0</span>, software version: V0<span class="number">.1</span><span class="number">.0</span></span><br><span class="line">Fault on interrupt or bare <span class="title function_">metal</span><span class="params">(no OS)</span> environment</span><br><span class="line">===== Thread <span class="built_in">stack</span> information =====</span><br><span class="line">  addr: <span class="number">20004</span>ec8    data: <span class="number">5</span>a6d79ca</span><br><span class="line">  addr: <span class="number">20004</span>ecc    data: f758b4b7</span><br><span class="line">  addr: <span class="number">20004</span>ed0    data: <span class="number">94</span>cfc3fd</span><br><span class="line">  addr: <span class="number">20004</span>ed4    data: a8ccaa51</span><br><span class="line">  addr: <span class="number">20004</span>ed8    data: <span class="number">61049</span>ca6</span><br><span class="line">  addr: <span class="number">20004</span>edc    data: e4e1b169</span><br><span class="line">  addr: <span class="number">20004</span>ee0    data: b48e100d</span><br><span class="line">  addr: <span class="number">20004</span>ee4    data: c44eb7ea</span><br><span class="line">  addr: <span class="number">20004</span>ee8    data: <span class="number">23</span>d4e51e</span><br><span class="line">  addr: <span class="number">20004</span>eec    data: <span class="number">8527b</span>7c0</span><br><span class="line">  addr: <span class="number">20004</span>ef0    data: fd9d41f7</span><br><span class="line">  addr: <span class="number">20004</span>ef4    data: f539e421</span><br><span class="line">  addr: <span class="number">20004</span>ef8    data: <span class="number">4</span>ad52963</span><br><span class="line">  addr: <span class="number">20004</span>efc    data: <span class="number">4587b</span>423</span><br><span class="line">  addr: <span class="number">20004f</span>00    data: e000ed00</span><br><span class="line">  addr: <span class="number">20004f</span>04    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>08    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>0c    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>10    data: <span class="number">200022</span>cc</span><br><span class="line">  addr: <span class="number">20004f</span>14    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>18    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>1c    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>20    data: <span class="number">00000000</span></span><br><span class="line">  addr: <span class="number">20004f</span>24    data: <span class="number">08009093</span></span><br><span class="line">====================================</span><br><span class="line">=================== Registers information ====================</span><br><span class="line">  R0 : <span class="number">20002</span>ee9  R1 : <span class="number">20002e4</span>c  R2 : e000ed14  R3 : <span class="number">2000253</span>c</span><br><span class="line">  R12: <span class="number">0000000</span>a  LR : <span class="number">0800</span>a3b3  PC : <span class="number">080154</span>c2  PSR: <span class="number">61000000</span></span><br><span class="line">==============================================================</span><br><span class="line">Usage fault is caused by attempts to execute an undefined instruction</span><br><span class="line">Show more call <span class="built_in">stack</span> info by run: addr2line -e CmBacktrace.elf -a -f <span class="number">080154</span>c2 <span class="number">0800</span>a3b2 <span class="number">08009092</span></span><br></pre></td></tr></table></figure>

<p><strong>转换为定位代码工具：</strong></p>
<ul>
<li><code>linux</code>环境下输入：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">addr2line -e app.elf -a -f <span class="number">080154</span>c2 <span class="number">0800</span>a3b2 <span class="number">08009092</span></span><br></pre></td></tr></table></figure>

<p>解释：<code>app.elf</code> 为你的工程编译文件。</p>
<p><strong>数据分析结果：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">xuan@DESKTOP-A52B6V9:~/work/n5-mini-s-plus/code/app/build$ addr2line -e app.elf -a -f <span class="number">080154</span>c2 <span class="number">0800</span>a3b2 <span class="number">08009092</span></span><br><span class="line"><span class="number">0x080154c2</span></span><br><span class="line">fault_test_by_unalign</span><br><span class="line">/home/xuan/work/n5-mini-s-plus/code/app/components/cm_backtrace/fault_test.c:<span class="number">18</span></span><br><span class="line"><span class="number">0x0800a3b2</span></span><br><span class="line">main</span><br><span class="line">/home/xuan/work/n5-mini-s-plus/code/app/application/main.c:<span class="number">30</span></span><br><span class="line"><span class="number">0x08009092</span></span><br><span class="line">LoopFillZerobss</span><br><span class="line">/home/xuan/work/n5-mini-s-plus/code/app/CMSIS/device/startup/startup_n32l40x_gcc.s:<span class="number">113</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>错误追踪</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cortex-M</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下开发单片机</title>
    <url>/2024/03/28/Linux%E4%B8%8B%E5%BC%80%E5%8F%91%E5%8D%95%E7%89%87%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="Ubuntu-Wsl环境搭建"><a href="#Ubuntu-Wsl环境搭建" class="headerlink" title="Ubuntu Wsl环境搭建"></a>Ubuntu Wsl环境搭建</h2><h3 id="Windows10系统安装子系统Wsl"><a href="#Windows10系统安装子系统Wsl" class="headerlink" title="Windows10系统安装子系统Wsl"></a>Windows10系统安装子系统Wsl</h3><p><strong>1. 通过 Microsoft Store 安装</strong></p>
<ul>
<li>打开 Microsoft Store。</li>
<li>搜索 “适用于 Linux 的 Windows 子系统”。</li>
<li>选择 “Ubuntu” 或您喜欢的其他 Linux 发行版。</li>
<li>点击 “获取”。</li>
<li>安装完成后，点击 “启动”。</li>
</ul>
<p><strong>2. 通过命令行</strong></p>
<ul>
<li><p>打开 PowerShell 或 命令提示符 以管理员身份运行。</p>
</li>
<li><p>输入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启您的计算机。</p>
</li>
<li><p>安装完成后，您可以通过以下命令启动 WSL：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>WSL 需要 Windows 10 版本 1709 或更高版本。</li>
<li>您可以通过以下命令检查您的 Windows 版本：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winver</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果您使用的是 Windows 10 家庭版，您需要启用 “<strong>适用于 Linux 的 Windows 子系统</strong>” 功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">控制面板-&gt;程序和功能-&gt;启用或关闭 Windows 功能-&gt;适用于 Linux 的 Windows 子系统-&gt;确定</span><br></pre></td></tr></table></figure>
</li>
<li><p>您可以通过以下命令启用 “<strong>适用于 Linux 的 Windows 子系统</strong>” 功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启您的计算机后，您就可以通过上述方法安装 WSL 了。</p>
</li>
</ul>
<p>安装 Windows Terminal</p>
<h3 id="编译环境配置"><a href="#编译环境配置" class="headerlink" title="编译环境配置"></a>编译环境配置</h3><ul>
<li><p><code>gcc-arm-none-eabi</code>工具链安装</p>
<ul>
<li>手动安装：<a href="https://developer.arm.com/downloads/-/gnu-rm">官方链接地址</a> 下载所需版本；  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install bzip2</span><br><span class="line">sudo tar -xvf ~/n32_gcc/software_package/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2 -C ~/n32_gcc</span><br></pre></td></tr></table></figure></li>
<li>自动安装：<code>sudo apt-get install gcc-arm-none-eabi</code></li>
<li>打开 <code>~/.bashrc</code></li>
<li>添加<code>export PATH=$PATH:~/n32_gcc/gcc-arm-none-eabi-9-2019-q4-major/bin</code></li>
<li>添加<code>alias open-file=&#39;explorer.exe .&#39;</code></li>
<li>使能用户环境变量<code>source ~/.bashrc</code></li>
</ul>
</li>
<li><p>Make</p>
<ul>
<li><code>sudo apt-get install make</code></li>
</ul>
</li>
</ul>
<h3 id="Winodows-Gcc-Make-环境搭建"><a href="#Winodows-Gcc-Make-环境搭建" class="headerlink" title="Winodows Gcc + Make 环境搭建"></a>Winodows Gcc + Make 环境搭建</h3><ul>
<li>安装software_package目录下的<code>gcc-arm-none-eabi-9-2019-q4-major-win32-sha2.exe</code>和<code>make-3.81.exe</code></li>
<li>分别将其安装目录下的 <code>./bin</code>添加到系统环境变量，重启生效</li>
<li>复制裸机工程至Windows下，修改部分Makefile的linux指令以适配Windows即可</li>
</ul>
<h3 id="裸机工程编译"><a href="#裸机工程编译" class="headerlink" title="裸机工程编译"></a>裸机工程编译</h3><ul>
<li>cd n32g452_gcc</li>
<li>make</li>
</ul>
<br>

<h2 id="环境配置及工具链"><a href="#环境配置及工具链" class="headerlink" title="环境配置及工具链"></a>环境配置及工具链</h2><h3 id="打开新终端-bashrc不会自动刷新"><a href="#打开新终端-bashrc不会自动刷新" class="headerlink" title="打开新终端 ~&#x2F;.bashrc不会自动刷新"></a>打开新终端 ~&#x2F;.bashrc不会自动刷新</h3><p>解决linux每次打开新终端都要重新<code>source ~/.bashrc</code>问题<br>执行以下代码：</p>
<pre><code>vi ~/.bash_profile
</code></pre>
<p>有可能此文件是空白新建的，无所谓。然后在此文件末尾加入：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ];then</span><br><span class="line">source ~/.bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>然后<code>:wq</code>保存即可。<br>此时打开新终端可以自动执行<code>source ~/.bashrc</code></p>
<br>

<h3 id="arm-none-eabi-gcc工具链问题"><a href="#arm-none-eabi-gcc工具链问题" class="headerlink" title="arm-none-eabi-gcc工具链问题"></a>arm-none-eabi-gcc工具链问题</h3><ul>
<li>arm-none-eabi-gcc工具链需加入用户变量：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">export PATH=/home/xuan/OpenHarmony/install-software/gcc-arm-none-eabi<span class="number">-9</span><span class="number">-2019</span>-q4-major/bin:$PATH</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：需确认路径，否则找不到用户路径会搜索系统自带编译链 <code>/usr/lib/gcc/arm-none-eabi/10.3.1</code></p>
<br>

<h2 id="Linux下编写Python合并脚本"><a href="#Linux下编写Python合并脚本" class="headerlink" title="Linux下编写Python合并脚本"></a>Linux下编写Python合并脚本</h2><h3 id="合并-bootloader-app-mix"><a href="#合并-bootloader-app-mix" class="headerlink" title="合并 bootloader + app  &#x3D; mix"></a>合并 bootloader + app  &#x3D; mix</h3><p><strong>1. 安装 PyInstaller</strong></p>
<pre><code>pip install pyinstaller
</code></pre>
<br>

<p><strong>2. 编写Python合并程序</strong></p>
<p><a href="https://github.com/XUAN9527/script">代码链接</a></p>
<br>

<p><strong>3. 打包 Python 程序</strong></p>
<p><strong>参数说明：</strong></p>
<ul>
<li><code>-F</code>：生成单一可执行文件。</li>
<li><code>-D</code>：生成包含所有依赖项的目录。</li>
<li><code>-n</code>：指定可执行文件名。</li>
<li><code>--distpath</code>：指定可执行文件输出目录。</li>
<li><code>--noconfirm</code>：覆盖输出文件时无需确认。</li>
</ul>
<p><strong>以下是一些常用的高级选项：</strong></p>
<ul>
<li><code>--hidden-import</code>：指定要隐藏导入的模块。</li>
<li><code>--exclude-module</code>：指定要排除的模块。</li>
<li><code>--onefile</code>：将所有文件打包成一个可执行文件。</li>
<li><code>--runtime</code>：指定 Python 运行时版本。</li>
</ul>
<p><strong>执行规则:</strong></p>
<pre><code>cd new_file,copy file.py and file.ico
pyinstaller -F -w (-i icofile) 文件名.py
</code></pre>
<p><strong>example:</strong></p>
<pre><code>pyinstaller -F file.py
pyinstaller -F -w -i file.ico file.py
</code></pre>
<br>

<p><strong>4. 运行可执行文件</strong></p>
<pre><code>./dist/file
</code></pre>
<br>

<p><strong>5. 例程</strong></p>
<p><a href="https://github.com/XUAN9527/script">代码链接</a></p>
<br>

<p><strong>6. 实际应用场景</strong></p>
<ul>
<li>单独使用：Linux环境下单独执行使用。</li>
<li>集成在<code>makefile</code>中，使用<code>make</code>编译自动生成文件：<ul>
<li>将<code>papp_up</code>和<code>mix_10K</code>打包至<code>tools</code>文件夹，放在<code>makefile</code>同一目录下。</li>
<li>需要<code>bootloder.bin</code>在<code>../bootloader</code>目录下。</li>
<li>修改makefile生成规则。</li>
<li><code>$(BUILD_DIR)</code>为编译文件目录，跟进自身makefile修改。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.PHONY : clean all</span><br><span class="line"></span><br><span class="line">all: $(TARGET).bin $(TARGET).<span class="built_in">list</span> $(TARGET).hex</span><br><span class="line">	$(SZ) $(TARGET).elf</span><br><span class="line">	@make copy</span><br><span class="line">	@make mix</span><br><span class="line"></span><br><span class="line">.PHONY: copy</span><br><span class="line"></span><br><span class="line">copy: $(TARGET).bin</span><br><span class="line">	cp $(TARGET).bin app.bin</span><br><span class="line">	cp ../bootloader/bootloader.bin bootloader.bin</span><br><span class="line"><span class="meta">#	cp $(TARGET).hex app.hex</span></span><br><span class="line"></span><br><span class="line">mix:</span><br><span class="line">	./tools/papp_up</span><br><span class="line">	./tools/mix_10K</span><br><span class="line">	$(OC) -I binary -O ihex --change-addresses <span class="number">0x8000000</span> mix.bin mix.hex</span><br><span class="line">	rm bootloader.bin</span><br><span class="line">	rm app.bin</span><br><span class="line">	rm mix.bin</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -rf $(BUILD_DIR)</span><br><span class="line">	rm papp.bin</span><br><span class="line">	rm mix.hex</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<br>



]]></content>
      <categories>
        <category>嵌入式</category>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>杂项笔记</title>
    <url>/2024/01/31/%E6%9D%82%E9%A1%B9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="J-Link-J-Flash"><a href="#J-Link-J-Flash" class="headerlink" title="J-Link&#x2F;J-Flash"></a>J-Link&#x2F;J-Flash</h2><p><strong>J-Flash批处理脚本配置烧录：</strong>当然，前提是要添加J-Link的可执行程序路径到<code>$PATH</code>环境变量中</p>
<ul>
<li><code>program.bat</code>脚本代码如下，参考修改即可：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo start...</span><br><span class="line"></span><br><span class="line">JLink -device N32L406CB -if swd -speed 4000 -CommanderScript &quot;C:\Users\Breo\Desktop\Wireless moxibustion\Software\program.jlink&quot;</span><br></pre></td></tr></table></figure></li>
<li><code>program.jlink</code>文件代码如下，其中目标设备、文件路径、烧录地址等根据需要配置：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect</span><br><span class="line">device N32L406CB</span><br><span class="line">si SWD</span><br><span class="line">speed 4000</span><br><span class="line">h		// halt-停止</span><br><span class="line">r		// 复位，可以考虑去掉</span><br><span class="line">erase		// 或 erase 0x8002800，去掉也行，但可能会出现error fail address 0x00000000错误提示</span><br><span class="line"></span><br><span class="line">loadfile app.bin 0x8002800      // loadfile app.hex 或 loadfile app.bin 0x8000000</span><br><span class="line">verifybin app.bin 0x8002800</span><br><span class="line">r</span><br><span class="line">go		// r go表示reset and run</span><br><span class="line">q		// 退出J-Link命令行工具</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Ubuntu-无法更新问题"><a href="#Ubuntu-无法更新问题" class="headerlink" title="Ubuntu 无法更新问题"></a>Ubuntu 无法更新问题</h2><p>Ubuntu 无法使用<code>apt update</code></p>
<h3 id="更改软件源"><a href="#更改软件源" class="headerlink" title="更改软件源"></a>更改软件源</h3><p>编辑 <code>/etc/apt/sources.list</code> 文件，将以下内容添加到文件末尾</p>
<pre><code>deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse

deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse

deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
</code></pre>
<h3 id="清除-apt-缓存"><a href="#清除-apt-缓存" class="headerlink" title="清除 apt 缓存"></a>清除 apt 缓存</h3><pre><code>sudo apt clean
sudo apt autoclean
</code></pre>
<h3 id="尝试更新系统"><a href="#尝试更新系统" class="headerlink" title="尝试更新系统"></a>尝试更新系统</h3><pre><code>sudo apt update
</code></pre>
<p>显示 <code>ModuleNotFoundError: No module named &#39;apt_pkg&#39;</code>，重新安装 “<code>apt_pkg</code>“ 模块：</p>
<pre><code>sudo apt install --reinstall python3-apt
</code></pre>
<p>显示 ERROR：</p>
<pre><code>E: Could not read response to hello message from hook [ ! -f /usr/bin/snap ] || /usr/bin/snap advise-snap --from-apt 2&gt;/dev/null || true: Success
</code></pre>
<p>如果问题仍然存在，尝试修复 Python 包：</p>
<pre><code>sudo apt install --fix-broken
</code></pre>
<p>然后就更新系统了：</p>
<pre><code>sudo apt update
sudo apt upgrade
</code></pre>
<p>执行<code>sudo apt upgrade</code>后显示ERROR：</p>
<pre><code>Errors were encountered while processing:
/tmp/apt-dpkg-install-cQBLJW/626-linux-iot-tools-common_5.4.0-1030.31_all.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>
<p>最后一步，修复损坏的软件包配置：</p>
<pre><code>sudo dpkg --configure -a
sudo apt upgrade
</code></pre>
<h2 id="Breo蓝牙启动异常"><a href="#Breo蓝牙启动异常" class="headerlink" title="Breo蓝牙启动异常"></a>Breo蓝牙启动异常</h2><h3 id="Breo蓝牙初始化"><a href="#Breo蓝牙初始化" class="headerlink" title="Breo蓝牙初始化"></a>Breo蓝牙初始化</h3><p>蓝牙初始化没完成，透传未开启，app就连接蓝牙了。<br>设置透传参数，开启透传的的状态中增加连接蓝牙接受指令。</p>
<h3 id="心跳包回复超时"><a href="#心跳包回复超时" class="headerlink" title="心跳包回复超时"></a>心跳包回复超时</h3><p>现在是接收&#x2F;刷新设备数据200ms超时，延迟太长还可以缩短。</p>
<h2 id="SPI级联led灯调试小助手"><a href="#SPI级联led灯调试小助手" class="headerlink" title="SPI级联led灯调试小助手"></a>SPI级联led灯调试小助手</h2><p>产品名称：1209RGB幻彩雾状<br>产品型号：XTQ-016B.RGB-2307125-20</p>
<h3 id="SPI级联led灯问题汇总"><a href="#SPI级联led灯问题汇总" class="headerlink" title="SPI级联led灯问题汇总"></a>SPI级联led灯问题汇总</h3><h4 id="充电闪灯问题"><a href="#充电闪灯问题" class="headerlink" title="充电闪灯问题"></a>充电闪灯问题</h4><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>充电中拔掉电源，立即再次插入，会闪一下灯；若等两秒再插入则不会出现，初步判断是此款芯片有锁存功能，会保存到寄存器中，未完全掉电再次插入则会继续执行上次的寄存器数据。</p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>充电中拔掉电源，程序不要立即断电，持续两秒反初始化spi灯珠，即给spi寄存器写全灭数据。</p>
<h4 id="呼吸灯闪烁问题"><a href="#呼吸灯闪烁问题" class="headerlink" title="呼吸灯闪烁问题"></a>呼吸灯闪烁问题</h4><h5 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h5><p>程序中呼吸灯会跑偶尔闪烁，影响显示效果。分析发现，代码中有电机的FG检测，此检测开启了输入捕获功能，会持续中断触发，虽然spi灯的驱动是dma发送，但是也是由CPU来调度的，并不能与中断并行。spi呼吸灯效果需要持续发送数据，且时序要求很高，中断会抢占spi的dma发送，打断spi传输数据，导致数据传输出错，造成闪灯效果。</p>
<h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p>1、提高芯片主频，n32l403KB最高主频为64MHz，如果主频提高效果会好一些。<br>2、spi呼吸灯效果持续发送数据，不能与中断频繁的代码一起使用。</p>
<h2 id="某项目充电保护仍充电"><a href="#某项目充电保护仍充电" class="headerlink" title="某项目充电保护仍充电"></a>某项目充电保护仍充电</h2><p>修改代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;-1, 1, PIN_CHARGE_CC_DETECT, PIN_MODE_INPUT&#125;,	//input/output switch</span><br><span class="line"></span><br><span class="line">static void board_charge_cc_set(bool en)</span><br><span class="line">&#123;	</span><br><span class="line">	struct pin_status_desc *pin = pin_handle(PIN_CHARGE_CC_DETECT);</span><br><span class="line">	<span class="keyword">if</span>(en)</span><br><span class="line">	&#123;</span><br><span class="line">		pin-&gt;<span class="built_in">type</span> = PIN_MODE_INPUT;</span><br><span class="line">		drv_pin_mode(pin-&gt;pin_id,pin-&gt;<span class="built_in">type</span>);</span><br><span class="line">		pin-&gt;lvl_rt = -1;			//重置lvl_rt，以防止output出问题</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		pin-&gt;<span class="built_in">type</span> = PIN_MODE_OUTPUT;</span><br><span class="line">		drv_pin_mode(pin-&gt;pin_id,pin-&gt;<span class="built_in">type</span>);</span><br><span class="line">		pin_set_func(pin, PIN_HIGH);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Git小贴士"><a href="#Git小贴士" class="headerlink" title="Git小贴士"></a>Git小贴士</h2><h3 id="执行-git-pull-会覆盖本地的修改吗？"><a href="#执行-git-pull-会覆盖本地的修改吗？" class="headerlink" title="执行 git pull 会覆盖本地的修改吗？"></a>执行 git pull 会覆盖本地的修改吗？</h3><p>没有冲突的情况下，远端会直接更新至本地上，但不会改变本地未提交的变动；如果本地修改已提交，则会执行一个远端分支和本地分支的合并</p>
<h3 id="git-fetch-和-git-pull-的区别与联系"><a href="#git-fetch-和-git-pull-的区别与联系" class="headerlink" title="git fetch 和 git pull 的区别与联系"></a>git fetch 和 git pull 的区别与联系</h3><p><code>git fetch</code>用于从远程仓库获取最新的提交，保存到本地的远程跟踪分支中（<code>FETCH_HEAD</code>），可以通过查看此分支了解远程仓库的更新情况</p>
<ul>
<li><code>git diff FETCH_HEAD</code>比较查看该分支和当前工作分支的内容</li>
</ul>
<br>

<p><code>git pull</code>会自动获取远程仓库的更新，并且合并到当前分支上，相当于<code>git fetch</code> + <code>git merge FETCH_HEAD</code></p>
<ul>
<li>将远程仓库中指定分支的最新提交 ID 保存到本地的 <code>FETCH_HEAD</code> 分支中</li>
<li>将 <code>FETCH_HEAD</code> 分支合并到当前工作分支中</li>
</ul>
<h3 id="基础非典型操作"><a href="#基础非典型操作" class="headerlink" title="基础非典型操作"></a>基础非典型操作</h3><h3 id="本地git配置"><a href="#本地git配置" class="headerlink" title="本地git配置"></a>本地git配置</h3><br>

<p><strong>配置本地与远端的SSH密钥连接流程：</strong></p>
<ul>
<li>本地生成SSH公钥和私钥(如果没有的话，另，linux下公钥通常存放于<code>~/.ssh/*.pub</code>)<ul>
<li><code>ssh-keygen -t rsa -b 4096 -C xxx@xxx.com</code></li>
</ul>
</li>
<li>复制公钥，添加至远端平台的SSH设置上<br></li>
</ul>
<p><strong>查看本地配置：</strong></p>
<ul>
<li><code>git config --list</code>查看当前项目的所有配置</li>
<li><code>git config --global --list</code>查看全局配置<br></li>
</ul>
<p><strong>修改用户名(全局&#x2F;当前项目)</strong></p>
<p>此用户名即提交日志上所展示的用户名称</p>
<ul>
<li>修改全局用户名：<code>git config --global user.name &quot;xxx&quot;</code>，影响用户的所有仓库</li>
<li>修改当前路径项目的用户名：<code>git config user.name &quot;xxx&quot;</code></li>
<li>查看全局用户名：<code>git config user.name</code><br></li>
</ul>
<p><strong>初始化本地工程并与远端已有仓库的main分支关联：</strong></p>
<ul>
<li>进入工程根目录，<code>git init</code>初始化本地仓库</li>
<li>添加远程仓库：<code>git remote add origin &lt;远程仓库地址&gt;</code></li>
<li><code>git branch -M main</code>将当前分支重命名为<code>main</code>，M即<code>--move --force</code>的缩写。（可以分别输入<code>git add --all</code>，<code>git commit -m &quot;first commit&quot;</code>完成对本地分支的首次提交）</li>
<li>使用<code>git pull origin main</code>，将远程仓库的main分支拉取到本地，或者<code>git push -u origin main -f</code>将本地的xxx分支强制推送到远端main分支，其中-u是<code>--set-upstream</code>的缩写，后续会保持这个跟踪关系</li>
</ul>
<br>

<h2 id="可变参数函数详解"><a href="#可变参数函数详解" class="headerlink" title="可变参数函数详解"></a>可变参数函数详解</h2><p>C语言中的可变参数函数允许您定义函数，其参数个数是不确定的，可以根据具体需求接受可变数量的参数。这在处理不定数量参数的情况下非常有用，比如<code>printf</code>和<code>scanf</code>等函数。让我为您详细解释一下可变参数函数的原理和实现。</p>
<p><strong>1. 原理与实现：</strong></p>
<ul>
<li><p>可变参数函数的参数列表是从右往左压入堆栈的。假设堆栈中有以下参数：不可变参数1、不可变参数2、…、不可变参数n、可变参数1、可变参数2、…、可变参数n。</p>
</li>
<li><p>为了获取可变参数，我们需要知道每个可变参数的地址。这是通过前一个不可变参数的地址和类型来实现的。</p>
</li>
<li><p>ANSI标准提供了三个宏来实现这个过程：</p>
<ul>
<li><p><code>va_start(va_list arg_ptr, prev_param)</code>: 初始化可变参数列表，将arg_ptr指向第一个可变参数。</p>
</li>
<li><p><code>va_arg(va_list arg_ptr, type)</code>: 获取当前参数的值，类型由前面的不可变参数传递。例如，printf中的格式化字符串或者可变参数列表的参数类型和第几个不可变参数的相同。</p>
</li>
<li><p><code>va_end(va_list arg_ptr)</code>: 释放资源，结束可变参数列表的访问。</p>
</li>
</ul>
</li>
<li><p>这些宏的实现细节由编译器和标准库提供，我们只需调用它们即可。</p>
</li>
</ul>
<p><strong>2. 可变参数函数：</strong></p>
<ul>
<li>可变参数函数允许在函数定义中接受不定数量的参数。</li>
<li>C语言提供了 <code>stdarg.h</code> 头文件来支持可变参数函数的实现。</li>
<li>下面是一个示例代码，展示了如何实现一个可变参数函数 sum，它接受一个整数参数 count，表示接下来的可变参数的数量：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> count, ...)</span> &#123;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num = va_arg(args, <span class="type">int</span>);</span><br><span class="line">        total += num;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> result = sum(<span class="number">4</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum: %d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在这个示例中，我们定义了一个可变参数函数 sum，它计算传入的整数参数的总和。</li>
</ul>
<br>

<p><strong>3. 可变参数宏：</strong></p>
<ul>
<li>可变参数宏允许在宏调用中接受可变数量的参数。</li>
<li>在C语言中，可变参数宏使用 <code>__VA_ARGS__</code> 表示可变参数的部分。</li>
<li>下面是一个示例代码，展示了如何定义一个可变参数宏 <code>PRINT_VALUES</code>，它使用 printf 函数来打印可变数量的值:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_VALUES(...) do &#123; \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;Values: &quot;</span>); \</span></span><br><span class="line"><span class="meta">    printf(__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    PRINT_VALUES(<span class="string">&quot;%d %s %f&quot;</span>, <span class="number">10</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在这个示例中，我们定义了一个可变参数宏 <code>PRINT_VALUES</code>，它使用 <code>printf</code> 函数来打印多个值。</li>
</ul>
<br>

<p><strong>4. 实现自己的 printf 函数：</strong></p>
<ul>
<li><code>printf</code> 函数接受一个格式字符串作为第一个参数，后面是可变数量的参数，用于替换格式字符串中的格式占位符。</li>
<li>以下是一个简化版的示例代码，展示了一个实现类似于 <code>printf</code> 函数的功能的函数：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="keyword">while</span> (*format != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*format == <span class="string">&#x27;%&#x27;</span>) &#123;</span><br><span class="line">            format++; <span class="comment">// 移动到占位符的下一个字符</span></span><br><span class="line">            <span class="keyword">if</span> (*format == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">double</span> value = va_arg(args, <span class="type">double</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span>* value = va_arg(args, <span class="type">char</span>*);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;c&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Unsupported format specifier: %c&quot;</span>, *format);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *format);</span><br><span class="line">        &#125;</span><br><span class="line">        format++; <span class="comment">// 移动到下一个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line">	<span class="type">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line">	<span class="type">char</span> str[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	my_printf(<span class="string">&quot;Integer: %d\n&quot;</span>, num);</span><br><span class="line">	my_printf(<span class="string">&quot;Float: %f\n&quot;</span>, pi);</span><br><span class="line">	my_printf(<span class="string">&quot;Float: %s\n&quot;</span>, str);</span><br><span class="line">	my_printf(<span class="string">&quot;Float: %c\n&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h2><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程</a></p>
<h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>了解寄存器和内存模型以后，就可以来看汇编语言到底是什么了。下面是一个简单的程序example.c。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add_a_and_b</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> add_a_and_b(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gcc 将这个程序转成汇编语言。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ gcc -S example.c</span><br></pre></td></tr></table></figure>
<p>example.s经过简化以后，大概是下面的样子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_add_a_and_b:</span><br><span class="line">   push   %ebx</span><br><span class="line">   mov    %eax, [%esp+8] </span><br><span class="line">   mov    %ebx, [%esp+12]</span><br><span class="line">   add    %eax, %ebx </span><br><span class="line">   pop    %ebx </span><br><span class="line">   ret  </span><br><span class="line"></span><br><span class="line">_main:</span><br><span class="line">   push   3</span><br><span class="line">   push   2</span><br><span class="line">   call   _add_a_and_b </span><br><span class="line">   add    %esp, 8</span><br><span class="line">   ret</span><br></pre></td></tr></table></figure>
<p>可以看到，原程序的两个函数add_a_and_b和main，对应两个标签_add_a_and_b和_main。每个标签里面是该函数所转成的 CPU 运行流程。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux小贴士</title>
    <url>/2024/05/06/Linux%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    <content><![CDATA[<h2 id="tree指令小贴士"><a href="#tree指令小贴士" class="headerlink" title="tree指令小贴士"></a>tree指令小贴士</h2><p><strong>1. 基本用法：</strong><br>显示当前目录下的文件和目录结构。</p>
<pre><code>tree
</code></pre>
<p><strong>2. 限制目录深度：</strong><br>使用 -L 选项后跟数字来限制目录显示的深度。</p>
<pre><code>tree -L 2
</code></pre>
<p>这将显示当前目录及其下最多两级子目录。</p>
<p><strong>3. 显示隐藏文件：</strong><br>默认情况下，隐藏文件（以点 . 开头的文件或目录）不会被显示。要显示这些隐藏文件，可以使用 -a 选项。</p>
<pre><code>tree -a
</code></pre>
<p><strong>4. 递归显示所有文件：</strong><br>使用 -R 选项递归显示所有文件。</p>
<pre><code>tree -R
</code></pre>
<p><strong>5. 指定目录：</strong><br>显示指定目录的树状结构。</p>
<pre><code>tree /path/to/directory
</code></pre>
<p><strong>6. 使用文件系统类型：</strong><br>显示目录结构时，包括文件系统类型。</p>
<pre><code>tree -F
</code></pre>
<p><code>-F</code> 选项会在每个目录名后添加一个斜杠 <code>/</code>。</p>
<p><strong>7. 排序：</strong><br>默认情况下，tree 会按字母顺序排序。使用 -f 选项可以按照文件修改时间排序。</p>
<pre><code>tree -f
</code></pre>
<p><strong>8. 显示文件大小：</strong><br>使用 -h 选项以更易读的格式显示文件大小。</p>
<pre><code>tree -h
</code></pre>
<p><strong>9. 显示目录和文件的权限：</strong><br>使用 <code>-u</code> 选项显示文件所有者，<code>-g</code> 选项显示文件组。</p>
<pre><code>tree -ug
</code></pre>
<p><strong>10. 使用颜色：</strong><br>tree 命令使用颜色来区分不同类型的文件和目录。使用 –no-colour 可以关闭颜色显示。</p>
<pre><code>tree --no-colour
</code></pre>
<p><strong>11. 输出到文件：</strong><br>将树状结构输出到一个文件中。</p>
<pre><code>tree &gt; tree.txt
</code></pre>
<p><strong>12. 执行命令：</strong><br>对每个文件或目录执行命令，例如，获取每个文件的详细信息。</p>
<pre><code>tree -exec ls -l &#123;&#125; \;
</code></pre>
<p><strong>13. 帮助和手册：</strong><br>查看 tree 命令的帮助信息。</p>
<pre><code>tree --help
man tree
</code></pre>
<p><strong>14. 安装 tree 命令（如果尚未安装）通常可以通过你的Linux发行版的包管理器来完成。</strong><br>例如，在Ubuntu上，你可以使用以下命令安装：</p>
<pre><code>sudo apt-get update
sudo apt-get install tree
</code></pre>
<p>使用 tree 可以帮助你更直观地查看目录结构，特别是在处理复杂的文件系统时。</p>
<br>

<h2 id="git小贴士"><a href="#git小贴士" class="headerlink" title="git小贴士"></a>git小贴士</h2><p><img src="/../pictures/git%E6%8C%87%E4%BB%A4.jpg" alt="git指令"></p>
<br>

<p><img src="/../pictures/vim%E6%8C%87%E4%BB%A4.jpg" alt="vim指令"></p>
]]></content>
      <categories>
        <category>小贴士</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake学习笔记</title>
    <url>/2024/05/08/CMake%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="CMake学习教程"><a href="#CMake学习教程" class="headerlink" title="CMake学习教程"></a>CMake学习教程</h2><ul>
<li>[参考资料1] : <a href="https://subingwen.cn/cmake/CMake-primer">https://subingwen.cn/cmake/CMake-primer</a></li>
<li>[参考资料2] : <a href="https://subingwen.cn/cmake/CMake-advanced/">https://subingwen.cn/cmake/CMake-advanced/</a></li>
<li>[参考资料3] : <a href="https://zhuanlan.zhihu.com/p/534439206">https://zhuanlan.zhihu.com/p/534439206</a></li>
</ul>
<br>

<h2 id="编写一个简单的CMakeLists-txt文件"><a href="#编写一个简单的CMakeLists-txt文件" class="headerlink" title="编写一个简单的CMakeLists.txt文件"></a>编写一个简单的CMakeLists.txt文件</h2><h3 id="1-示例文件的目录结构如下："><a href="#1-示例文件的目录结构如下：" class="headerlink" title="1. 示例文件的目录结构如下："></a>1. 示例文件的目录结构如下：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-添加-CMakeLists-txt-文件"><a href="#2-添加-CMakeLists-txt-文件" class="headerlink" title="2. 添加 CMakeLists.txt 文件"></a>2. 添加 CMakeLists.txt 文件</h3><p>在上述源文件所在目录下添加一个新文件 CMakeLists.txt，文件内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.0</span>)</span><br><span class="line">project(CALC)</span><br><span class="line">add_executable(app add.c div.c main.c mult.c sub.c)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>cmake_minimum_required</code>：指定使用的 cmake 的最低版本。</p>
<ul>
<li>可选，非必须，如果不加可能会有警告。</li>
</ul>
</li>
<li><p><code>project</code>：定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可。</p>
</li>
<li><p><code>add_executable</code>：定义工程会生成一个可执行程序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_executable(可执行程序名 源文件名称)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里的可执行程序名和<code>project</code>中的项目名没有任何关系</p>
</li>
<li><p>源文件名可以是一个也可以是多个，如有多个可用空格或<code>;</code>间隔</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># 样式<span class="number">1</span></span><br><span class="line">add_executable(app add.c div.c main.c mult.c sub.c)</span><br><span class="line"># 样式<span class="number">2</span></span><br><span class="line">add_executable(app add.c;div.c;main.c;mult.c;sub.c)</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<h3 id="3-执行CMake命令"><a href="#3-执行CMake命令" class="headerlink" title="3. 执行CMake命令"></a>3. 执行CMake命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmake 命令原型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake CMakeLists.txt 文件所在路径</span></span><br></pre></td></tr></table></figure>
<p>执行示例 (当前<code>CMakeLists.txt</code>路径) ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake .</span></span><br></pre></td></tr></table></figure>
<p>当执行<code>cmake</code>命令之后，<code>CMakeLists.txt</code> 中的命令就会被执行，所以一定要注意给<code>cmake</code>命令指定路径的时候一定不能出错。</p>
<p>执行命令之后，看一下源文件所在目录中是否多了一些文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -L 1</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── CMakeCache.txt         # new add file</span><br><span class="line">├── CMakeFiles             # new add dir</span><br><span class="line">├── cmake_install.cmake    # new add file</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── Makefile               # new add file</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br></pre></td></tr></table></figure>

<p>我们可以看到在对应的目录下生成了一个<code>makefile</code>文件，此时再执行<code>make</code>命令，就可以对项目进行构建得到所需的可执行程序了。</p>
<br>

<h3 id="4-头文件及指定宏"><a href="#4-头文件及指定宏" class="headerlink" title="4. 头文件及指定宏"></a>4. 头文件及指定宏</h3><ul>
<li><code>CMakeLists.txt</code> 示例代码文件：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line">project(CALC)</span><br><span class="line">set(CMAKE_CXX_STANDARD 11)</span><br><span class="line">set(HOME /home/robin/Linux/calc)</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;HOME&#125;/bin/)</span><br><span class="line"><span class="meta prompt_">include_directories($</span><span class="language-bash">&#123;PROJECT_SOURCE_DIR&#125;/include)</span></span><br><span class="line">file(GLOB SRC_LIST $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp)</span><br><span class="line">add_executable(app  $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<h4 id="4-1-通过参数-std-c-11指定出要使用c-11标准编译程序-对应宏DCMAKE-CXX-STANDARD"><a href="#4-1-通过参数-std-c-11指定出要使用c-11标准编译程序-对应宏DCMAKE-CXX-STANDARD" class="headerlink" title="4.1 通过参数-std=c++11指定出要使用c++11标准编译程序,对应宏DCMAKE_CXX_STANDARD:"></a>4.1 通过参数<code>-std=c++11</code>指定出要使用c++11标准编译程序,对应宏<code>DCMAKE_CXX_STANDARD</code>:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 增加-std=c++<span class="number">11</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加-std=c++11</span></span><br><span class="line">cmake (CMakeLists.txt文件路径) -DCMAKE_CXX_STANDARD=11</span><br></pre></td></tr></table></figure>

<br>

<h4 id="4-2-指定输出的路径-EXECUTABLE-OUTPUT-PATH-："><a href="#4-2-指定输出的路径-EXECUTABLE-OUTPUT-PATH-：" class="headerlink" title="4.2 指定输出的路径(EXECUTABLE_OUTPUT_PATH)："></a>4.2 指定输出的路径(EXECUTABLE_OUTPUT_PATH)：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set(HOME /home/robin/Linux/Sort)</span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;HOME&#125;/bin)</span><br></pre></td></tr></table></figure>
<p>如果这个路径中的子目录不存在，会自动生成，无需自己手动创建。</p>
<br>

<h4 id="4-3-头文件的路径-include-directories"><a href="#4-3-头文件的路径-include-directories" class="headerlink" title="4.3 头文件的路径(include_directories)"></a>4.3 头文件的路径(include_directories)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include_directories(headpath)</span><br></pre></td></tr></table></figure>
<p>其中，第六行指定就是头文件的路径，PROJECT_SOURCE_DIR宏对应的值就是我们在使用cmake命令时，后面紧跟的目录，一般是工程的根目录。</p>
<br>

<h4 id="4-4-搜索文件-aux-source-directory"><a href="#4-4-搜索文件-aux-source-directory" class="headerlink" title="4.4 搜索文件(aux_source_directory)"></a>4.4 搜索文件(aux_source_directory)</h4><ul>
<li><p><code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code> 示例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src SRC_LIST)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>file(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</code>示例：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>CMAKE_CURRENT_SOURCE_DIR</code> 宏表示当前访问的 <code>CMakeLists.txt</code> 文件所在的路径</p>
</li>
</ul>
<br>

<h3 id="5-制作动态库或静态库"><a href="#5-制作动态库或静态库" class="headerlink" title="5. 制作动态库或静态库"></a>5. 制作动态库或静态库</h3><p>有些时候我们编写的源代码并不需要将他们编译生成可执行程序，而是生成一些静态库或动态库提供给第三方使用，下面来讲解在cmake中生成这两类库文件的方法。</p>
<h4 id="5-1-静态库："><a href="#5-1-静态库：" class="headerlink" title="5.1 静态库："></a>5.1 静态库：</h4><h5 id="5-1-1-cmake生成规则："><a href="#5-1-1-cmake生成规则：" class="headerlink" title="5.1.1 cmake生成规则："></a>5.1.1 cmake生成规则：</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(库名称 STATIC 源文件<span class="number">1</span> [源文件<span class="number">2</span>] ...) </span><br></pre></td></tr></table></figure>

<ul>
<li>在Linux中，静态库名字分为三部分：<code>lib + 库名字 + .a</code>，示例：<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>
这样最终就会生成对应的静态库文件 <code>libcalc.a</code></li>
</ul>
<br>

<h5 id="5-1-2-gcc生成规则："><a href="#5-1-2-gcc生成规则：" class="headerlink" title="5.1.2 gcc生成规则："></a>5.1.2 gcc生成规则：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -c add.c div.c mult.c sub.c -I ./include/</span><br></pre></td></tr></table></figure>

<ul>
<li>生成 <code>.o</code> 编译文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录中的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── add.o            # 目标文件</span><br><span class="line">├── div.c</span><br><span class="line">├── div.o            # 目标文件</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">├── mult.o           # 目标文件</span><br><span class="line">├── sub.c</span><br><span class="line">└── sub.o            # 目标文件</span><br></pre></td></tr></table></figure>
<ul>
<li>将生成的目标文件通过 ar工具打包生成静态库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将生成的目标文件 .o 打包成静态库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ar rcs libcalc.a add.o div.o mult.o sub.o    <span class="comment">#在同一个目录中可以写成 *.o</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录中的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── add.o</span><br><span class="line">├── div.c</span><br><span class="line">├── div.o</span><br><span class="line">├── include</span><br><span class="line">│   └── `head.h  ===&gt; 和静态库一并发布</span><br><span class="line">├── `libcalc.a   ===&gt; 生成的静态库</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">├── mult.o</span><br><span class="line">├── sub.c</span><br><span class="line">└── sub.o</span><br></pre></td></tr></table></figure>

<ul>
<li>将生成的的静态库 libcalc.a和库对应的头文件head.h一并发布给使用者就可以了。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 发布静态库</span></span><br><span class="line">	1. head.h    =&gt; 函数声明</span><br><span class="line">	2. libcalc.a =&gt; 函数定义(二进制格式)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="5-1-3-gcc静态库的使用"><a href="#5-1-3-gcc静态库的使用" class="headerlink" title="5.1.3 gcc静态库的使用:"></a>5.1.3 gcc静态库的使用:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先拿到了发布的静态库</span></span><br><span class="line">	`head.h` 和 `libcalc.a`</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将静态库, 头文件, 测试程序放到一个目录中准备进行测试</span></span><br><span class="line">.</span><br><span class="line">├── head.h          # 函数声明</span><br><span class="line">├── libcalc.a       # 函数定义（二进制格式）</span><br><span class="line">└── main.c          # 函数测试</span><br></pre></td></tr></table></figure>

<ul>
<li>编译测试程序, 得到可执行文件。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译的时候指定库信息</span></span><br><span class="line"> 	-I: 指定头文件所在的目录(相对或者绝对路径)</span><br><span class="line">	-L: 指定库所在的目录(相对或者绝对路径)</span><br><span class="line">	-l: 指定库的名字, 掐头(lib)去尾(.a) ==&gt; calc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-L -l, 参数和参数值之间可以有空格, 也可以没有  -L./ -lcalc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc main.c -o app -I./ -L./ -lcalc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录信息, 发现可执行程序已经生成了</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── app   		# 生成的可执行程序</span><br><span class="line">├── head.h</span><br><span class="line">├── libcalc.a</span><br><span class="line">└── main.c</span><br></pre></td></tr></table></figure>

<br>

<h4 id="5-2-动态库："><a href="#5-2-动态库：" class="headerlink" title="5.2 动态库："></a>5.2 动态库：</h4><h5 id="5-2-1-cmake生成规则："><a href="#5-2-1-cmake生成规则：" class="headerlink" title="5.2.1 cmake生成规则："></a>5.2.1 cmake生成规则：</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(库名称 SHARED 源文件<span class="number">1</span> [源文件<span class="number">2</span>] ...)</span><br></pre></td></tr></table></figure>

<ul>
<li>在Linux中，动态库名字分为三部分：<code>lib + 库名字 + .so</code> ，示例：<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>
这样最终就会生成对应的动态库文件 <code>libcalc.so</code></li>
</ul>
<br>

<h5 id="5-1-2-gcc生成规则：-1"><a href="#5-1-2-gcc生成规则：-1" class="headerlink" title="5.1.2 gcc生成规则："></a>5.1.2 gcc生成规则：</h5><ul>
<li>生成动态链接库是直接使用<code>gcc</code>命令并且需要添加<code>-fPIC(-fpic)</code> 以及<code>-shared</code> 参数。<ul>
<li><code>-fPIC</code> 或 <code>-fpic</code> 参数的作用是使得 <code>gcc</code> 生成的代码是与位置无关的，也就是使用相对位置。</li>
<li><code>-shared</code>参数的作用是告诉编译器生成一个动态链接库。</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 将.c汇编得到.o, 需要额外的参数 -fpic/-fPIC</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -c -fpic add.c div.c mult.c sub.c -I ./include/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成 <code>.o</code> 编译文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录文件信息, 检查是否生成了目标文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── add.o                # 生成的目标文件</span><br><span class="line">├── div.c</span><br><span class="line">├── div.o                # 生成的目标文件</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">├── mult.o               # 生成的目标文件</span><br><span class="line">├── sub.c</span><br><span class="line">└── sub.o                # 生成的目标文件</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>gcc</code>将得到的目标文件打包生成动态库, 需要使用参数 <code>-shared</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 将得到 .o 打包成动态库, 使用gcc , 参数 -shared</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -shared add.o div.o mult.o sub.o -o libcalc.so</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查目录中是否生成了动态库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── add.o</span><br><span class="line">├── div.c</span><br><span class="line">├── div.o</span><br><span class="line">├── include</span><br><span class="line">│   └── `head.h   ===&gt; 和动态库一起发布</span><br><span class="line">├── `libcalc.so   ===&gt; 生成的动态库</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">├── mult.o</span><br><span class="line">├── sub.c</span><br><span class="line">└── sub.o</span><br></pre></td></tr></table></figure>

<ul>
<li>将生成的的动态库 libcalc.so和库对应的头文件head.h一并发布给使用者就可以了。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布库文件和头文件</span></span><br><span class="line">	1. head.h</span><br><span class="line">	2. libcalc.so</span><br></pre></td></tr></table></figure>

<h5 id="5-1-3-gcc静态库的使用-1"><a href="#5-1-3-gcc静态库的使用-1" class="headerlink" title="5.1.3 gcc静态库的使用:"></a>5.1.3 gcc静态库的使用:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 拿到发布的动态库</span></span><br><span class="line">	`head.h   libcalc.so</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 基于头文件编写测试程序, 测试动态库中提供的接口是否可用</span></span><br><span class="line">	`main.c`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例目录:</span></span><br><span class="line">.</span><br><span class="line">├── head.h          ==&gt; 函数声明</span><br><span class="line">├── libcalc.so      ==&gt; 函数定义</span><br><span class="line">└── main.c          ==&gt; 函数测试</span><br></pre></td></tr></table></figure>

<ul>
<li>编译测试程序, 得到可执行文件。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在编译的时候指定动态库相关的信息: 头文件路径-I 库的路径 -L, 库的名字 -l</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc main.c -o app -I./ -L./ -lcalc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否生成了可执行程序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── app 			# 生成的可执行程序</span><br><span class="line">├── head.h</span><br><span class="line">├── libcalc.so</span><br><span class="line">└── main.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行生成的可执行程序, 错误提示 ==&gt; 可执行程序执行的时候找不到动态库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./app</span> </span><br><span class="line">./app: error while loading shared libraries: libcalc.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p><strong>修改解决动态库链接编译问题</strong></p>
<p>方案 1: 将库路径添加到环境变量<code>LD_LIBRARY_PATH</code>中</p>
<ol>
<li>找到相关的配置文件</li>
</ol>
<ul>
<li>用户级别: ~&#x2F;.bashrc —&gt; 设置对当前用户有效</li>
<li>系统级别: &#x2F;etc&#x2F;profile —&gt; 设置对所有用户有效</li>
</ul>
<ol start="2">
<li>使用 vim 打开配置文件, 在文件最后添加这样一句话</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自己把路径写进去就行了</span></span><br><span class="line">export LD_LIBRARY_PATH =$LD_LIBRARY_PATH :动态库的绝对路径</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>让修改的配置文件生效</li>
</ol>
<ul>
<li>修改了用户级别的配置文件, 关闭当前终端, 打开一个新的终端配置就生效了</li>
<li>修改了系统级别的配置文件, 注销或关闭系统, 再开机配置就生效了</li>
<li>不想执行上边的操作, 可以执行一个命令让配置重新被加载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改的是哪一个就执行对应的那个命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span> 可以简写为一个 . , 作用是让文件内容被重新加载</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> ~/.bashrc          (. ~/.bashrc)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> /etc/profile       (. /etc/profile)</span></span><br></pre></td></tr></table></figure>

<p>方案 2: 更新 &#x2F;etc&#x2F;ld.so.cache 文件</p>
<ol>
<li><p>找到动态库所在的绝对路径（不包括库的名字）比如：&#x2F;home&#x2F;robin&#x2F;Library&#x2F;</p>
</li>
<li><p>使用vim 修改 &#x2F;etc&#x2F;ld.so.conf 这个文件, 将上边的路径添加到文件中(独自占一行)</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 打开文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /etc/ld.so.conf</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 添加动态库路径, 并保存退出</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更新 &#x2F;etc&#x2F;ld.so.conf中的数据到 &#x2F;etc&#x2F;ld.so.cache 中</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须使用管理员权限执行这个命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ldconfig</span>   </span><br></pre></td></tr></table></figure>

<p>方案 3: 拷贝动态库文件到系统库目录 &#x2F;lib&#x2F; 或者 &#x2F;usr&#x2F;lib 中 (或者将库的软链接文件放进去)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">库拷贝</span></span><br><span class="line">sudo cp /xxx/xxx/libxxx.so /usr/lib</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">sudo ln -s /xxx/xxx/libxxx.so /usr/lib/libxxx.so</span><br></pre></td></tr></table></figure>

<p>验证执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd 可执行程序名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">举例:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd app</span></span><br><span class="line">	linux-vdso.so.1 =&gt;  (0x00007ffe8fbd6000)</span><br><span class="line">    libcalc.so =&gt; /home/robin/Linux/3Day/calc/test/libcalc.so (0x00007f5d85dd4000)</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5d85a0a000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007f5d85fd6000)  ==&gt; 动态链接器, 操作系统提供</span><br></pre></td></tr></table></figure>

<br>

<h4 id="5-3-指定输出的路径："><a href="#5-3-指定输出的路径：" class="headerlink" title="5.3 指定输出的路径："></a>5.3 指定输出的路径：</h4><ul>
<li><p>方式1 - 适用于动态库</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2 - 都适用</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置动态库/静态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<h4 id="5-4-包含库文件："><a href="#5-4-包含库文件：" class="headerlink" title="5.4 包含库文件："></a>5.4 包含库文件：</h4><h5 id="5-4-1-链接静态库："><a href="#5-4-1-链接静态库：" class="headerlink" title="5.4.1 链接静态库："></a>5.4.1 链接静态库：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── add.cpp</span><br><span class="line">├── div.cpp</span><br><span class="line">├── main.cpp</span><br><span class="line">├── mult.cpp</span><br><span class="line">└── sub.cpp</span><br></pre></td></tr></table></figure>
<p>现在我们把上面<code>src</code>目录中的<code>add.cpp</code>、<code>div.cpp</code>、<code>mult.cpp</code>、<code>sub.cpp</code>编译成一个静态库文件<code>libcalc.a</code>。通过命令制作并使用静态链接库。</p>
<p>测试目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span> </span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcalc.a     # 制作出的静态库的名字</span><br><span class="line">└── src</span><br><span class="line">    └── main.cpp</span><br><span class="line"></span><br><span class="line">4 directories, 4 files</span><br></pre></td></tr></table></figure>

<p>在cmake中，链接静态库的命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">link_libraries</span>(&lt;static lib&gt; [&lt;static lib&gt;...])</span><br></pre></td></tr></table></figure>

<ul>
<li>参数1：指定出要链接的静态库的名字<ul>
<li>可以是全名 libxxx.a</li>
<li>也可以是掐头（lib）去尾（.a）之后的名字 xxx</li>
</ul>
</li>
<li>参数2-N：要链接的其它静态库的名字</li>
</ul>
<p>如果该静态库不是系统提供的（自己制作或者使用第三方提供的静态库）可能出现静态库找不到的情况，此时可以将静态库的路径也指定出来：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">link_directories</span>(&lt;lib path&gt;)</span><br></pre></td></tr></table></figure>

<p>这样，修改之后的CMakeLists.txt文件内容如下:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="comment"># 搜索指定目录下源文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="comment"># 包含头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 包含静态库路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line"><span class="keyword">link_libraries</span>(calc)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="5-4-2-链接动态库："><a href="#5-4-2-链接动态库：" class="headerlink" title="5.4.2 链接动态库："></a>5.4.2 链接动态库：</h5><p>动态库的链接和静态库是完全不同的：</p>
<ul>
<li>静态库会在生成可执行程序的链接阶段被打包到可执行程序中，所以可执行程序启动，静态库就被加载到内存中了。</li>
<li>动态库在生成可执行程序的链接阶段不会被打包到可执行程序中，当可执行程序被启动并且调用了动态库中的函数的时候，动态库才会被加载到内存</li>
</ul>
<p>因此，在<code>cmake</code>中指定要链接的动态库的时候，<code>应该将命令写到生成了可执行文件之后</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 添加并指定最终生成的可执行程序名</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定可执行程序要链接的动态库名字</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread)</span><br></pre></td></tr></table></figure>

<p>在<code>target_link_libraries(app pthread)</code>中：</p>
<ul>
<li><code>app</code>: 对应的是最终生成的可执行程序的名字</li>
<li><code>pthread</code>：这是可执行程序要加载的动态库，这个库是系统提供的线程库，全名为<code>libpthread.so</code>，在指定的时候一般会掐头<code>（lib）</code>去尾<code>（.so）</code>。</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread calc)</span><br></pre></td></tr></table></figure>

<p>在第六行中，pthread、calc都是可执行程序app要链接的动态库的名字。当可执行程序app生成之后并执行该文件，会提示有如下错误信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./app</span> </span><br><span class="line">./app: error while loading shared libraries: libcalc.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>在 <code>CMake</code> 中可以在生成可执行程序之前，通过命令指定出要链接的动态库的位置，指定静态库位置使用的也是这个命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">link_directories</span>(path)</span><br></pre></td></tr></table></figure>

<p>所以修改之后的CMakeLists.txt文件应该是这样的：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 指定源文件或者动态库对应的头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库的路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 添加并生成一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread calc)</span><br></pre></td></tr></table></figure>

<p>通过link_directories指定了动态库的路径之后，在执行生成的可执行程序的时候，就不会出现找不到动态库的问题了。</p>
<p><strong>温馨提示：使用 target_link_libraries 命令就可以链接动态库，也可以链接静态库文件。</strong></p>
<br>

<h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6. 日志"></a>6. 日志</h3><p>在<code>CMake</code>中可以用用户显示一条消息，该命令的名字为<code>message</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] <span class="string">&quot;message to display&quot;</span> ...)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>(无)</code> ：重要消息</li>
<li><code>STATUS</code> ：非重要消息</li>
<li><code>WARNING</code>：CMake 警告, 会继续执行</li>
<li><code>AUTHOR_WARNING</code>：CMake 警告 (dev), 会继续执行</li>
<li><code>SEND_ERROR</code>：CMake 错误, 继续执行，但是会跳过生成的步骤</li>
<li><code>FATAL_ERROR</code>：CMake 错误, 终止所有处理过程</li>
</ul>
<p><code>CMake</code>的命令行工具会在<code>stdout</code>上显示S<code>TATUS</code>消息，在<code>stderr</code>上显示其他所有消息。<code>CMake</code>的<code>GUI</code>会在它的<code>log</code>区域显示所有消息。</p>
<p><code>CMake</code>警告和错误消息的文本显示使用的是一种简单的标记语言。文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出一般日志信息</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出警告信息</span></span><br><span class="line"><span class="keyword">message</span>(WARNING <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出错误信息</span></span><br><span class="line"><span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="7-变量操作"><a href="#7-变量操作" class="headerlink" title="7. 变量操作"></a>7. 变量操作</h3><h4 id="7-1-追加"><a href="#7-1-追加" class="headerlink" title="7.1 追加"></a>7.1 追加</h4><p>有时候项目中的源文件并不一定都在同一个目录中，但是这些源文件最终却需要一起进行编译来生成最终的可执行文件或者库文件。如果我们通过<code>file</code>命令对各个目录下的源文件进行搜索，最后还需要做一个字符串拼接的操作，关于字符串拼接可以使用<code>set</code>命令也可以使用<code>list</code>命令。</p>
<br>

<h5 id="7-1-1-使用set拼接"><a href="#7-1-1-使用set拼接" class="headerlink" title="7.1.1 使用set拼接"></a>7.1.1 使用set拼接</h5><p>如果使用<code>set</code>进行字符串拼接，对应的命令格式如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(变量名<span class="number">1</span> <span class="variable">$&#123;变量名1&#125;</span> <span class="variable">$&#123;变量名2&#125;</span> ...)</span><br></pre></td></tr></table></figure>

<p>关于上面的命令其实就是将从第二个参数开始往后所有的字符串进行拼接，最后将结果存储到第一个参数中，如果第一个参数中原来有数据会对原数据就行覆盖。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">set</span>(TEMP <span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src1/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_2 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src2/*.cpp)</span><br><span class="line"><span class="comment"># 追加(拼接)</span></span><br><span class="line"><span class="keyword">set</span>(SRC_1 <span class="variable">$&#123;SRC_1&#125;</span> <span class="variable">$&#123;SRC_2&#125;</span> <span class="variable">$&#123;TEMP&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<br>

<h5 id="7-1-2-使用list拼接"><a href="#7-1-2-使用list拼接" class="headerlink" title="7.1.2 使用list拼接"></a>7.1.2 使用list拼接</h5><p><code>list</code>命令的功能比<code>set</code>要强大，字符串拼接只是它的其中一个功能，所以需要在它第一个参数的位置指定出我们要做的操作，<code>APPEND</code>表示进行数据追加，后边的参数和<code>set</code>就一样了。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>(APPEND &lt;<span class="keyword">list</span>&gt; [&lt;element&gt; ...])</span><br></pre></td></tr></table></figure>

<br>

<h4 id="7-2-字符串移除"><a href="#7-2-字符串移除" class="headerlink" title="7.2 字符串移除"></a>7.2 字符串移除</h4><p>使用<code>list</code>命令，<code>REMOVE_ITEM</code>表示对数据进行移除</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>(REMOVE_ITEM &lt;<span class="keyword">list</span>&gt; &lt;value&gt; [&lt;value&gt; ...])</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">set</span>(TEMP <span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 移除前日志</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 移除 main.cpp</span></span><br><span class="line"><span class="keyword">list</span>(REMOVE_ITEM SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/main.cpp)</span><br><span class="line"><span class="comment"># 移除后日志</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="8-宏定义"><a href="#8-宏定义" class="headerlink" title="8. 宏定义"></a>8. 宏定义</h3><p>在<code>CMake</code>中，对应的命令叫做<code>add_definitions</code>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_definitions</span>(-D宏名称)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="comment"># 自定义 DEBUG 宏</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-DDEBUG)</span><br><span class="line"><span class="keyword">add_executable</span>(app ./<span class="keyword">test</span>.c)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="9-预定义宏"><a href="#9-预定义宏" class="headerlink" title="9. 预定义宏"></a>9. 预定义宏</h3><p>下面的列表中为大家整理了一些<code>CMake</code>中常用的宏：</p>
<table>
<thead>
<tr>
<th>宏</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>PROJECT_SOURCE_DIR</td>
<td>使用<code>cmake</code>命令后紧跟的目录，一般是工程的根目录</td>
</tr>
<tr>
<td>PROJECT_BINARY_DIR</td>
<td>执行<code>cmake</code>命令的目录</td>
</tr>
<tr>
<td>CMAKE_CURRENT_SOURCE_DIR</td>
<td>当前处理的<code>CMakeLists.txt</code>所在的路径</td>
</tr>
<tr>
<td>CMAKE_CURRENT_BINARY_DIR</td>
<td><code>target</code> 编译目录</td>
</tr>
<tr>
<td>EXECUTABLE_OUTPUT_PATH</td>
<td>重新定义目标二进制可执行文件的存放位置</td>
</tr>
<tr>
<td>LIBRARY_OUTPUT_PATH</td>
<td>重新定义目标链接库文件的存放位置</td>
</tr>
<tr>
<td>PROJECT_NAME</td>
<td>返回通过<code>PROJECT</code>指令定义的项目名称</td>
</tr>
<tr>
<td>CMAKE_BINARY_DIR</td>
<td>项目实际构建路径，假设在<code>build</code>目录进行的构建，那么得到的就是这个目录的路径</td>
</tr>
</tbody></table>
<br>

<h3 id="10-嵌套的CMake"><a href="#10-嵌套的CMake" class="headerlink" title="10. 嵌套的CMake"></a>10. 嵌套的CMake</h3><p>如果项目很大，或者项目中有很多的源码目录，在通过CMake管理项目的时候如果只使用一个CMakeLists.txt，那么这个文件相对会比较复杂，有一种化繁为简的方式就是给每个源码目录都添加一个CMakeLists.txt文件（头文件目录不需要），这样每个文件都不会太复杂，而且更灵活，更容易维护。</p>
<p>先来看一下下面的这个的目录结构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── calc</span><br><span class="line">│   ├── add.c</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── div.c</span><br><span class="line">│   ├── mult.c</span><br><span class="line">│   └── sub.c</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   ├── calc.h</span><br><span class="line">│   └── sort.h</span><br><span class="line">├── sort</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── insert.c</span><br><span class="line">│   └── select.c</span><br><span class="line">├── test1</span><br><span class="line">│   ├── calc.cpp</span><br><span class="line">│   └── CMakeLists.txt</span><br><span class="line">└── test2</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── sort.c</span><br><span class="line"></span><br><span class="line">6 directories, 15 files</span><br></pre></td></tr></table></figure>

<ul>
<li><code>include 目录</code>：头文件目录</li>
<li><code>calc 目录</code>：目录中的四个源文件对应的加、减、乘、除算法<ul>
<li>对应的头文件是<code>include</code>中的<code>calc.h</code></li>
</ul>
</li>
<li><code>sort 目录</code> ：目录中的两个源文件对应的是插入排序和选择排序算法<ul>
<li>对应的头文件是i<code>nclude</code>中的<code>sort.h</code></li>
</ul>
</li>
<li><code>test1 目录</code>：测试目录，对加、减、乘、除算法进行测试</li>
<li><code>test2 目录</code>：测试目录，对排序算法进行测试</li>
</ul>
<p>可以看到各个源文件目录所需要的<code>CMakeLists.txt</code>文件现在已经添加完毕了。接下来庖丁解牛，我们依次分析一下各个文件中需要添加的内容。</p>
<br>

<h3 id="10-1-节点关系"><a href="#10-1-节点关系" class="headerlink" title="10.1 节点关系"></a>10.1 节点关系</h3><p>众所周知，<code>Linux</code>的目录是树状结构，所以<code>嵌套的 CMake 也是一个树状结构，最顶层的 CMakeLists.txt 是根节点，其次都是子节点。</code>因此，我们需要了解一些关于 <code>CMakeLists.txt</code> 文件变量作用域的一些信息：</p>
<ul>
<li>根节点<code>CMakeLists.txt</code>中的变量全局有效</li>
<li>父节点<code>CMakeLists.txt</code>中的变量可以在子节点中使用</li>
<li>子节点<code>CMakeLists.txt</code>中的变量只能在当前节点中使用</li>
</ul>
<br>

<h3 id="10-2-添加子目录"><a href="#10-2-添加子目录" class="headerlink" title="10.2 添加子目录"></a>10.2 添加子目录</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>

<ul>
<li><code>source_dir</code>：指定了<code>CMakeLists.txt</code>源文件和代码文件的位置，其实就是指定子目录</li>
<li><code>binary_dir</code>：指定了输出文件的路径，一般不需要指定，忽略即可。</li>
<li><code>EXCLUDE_FROM_ALL</code>：在子路径下的目标默认不会被包含到父路径的<code>ALL</code>目标里，并且也会被排除在IDE工程文件之外。用户必须显式构建在子路径下的目标。</li>
</ul>
<p>通过这种方式<code>CMakeLists.txt</code>文件之间的父子关系就被构建出来了。</p>
<h3 id="10-3-编写CMakeLists-txt文件"><a href="#10-3-编写CMakeLists-txt文件" class="headerlink" title="10.3 编写CMakeLists.txt文件"></a>10.3 编写CMakeLists.txt文件</h3><h4 id="10-3-1-根目录"><a href="#10-3-1-根目录" class="headerlink" title="10.3.1 根目录"></a>10.3.1 根目录</h4><p>根目录中的 <code>CMakeLists.txt</code>文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line">project(test)</span><br><span class="line"># 定义变量</span><br><span class="line"># 静态库生成的路径</span><br><span class="line">set(LIB_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/lib)</span><br><span class="line"># 测试程序生成的路径</span><br><span class="line">set(EXEC_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/bin)</span><br><span class="line"># 头文件目录</span><br><span class="line">set(HEAD_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include)</span><br><span class="line"># 静态库的名字</span><br><span class="line">set(CALC_LIB calc)</span><br><span class="line">set(SORT_LIB sort)</span><br><span class="line"># 可执行程序的名字</span><br><span class="line">set(APP_NAME_1 test1)</span><br><span class="line">set(APP_NAME_2 test2)</span><br><span class="line"># 添加子目录</span><br><span class="line">add_subdirectory(calc)</span><br><span class="line">add_subdirectory(sort)</span><br><span class="line">add_subdirectory(test1)</span><br><span class="line">add_subdirectory(test2)</span><br></pre></td></tr></table></figure>

<p>在根节点对应的文件中主要做了两件事情：定义全局变量和添加子目录。</p>
<ul>
<li>定义的全局变量主要是给子节点使用，目的是为了提高子节点中的<code>CMakeLists.txt</code>文件的可读性和可维护性，避免冗余并降低出差的概率。</li>
<li>一共添加了四个子目录，每个子目录中都有一个<code>CMakeLists.txt</code>文件，这样它们的父子关系就被确定下来了。</li>
</ul>
<h4 id="10-3-2-calc-目录"><a href="#10-3-2-calc-目录" class="headerlink" title="10.3.2 calc 目录"></a>10.3.2 calc 目录</h4><p><code>calc</code> 目录中的 <code>CMakeLists.txt</code>文件内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALCLIB)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;CALC_LIB&#125;</span> STATIC <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>第3行<code>aux_source_directory</code>：搜索当前目录（calc目录）下的所有源文件</li>
<li>第4行<code>include_directories</code>：包含头文件路径，HEAD_PATH是在根节点文件中定义的</li>
<li>第5行<code>set</code>：设置库的生成的路径，LIB_PATH是在根节点文件中定义的</li>
<li>第6行<code>add_library</code>：生成静态库，静态库名字CALC_LIB是在根节点文件中定义的</li>
</ul>
<h4 id="10-3-2-sort-目录"><a href="#10-3-2-sort-目录" class="headerlink" title="10.3.2 sort 目录"></a>10.3.2 sort 目录</h4><p>sort 目录中的 CMakeLists.txt文件内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALCLIB)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;CALC_LIB&#125;</span> SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>第6行<code>add_library</code>：生成动态库，动态库名字SORT_LIB是在根节点文件中定义的</li>
</ul>
<p>这个文件中的内容和<code>calc</code>节点文件中的内容类似，只不过这次生成的是动态库。</p>
<h4 id="10-3-3-test1-目录"><a href="#10-3-3-test1-目录" class="headerlink" title="10.3.3 test1 目录"></a>10.3.3 test1 目录</h4><p>test1 目录中的 CMakeLists.txt文件内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALCTEST)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_libraries</span>(<span class="variable">$&#123;CALC_LIB&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;EXEC_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;APP_NAME_1&#125;</span> <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>第4行include_directories：指定头文件路径，HEAD_PATH变量是在根节点文件中定义的</li>
<li>第6行link_libraries：指定可执行程序要链接的静态库，CALC_LIB变量是在根节点文件中定义的</li>
<li>第7行set：指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的</li>
<li>第8行add_executable：生成可执行程序，APP_NAME_1变量是在根节点文件中定义的</li>
</ul>
<p>此处的可执行程序链接的是静态库，最终静态库会被打包到可执行程序中，可执行程序启动之后，静态库也就随之被加载到内存中了。</p>
<h4 id="10-3-4-test2-目录"><a href="#10-3-4-test2-目录" class="headerlink" title="10.3.4 test2 目录"></a>10.3.4 test2 目录</h4><p>test2 目录中的 CMakeLists.txt文件内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(SORTTEST)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;EXEC_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;APP_NAME_2&#125;</span> <span class="variable">$&#123;SRC&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;APP_NAME_2&#125;</span> <span class="variable">$&#123;SORT_LIB&#125;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>第四行<code>include_directories</code>：包含头文件路径，HEAD_PATH变量是在根节点文件中定义的</li>
<li>第五行<code>set</code>：指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的</li>
<li>第六行<code>link_directories</code>：指定可执行程序要链接的动态库的路径，LIB_PATH变量是在根节点文件中定义的</li>
<li>第七行<code>add_executable</code>：生成可执行程序，APP_NAME_2变量是在根节点文件中定义的</li>
<li>第八行<code>target_link_libraries</code>：指定可执行程序要链接的动态库的名字</li>
</ul>
<p>在生成可执行程序的时候，动态库不会被打包到可执行程序内部。当可执行程序启动之后动态库也不会被加载到内存，只有可执行程序调用了动态库中的函数的时候，动态库才会被加载到内存中，且多个进程可以共用内存中的同一个动态库，所以动态库又叫共享库。</p>
<p><strong>注意：引用变量要使用{},不要用成()</strong></p>
<ul>
<li>set(EXECUTABLE_OUTPUT_PATH <code>$&#123;EXEC_PATH&#125;</code>) 写成如下就会出错：</li>
<li>set(EXECUTABLE_OUTPUT_PATH <code>$(EXEC_PATH)</code>) 就会出错</li>
</ul>
<br>

<h4 id="10-3-4-构建项目"><a href="#10-3-4-构建项目" class="headerlink" title="10.3.4 构建项目"></a>10.3.4 构建项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xuan@DESKTOP-A52B6V9:~/linux/demos/cpro$ cd build/</span><br><span class="line">xuan@DESKTOP-A52B6V9:~/linux/demos/cpro/build$ cmake ..</span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/xuan/linux/demos/cpro/build</span><br><span class="line"></span><br><span class="line">xuan@DESKTOP-A52B6V9:~/linux/demos/cpro/build$ make</span><br><span class="line">[  8%] Building C object calc/CMakeFiles/calc.dir/add.c.o</span><br><span class="line">[ 16%] Building C object calc/CMakeFiles/calc.dir/div.c.o</span><br><span class="line">[ 25%] Building C object calc/CMakeFiles/calc.dir/mult.c.o</span><br><span class="line">[ 33%] Building C object calc/CMakeFiles/calc.dir/sub.c.o</span><br><span class="line">[ 41%] Linking C static library ../../lib/libcalc.a</span><br><span class="line">[ 41%] Built target calc</span><br><span class="line">[ 50%] Building C object sort/CMakeFiles/sort.dir/insert.c.o</span><br><span class="line">[ 58%] Building C object sort/CMakeFiles/sort.dir/select.c.o</span><br><span class="line">[ 66%] Linking C shared library ../../lib/libsort.so</span><br><span class="line">[ 66%] Built target sort</span><br><span class="line">[ 75%] Building C object test2/CMakeFiles/test2.dir/sort.c.o</span><br><span class="line">[ 83%] Linking C executable ../../bin/test2</span><br><span class="line">[ 83%] Built target test2</span><br><span class="line">[ 91%] Building C object test1/CMakeFiles/test1.dir/calc.c.o</span><br><span class="line"><span class="meta prompt_">[100%</span><span class="language-bash">] Linking C executable ../../bin/test1</span></span><br><span class="line"><span class="meta prompt_">[100%</span><span class="language-bash">] Built target test1</span></span><br></pre></td></tr></table></figure>

<p>通过上述<code>log</code>可以得到如下信息：</p>
<ul>
<li>在项目根目录的<code>lib目录</code>中生成了静态库<code>libcalc.a</code></li>
<li>在项目根目录的<code>lib目录</code>中生成了动态库<code>libsort.so</code></li>
<li>在项目根目录的<code>bin目录</code>中生成了可执行程序<code>test1</code></li>
<li>在项目根目录的<code>bin目录</code>中生成了可执行程序<code>test2</code></li>
</ul>
<p>以下是生成的树状图：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree bin/ lib/</span></span><br><span class="line">bin/</span><br><span class="line">├── test1</span><br><span class="line">└── test2</span><br><span class="line">lib/</span><br><span class="line">├── libcalc.a</span><br><span class="line">└── libsort.so</span><br></pre></td></tr></table></figure>

<ul>
<li>在项目中，如果将程序中的某个模块制作成了动态库或者静态库并且在<code>CMakeLists.txt</code> 中指定了库的输出目录，而后其它模块又需要加载这个生成的库文件，此时直接使用就可以了。</li>
<li>如果没有指定库的输出路径或者需要直接加载外部提供的库文件，此时就需要使用<code>link_directories($&#123;LIB_PATH&#125;)</code>将库文件路径指定出来,然后链接库的名字<code>link_libraries($&#123;CALC_LIB&#125;)</code>。</li>
</ul>
<br>

<h3 id="11-流程控制"><a href="#11-流程控制" class="headerlink" title="11. 流程控制"></a>11. 流程控制</h3><h4 id="11-1-条件判断"><a href="#11-1-条件判断" class="headerlink" title="11.1 条件判断"></a>11.1 条件判断</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;condition&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">elseif</span>(&lt;condition&gt;) <span class="comment"># 可选快, 可以重复</span></span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">else</span>()              <span class="comment"># 可选快</span></span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

<h5 id="11-1-1-基本表达式"><a href="#11-1-1-基本表达式" class="headerlink" title="11.1.1 基本表达式"></a>11.1.1 基本表达式</h5><ul>
<li><p><code>if(&lt;expression&gt;)</code>: <code>expression</code> 有以下三种情况：常量、变量、字符串。</p>
<ul>
<li>如果是<code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y</code>, <code>非零值</code>，<code>非空字符串</code>时，条件判断返回<code>True</code></li>
<li>如果是 <code>0</code>, <code>OFF</code>, <code>NO</code>, <code>FALSE</code>, <code>N</code>, <code>IGNORE</code>, <code>NOTFOUND</code>，<code>空字符串</code>时，条件判断返回<code>False</code></li>
</ul>
</li>
</ul>
<br>

<h5 id="11-1-2-逻辑判断"><a href="#11-1-2-逻辑判断" class="headerlink" title="11.1.2 逻辑判断"></a>11.1.2 逻辑判断</h5><ul>
<li>if(NOT <condition>)</li>
<li>if(<cond1> AND <cond2>)</li>
<li>if(<cond1> OR <cond2>)</li>
</ul>
<br>

<h5 id="11-1-3-比较"><a href="#11-1-3-比较" class="headerlink" title="11.1.3 比较"></a>11.1.3 比较</h5><ul>
<li><code>if(&lt;variable|string&gt; &lt;COMMAND&gt; &lt;variable|string&gt;)</code></li>
<li>&lt;<code>COMMAND</code>&gt;为如下值的解释：<ul>
<li><code>LESS</code>：如果左侧数值&#x2F;字符串<code>小于</code>右侧，返回<code>True</code></li>
<li><code>GREATER</code>：如果左侧数值&#x2F;字符串<code>大于</code>右侧，返回<code>True</code></li>
<li><code>EQUAL</code>：如果左侧数值&#x2F;字符串<code>等于</code>右侧，返回<code>True</code></li>
<li><code>LESS_EQUAL</code>：如果左侧数值&#x2F;字符串<code>小于等于</code>右侧，返回<code>True</code></li>
<li><code>GREATER_EQUAL</code>：如果左侧数值&#x2F;字符串<code>大于等于</code>右侧，返回<code>True</code></li>
</ul>
</li>
</ul>
<br>

<h5 id="11-1-4-文件操作"><a href="#11-1-4-文件操作" class="headerlink" title="11.1.4 文件操作"></a>11.1.4 文件操作</h5><p><strong>存在&#x2F;是</strong>返回<code>True</code>，<strong>不存在&#x2F;否</strong>返回<code>False</code></p>
<ul>
<li>判断文件或者目录是否存在：<code>if(EXISTS path-to-file-or-directory)</code></li>
<li>判断是不是目录：<code>if(IS_DIRECTORY path)</code><ul>
<li>此处目录的 <code>path</code> 必须是绝对路径</li>
</ul>
</li>
<li>判断是不是软连接：<code>if(IS_SYMLINK file-name)</code><ul>
<li>此处的 <code>file-name</code> 对应的路径必须是绝对路径</li>
<li>软链接相当于 <code>Windows</code> 里的快捷方式</li>
</ul>
</li>
<li>判断是不是绝对路径：<code>if(IS_ABSOLUTE path)</code><ul>
<li>如果绝对路径是Linux，该路径需要从根目录开始描述</li>
<li>如果绝对路径是Windows，该路径需要从盘符开始描述</li>
</ul>
</li>
</ul>
<br>

<h5 id="11-1-5-其他"><a href="#11-1-5-其他" class="headerlink" title="11.1.5 其他"></a>11.1.5 其他</h5><ul>
<li>判断某个元素是否在列表中：<code>if(&lt;variable|string&gt; IN_LIST &lt;variable&gt;)</code></li>
<li>比较两个路径是否相等：<code>if(&lt;variable|string&gt; PATH_EQUAL &lt;variable|string&gt;)</code></li>
</ul>
<br>

<h4 id="11-2-循环"><a href="#11-2-循环" class="headerlink" title="11.2 循环"></a>11.2 循环</h4><p>在 <code>CMake</code> 中循环有两种方式，分别是：<code>foreach</code>和<code>while</code>。</p>
<h5 id="11-2-1-foreach"><a href="#11-2-1-foreach" class="headerlink" title="11.2.1 foreach"></a>11.2.1 foreach</h5><p>使用 foreach 进行循环，语法格式如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; &lt;items&gt;)</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>foreach(&lt;loop_var&gt; RANGE &lt;stop&gt;)</code><ul>
<li><code>RANGE</code>：关键字，表示要遍历范围</li>
<li><code>stop</code>：这是一个正整数，表示范围的结束值，在遍历的时候从 0 开始，最大值为 <code>stop</code>。</li>
<li><code>loop_var</code>：存储每次循环取出的值</li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">foreach</span>(item RANGE <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>上面例子输出<code>0~10</code></p>
<br>

<ul>
<li><code>foreach(&lt;loop_var&gt; RANGE &lt;start&gt; &lt;stop&gt; [&lt;step&gt;])</code><ul>
<li><code>RANGE</code>：关键字，表示要遍历范围</li>
<li><code>start</code>：这是一个正整数，表示范围的起始值，也就是说最小值为 <code>start</code></li>
<li><code>stop</code>：这是一个正整数，表示范围的结束值，也就是说最大值为 <code>stop</code></li>
<li><code>step</code>：控制每次遍历的时候以怎样的步长增长，默认为<code>1</code>，可以不设置<br>  -<code>loop_var</code>：存储每次循环取出的值</li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(item RANGE <span class="number">10</span> <span class="number">30</span> <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>上面例子输出<code>10~30</code>,从<code>10</code>开始,每次增长<code>2</code>。</p>
<br>

<ul>
<li><code>foreach(&lt;loop_var&gt; IN [LISTS [&lt;lists&gt;]] [ITEMS [&lt;items&gt;]])</code><ul>
<li><code>IN</code>：关键字，表示在 <code>xxx</code> 里边</li>
<li><code>LISTS</code>：关键字，对应的是列表<code>list</code>，通过<code>set</code>、<code>list</code>可以获得</li>
<li><code>ITEMS</code>：关键字，对应的也是列表</li>
<li><code>loop_var</code>：存储每次循环取出的值</li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 创建 list</span></span><br><span class="line"><span class="keyword">set</span>(WORD a b c d)</span><br><span class="line"><span class="keyword">set</span>(NAME ace sabo luffy)</span><br><span class="line"><span class="comment"># 遍历 list</span></span><br><span class="line"><span class="keyword">foreach</span>(item IN LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，创建了两个 <code>list</code> 列表，在遍历的时候对它们两个都进行了遍历（可以根据实际需求选择同时遍历多个或者只遍历一个）</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(WORD a b c <span class="string">&quot;d e f&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(NAME ace sabo luffy)</span><br><span class="line"><span class="keyword">foreach</span>(item IN ITEMS <span class="variable">$&#123;WORD&#125;</span> <span class="variable">$&#123;NAME&#125;</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，遍历过程中将关键字<code>LISTS</code>改成了<code>ITEMS</code>，后边跟的还是一个或者多个列表，只不过此时需要通过<code>$&#123;&#125;</code>将列表中的值取出。其输出的信息和上一个例子是一样的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: a</span><br><span class="line">-- 当前遍历的值为: b</span><br><span class="line">-- 当前遍历的值为: c</span><br><span class="line">-- 当前遍历的值为: d e f</span><br><span class="line">-- 当前遍历的值为: ace</span><br><span class="line">-- 当前遍历的值为: sabo</span><br><span class="line">-- 当前遍历的值为: luffy</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure>

<p>小细节：在通过 set 组织列表的时候，如果某个字符串中有空格，可以通过双引号将其包裹起来，具体的操作方法可以参考上面的例子。</p>
<br>

<ul>
<li><code>foreach(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</code><ul>
<li><code>loop_var</code>：存储每次循环取出的值，可以根据要遍历的列表的数量指定多个变量，用于存储对应的列表当前取出的那个值。<ul>
<li>如果指定了多个变量名，它们的数量应该和列表的数量相等</li>
<li>如果只给出了一个 <code>loop_var</code>，那么它将一系列的 <code>loop_var_N</code> 变量来存储对应列表中的当前项，也就是说 <code>loop_var_0</code> 对应第一个列表，<code>loop_var_1</code> 对应第二个列表，以此类推……</li>
<li>如果遍历的多个列表中一个列表较短，当它遍历完成之后将不会再参与后续的遍历（因为其它列表还没有遍历完）。</li>
</ul>
</li>
<li><code>IN</code>：关键字，表示在 <code>xxx</code> 里边</li>
<li><code>ZIP_LISTS</code>：关键字，对应的是列表<code>list</code>，通过<code>set</code> 、<code>list</code>可以获得</li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 通过list给列表添加数据</span></span><br><span class="line"><span class="keyword">list</span>(APPEND WORD hello world <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="keyword">list</span>(APPEND NAME ace sabo luffy zoro sanji)</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">foreach</span>(item1 item2 IN ZIP_LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: item1 = $&#123;item1&#125;, item2=$&#123;item2&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;=============================&quot;</span>)</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">foreach</span>(item  IN ZIP_LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: item1 = $&#123;item_0&#125;, item2=$&#123;item_1&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<p>在这个例子中关于列表数据的添加是通过<code>list</code>来实现的。在遍历列表的时候一共使用了两种方式，一种提供了多个变量来存储当前列表中的值，另一种只有一个变量，但是实际取值的时候需要通过<code>变量名_0、变量名_1、变量名_N</code> 的方式来操作，<code>注意事项：第一个列表对应的编号是0，第一个列表对应的编号是0，第一个列表对应的编号是0。</code></p>
<p>上面的例子输出的结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: item1 = hello, item2=ace</span><br><span class="line">-- 当前遍历的值为: item1 = world, item2=sabo</span><br><span class="line">-- 当前遍历的值为: item1 = hello world, item2=luffy</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=zoro</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=sanji</span><br><span class="line">=============================</span><br><span class="line">-- 当前遍历的值为: item1 = hello, item2=ace</span><br><span class="line">-- 当前遍历的值为: item1 = world, item2=sabo</span><br><span class="line">-- 当前遍历的值为: item1 = hello world, item2=luffy</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=zoro</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=sanji</span><br><span class="line">-- Configuring done (0.0s)</span><br><span class="line">-- Generating done (0.0s)</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure>

<br>

<h5 id="11-2-2-while"><a href="#11-2-2-while" class="headerlink" title="11.2.2 while"></a>11.2.2 while</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(&lt;condition&gt;)</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line"><span class="keyword">endwhile</span>()</span><br></pre></td></tr></table></figure>
<p><code>while</code> 比较简单就不做描述了。</p>
<br>

<h3 id="12-cmake设置编译器"><a href="#12-cmake设置编译器" class="headerlink" title="12. cmake设置编译器"></a>12. cmake设置编译器</h3><h4 id="12-1-命令行"><a href="#12-1-命令行" class="headerlink" title="12.1 命令行"></a>12.1 命令行</h4><p>在命令行中指定编译器，你可以在调用 <code>cmake</code> 命令时使用 <code>-DCMAKE_C_COMPILER</code> 和 <code>-DCMAKE_CXX_COMPILER</code> 选项来分别为<code>C</code>和<code>C++</code>设置编译器。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ /path/to/source</span><br></pre></td></tr></table></figure>

<br>

<h4 id="12-2-CMakeLists-txt"><a href="#12-2-CMakeLists-txt" class="headerlink" title="12.2 CMakeLists.txt"></a>12.2 CMakeLists.txt</h4><p>在项目的 <code>CMakeLists.txt</code> 文件中，你可以使用 <code>set</code> 命令来指定编译器：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_C_COMPILER /user/bin/gcc)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_COMPILER /user/bin/g++)</span><br></pre></td></tr></table></figure>

<br>

<h4 id="12-3-工具链文件"><a href="#12-3-工具链文件" class="headerlink" title="12.3 工具链文件"></a>12.3 工具链文件</h4><p><code>CMake</code>允许使用所谓的“工具链文件”（toolchain file）来指定编译器和工具链设置。这在跨平台构建时非常有用。工具链文件是一个普通的<code>CMake</code>脚本，它设置了构建系统所需的编译器和工具链选项。例如，创建一个名为 <code>toolchain.cmake</code> 的文件，并在其中设置编译器：</p>
<pre><code>set(CMAKE_C_COMPILER gcc)
set(CMAKE_CXX_COMPILER g++)
</code></pre>
<p>然后在调用 <code>cmake</code> 命令时指定工具链文件：</p>
<pre><code>cmake -DCMAKE_TOOLCHAIN_FILE=path/to/toolchain.cmake /path/to/source
</code></pre>
<p>请记住，一旦<code>CMake</code>缓存生成，更改编译器的设置就需要清理<code>CMake</code>缓存并重新运行<code>CMake</code>配置。这是因为<code>CMake</code>在第一次运行时会将编译器和工具链的信息缓存起来，以便后续构建使用。</p>
]]></content>
      <categories>
        <category>自动编译工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5学习笔记</title>
    <url>/2024/04/30/Qt5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><strong>Qt官方下载地址</strong>: <a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></li>
<li><strong>参考教程文档</strong>: <a href="https://subingwen.cn/qt/qt-primer/">https://subingwen.cn/qt/qt-primer/</a></li>
</ul>
<br>

<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="打印问题"><a href="#打印问题" class="headerlink" title="打印问题"></a>打印问题</h3><p><strong>问题现象：</strong></p>
<ul>
<li>在Qt Creater中，使用<code>qDebug()</code>打印信息时，在调试界面中，<code>qDebug()</code>的输出信息会显示在调试终端，当直接运行<code>.exe</code>文件时，<code>qDebug()</code>的输出信息会丢失。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;这是测试打印程序&quot;</span> &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<ul>
<li>在<code>qt.pro</code>工程文件中中，添加如下代码：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CONFIG += c++<span class="number">17</span> console			<span class="comment">//添加console</span></span><br></pre></td></tr></table></figure></li>
<li>勾选以下选项：</li>
</ul>
<p><img src="/../pictures/qt_terminal%E9%85%8D%E7%BD%AE.png" alt="qt_terminal配置"></p>
<p><strong>总结：</strong></p>
<ul>
<li>需要重新编译代码，<code>.exe</code>文件更新后生效。</li>
<li>再次编译运行时,会弹出<code>terminal</code>。</li>
</ul>
]]></content>
      <categories>
        <category>图形界面</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile笔记</title>
    <url>/2024/05/08/Makefile%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<br>

<h2 id="makefile问题汇总"><a href="#makefile问题汇总" class="headerlink" title="makefile问题汇总"></a>makefile问题汇总</h2><h3 id="修改-h文件没有重新编译"><a href="#修改-h文件没有重新编译" class="headerlink" title="修改.h文件没有重新编译"></a>修改.h文件没有重新编译</h3><ul>
<li>定义<code>COMPILE_FLAGS = -MD</code>或者<code>-MMD</code>, 编译器标志，用于生成 <code>.d</code> 文件</li>
<li><code>$(BUILD_DIR)</code>为编译文件目录，跟进自身makefile修改，原来的编译规则：</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-include</span> <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(BUILD_DIR)</span>/*/*.d)</span>	<span class="comment"># 包含所有生成的依赖文件，避免重复编译、提高效率</span></span><br></pre></td></tr></table></figure>
<p><code>/*/*.d</code> 为当前目录下的二级所有文件检索。</p>
<ul>
<li>修改为以下编译规则：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到所有的 .d 文件</span></span><br><span class="line">DEP_FILES := <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(BUILD_DIR)</span> -type f -name &#x27;*.d&#x27;)</span><span class="comment"># 包含所有生成的依赖文件，避免重复编译、提高效率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含所有的 .d 文件</span></span><br><span class="line"><span class="keyword">-include</span> <span class="variable">$(DEP_FILES)</span></span><br></pre></td></tr></table></figure>
或者：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">-include $(wildcard $(BUILD_DIR)<span class="comment">/**/</span>*.d)</span><br><span class="line">-include $(wildcard $(BUILD_DIR)<span class="comment">/*/*/</span>*.d)</span><br></pre></td></tr></table></figure>
<code>/**/*.d</code> 它允许你搜索和匹配嵌套在任意深度的目录中的文件。<br><code>/*/*/*.d</code> 为当前目录下的三级所有文件检索，根据具体情况修改。</li>
</ul>
<br>

<h3 id=""><a href="#" class="headerlink" title="$&lt; 和 $^ 的区别"></a><code>$&lt;</code> 和 <code>$^</code> 的区别</h3><p>在<code>Makefile</code>中，<code>$&lt;</code> 和 <code>$^</code> 是两个自动变量，它们在规则中用来引用规则的依赖文件，但它们的用途和行为有所不同：</p>
<ul>
<li><p><code>$&lt;</code> - 代表规则的第一个依赖文件。</p>
<ul>
<li>当规则有多个依赖文件时，<code>$&lt;</code> 只引用第一个依赖文件。</li>
<li>它通常用于指定要编译的源文件，特别是在编译单个目标文件时。</li>
</ul>
</li>
<li><p><code>$^</code> - 代表规则的所有依赖文件。</p>
<ul>
<li>无论规则有多少个依赖文件，<code>$^</code> 都会将它们全部列出。</li>
<li>它常用于链接阶段，当你需要将多个目标文件链接成最终的可执行文件时。</li>
</ul>
</li>
</ul>
<p>举个例子来说明它们的不同：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设有一个目标文件 main.o 需要两个源文件 main.c 和 utils.c 来生成</span></span><br><span class="line"><span class="section">main.o: main.c utils.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c main.c -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这个例子中，$&lt; 就是 main.c，而 $^ 就是 main.c utils.c</span></span><br></pre></td></tr></table></figure>

<p>再看一个示例：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(BUILD_DIR)</span>/%.o: %.c</span><br><span class="line">	@mkdir -p <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(INCLUDE)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>这个规则的意思是，对于<code>$(BUILD_DIR)</code>目录下的每个<code>.o</code>文件，都有一个对应的<code>.c</code>文件。在<code>Makefile</code>中，<code>$&lt;</code> 是一个自动变量，它代表当前规则的第一个依赖文件。然而，<code>$&lt;</code> 并不会直接依赖所有的 <code>.c</code> 文件，而是依赖于当前规则的 <strong>第一个依赖文件</strong>。</p>
<p>总结一下：</p>
<ul>
<li>使用 <code>$&lt;</code> 时，只有第一个依赖文件会被考虑。</li>
<li>使用 <code>$^</code> 时，所有依赖文件都会被考虑。</li>
</ul>
<p>在实际编写Makefile时，根据你的需要选择合适的变量。</p>
<br>

<h3 id="makefile伪指令"><a href="#makefile伪指令" class="headerlink" title="makefile伪指令"></a>makefile伪指令</h3><p>在 <code>Makefile</code> 中，<code>.PHONY</code> 是一个特殊的声明，用来指出一些目标并不是实际的文件，而是一些需要执行的命令序列。这样做可以让 <code>Make</code> 工具在遇到同名文件时，不会误认为这些目标是要操作的文件，而是要执行的命令。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">.PHONY : clean all copy mix download</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span>.bin <span class="variable">$(TARGET)</span>.list <span class="variable">$(TARGET)</span>.hex</span></span><br><span class="line">	<span class="variable">$(SZ)</span> <span class="variable">$(TARGET)</span>.elf</span><br><span class="line">	@make copy</span><br><span class="line">	@make mix</span><br><span class="line">	</span><br><span class="line"><span class="section">copy: <span class="variable">$(TARGET)</span>.bin</span></span><br><span class="line">	cp <span class="variable">$(TARGET)</span>.bin app.bin</span><br><span class="line">	cp ../bootloader/bootloader.bin bootloader.bin</span><br><span class="line"><span class="comment">#	cp $(TARGET).hex app.hex</span></span><br><span class="line"></span><br><span class="line"><span class="section">mix:</span></span><br><span class="line">	./tools/papp_up</span><br><span class="line">	./tools/mix_10K</span><br><span class="line">	<span class="variable">$(OC)</span> -I binary -O ihex --change-addresses 0x8000000 mix.bin mix.hex</span><br><span class="line">	rm bootloader.bin</span><br><span class="line">	rm app.bin</span><br><span class="line">	rm mix.bin</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(BUILD_DIR)</span></span><br><span class="line">	rm papp.bin</span><br><span class="line">	rm mix.hex</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Makefile</code>默认执行的是 <strong>第一个目标</strong>（不包括以点开头的目标）<code>all</code>，而不是 <code>.PHONY</code> 后的第一个目标。<code>.PHONY</code> 宏的作用是防止<code>Make</code>错误地将伪目标与文件系统中的文件混淆。</li>
<li><code>make</code>会加载依赖<code>$(TARGET).bin</code> <code>$(TARGET).list</code> <code>$(TARGET).hex</code> <code>$(SZ) $(TARGET).elf</code>。</li>
<li><code>@</code>符号使得 <code>Make</code> 工具在执行命令时不会打印该命令本身,如<code>make copy</code>。</li>
<li><strong>拓展</strong>：<code>$(OC) -I binary -O ihex --change-addresses 0x8000000 mix.bin mix.hex</code>表示将 <code>mix.bin</code> 的二进制文件转换为名为 <code>mix.hex</code> 的 <code>Intel HEX</code>格式文件，并将所有地址偏移设置为 <code>0x8000000</code></li>
</ul>
<br>

<h2 id="n32g452rc的makefile解析"><a href="#n32g452rc的makefile解析" class="headerlink" title="n32g452rc的makefile解析"></a>n32g452rc的makefile解析</h2><p><strong><code>makefile</code>源码：</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># C编译器的宏定义</span></span><br><span class="line">C_DEFS +=  \</span><br><span class="line">-DN32G45X \</span><br><span class="line">-DUSE_STDPERIPH_DRIVER</span><br><span class="line"></span><br><span class="line"><span class="comment"># C编译器的头文件搜索路径</span></span><br><span class="line">INCLUDE +=  \</span><br><span class="line">-ICMSIS/core  \</span><br><span class="line">-ICMSIS/device	\</span><br><span class="line">-Istd_periph_lib/inc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># APP源文件</span></span><br><span class="line">C_APP_SOURCES +=  \</span><br><span class="line">application/main.c \</span><br><span class="line">application/n32g45x_it.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间层驱动源文件</span></span><br><span class="line">C_DRV_SOURCES +=  \</span><br><span class="line">msp/drv_msp.c \</span><br><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> rtt-nano/src/*.c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C编译器的底层驱动源文件</span></span><br><span class="line">C_LIB_SOURCES +=  \</span><br><span class="line">CMSIS/device/system_n32g45x.c \</span><br><span class="line">std_periph_lib/src/misc.c \</span><br><span class="line">std_periph_lib/src/n32g45x_rcc.c</span><br><span class="line"></span><br><span class="line">C_SOURCES += <span class="variable">$(C_LIB_SOURCES)</span></span><br><span class="line">C_SOURCES += <span class="variable">$(C_APP_SOURCES)</span></span><br><span class="line">C_SOURCES += <span class="variable">$(C_DRV_SOURCES)</span></span><br><span class="line"></span><br><span class="line">ASM_SOURCES +=  \</span><br><span class="line">CMSIS/device/startup/startup_n32g45x_gcc.S \</span><br><span class="line">rtt-nano/libcpu/arm/cortex-m4/context_gcc.S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定交叉编译工具链的 编译器、连接器、库管理器、</span></span><br><span class="line">CROSS_COMPILE=arm-none-eabi-</span><br><span class="line">CC=<span class="variable">$(CROSS_COMPILE)</span>gcc</span><br><span class="line">LD=<span class="variable">$(CROSS_COMPILE)</span>ld</span><br><span class="line">AR=<span class="variable">$(CROSS_COMPILE)</span>ar</span><br><span class="line">AS=<span class="variable">$(CROSS_COMPILE)</span>as</span><br><span class="line">OC=<span class="variable">$(CROSS_COMPILE)</span>objcopy</span><br><span class="line">OD=<span class="variable">$(CROSS_COMPILE)</span>objdump</span><br><span class="line">SZ=<span class="variable">$(CROSS_COMPILE)</span>size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定目标硬件的架构和浮点运算单元   -mfpu=fpv4-sp-d16 -mfloat-abi=hard -mfloat-abi=soft </span></span><br><span class="line">MCU = -mcpu=cortex-m4 -mthumb \</span><br><span class="line">	-ffunction-sections \</span><br><span class="line">	-fdata-sections \</span><br><span class="line">	--specs=nano.specs \</span><br><span class="line">	--specs=nosys.specs \</span><br><span class="line">	-Os -ggdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编译C源文件的编译选项：禁用共享变量、函数和数据分段、优化级别、调试信息级别、开启所有警告、目标架构、预定义宏</span></span><br><span class="line"><span class="comment"># O0:禁用优化，O1：基本优化，O2, O3, Os</span></span><br><span class="line"><span class="comment"># g0:禁用调试信息, g1, g2, g3, g</span></span><br><span class="line">CFLAGS += -c -fno-common \</span><br><span class="line">	--specs=rdimon.specs \</span><br><span class="line">	-std=gnu99 -mabi=aapcs \</span><br><span class="line">	-Wall \</span><br><span class="line">	<span class="variable">$(MCU)</span> \</span><br><span class="line">	<span class="variable">$(C_DEFS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义链接器脚本、链接选项、目标文件格式转换选项、反汇编 -nostdlib -lnosys</span></span><br><span class="line">LDSCRIPT=n32g452_flash.ld</span><br><span class="line">LDFLAGS += -Wl,--gc-sections --data-sections -mabi=aapcs <span class="variable">$(MCU)</span> -T<span class="variable">$(LDSCRIPT)</span> \</span><br><span class="line">	-x assembler-with-cpp -Wa,-mimplicit-it=thumb</span><br><span class="line"></span><br><span class="line"><span class="comment"># printf打印浮点数</span></span><br><span class="line"><span class="comment"># LDFLAGS += -lc -lrdimon -u _printf_float</span></span><br><span class="line"></span><br><span class="line">OCFLAGS	= -Obinary</span><br><span class="line">ODFLAGS	= -S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出目录和目标文件名</span></span><br><span class="line">BUILD_DIR = build</span><br><span class="line">TARGET  = <span class="variable">$(BUILD_DIR)</span>/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># C源文件、汇编源文件的目标文件路径</span></span><br><span class="line">C_OBJECTS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(BUILD_DIR)</span>/, $(C_SOURCES:.c=.o)</span>)</span><br><span class="line">ASM_OBJECTS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(BUILD_DIR)</span>/, $(ASM_SOURCES:.S=.o)</span>)</span><br><span class="line">OBJECTS += <span class="variable">$(ASM_OBJECTS)</span> <span class="variable">$(C_OBJECTS)</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean all</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span>.bin <span class="variable">$(TARGET)</span>.list <span class="variable">$(TARGET)</span>.hex</span></span><br><span class="line">	<span class="variable">$(SZ)</span> <span class="variable">$(TARGET)</span>.elf</span><br><span class="line">	@make copy</span><br><span class="line">	@make mix</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: copy</span></span><br><span class="line"></span><br><span class="line"><span class="section">copy: <span class="variable">$(TARGET)</span>.bin</span></span><br><span class="line">	cp <span class="variable">$(TARGET)</span>.bin app.bin</span><br><span class="line">	cp ../bootloader/bootloader.bin bootloader.bin</span><br><span class="line"><span class="comment">#	cp $(TARGET).hex app.hex</span></span><br><span class="line"></span><br><span class="line"><span class="section">mix:</span></span><br><span class="line">	./tools/papp_up</span><br><span class="line">	./tools/mix_10K</span><br><span class="line">	<span class="variable">$(OC)</span> -I binary -O ihex --change-addresses 0x8000000 mix.bin mix.hex</span><br><span class="line">	rm bootloader.bin</span><br><span class="line">	rm app.bin</span><br><span class="line">	rm mix.bin</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(BUILD_DIR)</span></span><br><span class="line">	rm papp.bin</span><br><span class="line">	rm mix.hex</span><br><span class="line"></span><br><span class="line">SYS := <span class="variable">$(<span class="built_in">shell</span> uname -a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">findstring</span> Microsoft,<span class="variable">$(SYS)</span>)</span>,Microsoft)</span><br><span class="line"><span class="section">COPY_CMD:</span></span><br><span class="line">	cp <span class="variable">$(TARGET)</span>.hex <span class="string">&quot;/mnt/c/Users/Breo/Desktop/iap-tools/linux_download&quot;</span></span><br><span class="line">	wsl.exe -d Ubuntu-20.04 cmd.exe /c <span class="string">&quot;C:\\\Users\\\BREO\\\Desktop\\\iap-tools\\\linux_download\\\program452RC.bat&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="section">COPY_CMD:</span></span><br><span class="line">	echo <span class="string">&quot;当前系统不是 WSL，跳过拷贝文件指令&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="section">download:</span></span><br><span class="line">	@make all</span><br><span class="line">	@<span class="variable">$(MAKE)</span> COPY_CMD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义生成目标文件的规则</span></span><br><span class="line"><span class="variable">$(TARGET)</span>.list: <span class="variable">$(TARGET)</span>.elf</span><br><span class="line">	<span class="variable">$(OD)</span> <span class="variable">$(ODFLAGS)</span> <span class="variable">$&lt;</span> &gt; <span class="variable">$(TARGET)</span>.lst</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>.bin: <span class="variable">$(TARGET)</span>.elf</span><br><span class="line">	<span class="variable">$(OC)</span> <span class="variable">$(OCFLAGS)</span> <span class="variable">$(TARGET)</span>.elf <span class="variable">$(TARGET)</span>.bin</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>.elf: <span class="variable">$(OBJECTS)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(ASM_OBJECTS)</span> <span class="variable">$(C_OBJECTS)</span> <span class="variable">$(LDFLAGS)</span> -Wl,-Map=<span class="variable">$(TARGET)</span>.map -o <span class="variable">$(TARGET)</span>.elf</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>.hex: <span class="variable">$(TARGET)</span>.elf</span><br><span class="line">	<span class="variable">$(OC)</span> -O ihex <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编译C源文件、汇编源文件的规则，将源文件编译成目标文件</span></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/%.o: %.c</span><br><span class="line">	mkdir -p <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(INCLUDE)</span> <span class="variable">$(CFLAGS)</span> -MMD -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/%.o: %.S</span><br><span class="line">	mkdir -p <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(INCLUDE)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-include $(wildcard $(BUILD_DIR)/**/*.d)	# 包含所有生成的依赖文件，避免重复编译、提高效率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到所有的 .d 文件</span></span><br><span class="line">DEP_FILES := <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(BUILD_DIR)</span> -type f -name &#x27;*.d&#x27;)</span><span class="comment"># 包含所有生成的依赖文件，避免重复编译、提高效率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含所有的 .d 文件</span></span><br><span class="line"><span class="keyword">-include</span> <span class="variable">$(DEP_FILES)</span></span><br></pre></td></tr></table></figure>
<p>下面是对这段代码的逐句分析：</p>
<ol>
<li><p>宏定义 (<code>C_DEFS</code>):</p>
<ul>
<li><code>-DN32G45X</code> 和 <code>-DUSE_STDPERIPH_DRIVER</code> 是编译器的宏定义，用于在编译时定义特定的预处理变量。</li>
</ul>
</li>
</ol>
<br>

<ol start="2">
<li><p>头文件搜索路径 (<code>INCLUDE</code>):</p>
<p> <code>-ICMSIS/core</code>, <code>-ICMSIS/device</code>, <code>-Istd_periph_lib/inc</code> 指定了编译器搜索头文件的路径。</p>
</li>
</ol>
<br>

<ol start="3">
<li><p>应用层源文件 (<code>C_APP_SOURCES</code>):</p>
<ul>
<li>列出了应用层的 <code>C</code> 源文件。</li>
</ul>
</li>
</ol>
<br>

<ol start="4">
<li><p>中间层驱动源文件 (<code>C_DRV_SOURCES</code>):</p>
<ul>
<li>使用 $(wildcard rtt-nano&#x2F;src&#x2F;*.c) 来匹配 rtt-nano&#x2F;src 目录下的所有 .c 文件。</li>
</ul>
</li>
</ol>
<br>

<ol start="5">
<li><p>底层驱动源文件 (<code>C_LIB_SOURCES</code>):</p>
<ul>
<li>列出了底层驱动的 C 源文件。</li>
</ul>
</li>
</ol>
<br>

<ol start="6">
<li><p>源文件汇总 (<code>C_SOURCES</code>):</p>
<ul>
<li>将应用层、中间层和底层驱动的源文件汇总到 <code>C_SOURCES。</code></li>
</ul>
</li>
</ol>
<br>

<ol start="7">
<li><p>汇编源文件 (<code>ASM_SOURCES</code>):</p>
<ul>
<li>列出了汇编语言的源文件。</li>
</ul>
</li>
</ol>
<br>

<ol start="8">
<li><p>交叉编译工具链 (<code>CROSS_COMPILE</code>, <code>CC</code>, <code>LD</code>, <code>AR</code>, <code>AS</code>, <code>OC</code>, <code>OD</code>, <code>SZ</code>):</p>
<ul>
<li>定义了交叉编译工具链的前缀和各个工具（编译器、链接器、库管理器等）的命令。</li>
</ul>
</li>
</ol>
<br>

<ol start="9">
<li><p>目标硬件的架构和浮点运算单元 (<code>MCU</code>):</p>
<ul>
<li><p><code>-mcpu=cortex-m4</code>:</p>
<ul>
<li>编译器目标处理器是 <code>Cortex-M4</code> CPU</li>
<li><code>-mcpu=</code> 后面跟的是具体的目标 CPU 型号</li>
</ul>
</li>
<li><p><code>-mthumb</code>:</p>
<ul>
<li>编译器生成 <code>Thumb</code> 指令集的代码。<code>Thumb</code> 指令集是 <code>ARM</code> 架构的一种<code>16位指令集</code>,用于嵌入式系统以减少内存占用和提高代码密度。</li>
</ul>
</li>
<li><p><code>-ffunction-sections</code>:</p>
<ul>
<li>允许编译器将 <strong>每个函数</strong> 分别放入程序的 <strong>单独段</strong> 中。这可以使得链接器在最终的链接阶段丢弃未使用的函数，从而<em>减小最终固件的大小</em>。</li>
</ul>
</li>
<li><p><code>-fdata-sections</code>:</p>
<ul>
<li>类似于 <code>-ffunction-sections</code>，这个选项允许编译器将 <strong>不同的数据</strong> 放入程序的 <strong>不同段</strong> 中。这同样有助于链接器优化，<code>移除未使用的数据段</code>。</li>
</ul>
</li>
<li><p><code>--specs=nano.specs</code>:</p>
<ul>
<li>这个选项指定使用新<code>libnano</code>规格，这是针对小型嵌入式系统的 <strong>C 标准库的缩减版本</strong>。它提供了比标准<code> C</code> 库 <strong>更小的占用空间</strong>，适合资源受限的系统。</li>
</ul>
</li>
<li><p><code>--specs=nosys.specs</code>:</p>
<ul>
<li>这个选项指定编译器使用 <code>nosys</code> 作为系统调用的默认返回值。在嵌入式系统中，系统调用可能并不总是可用，这个选项 <strong>允许编译器生成不依赖系统调用的代码</strong>。</li>
</ul>
</li>
<li><p><code>-Os</code>:</p>
<ul>
<li>这个选项指示编译器<code>优化大小</code>。编译器会尝试在不牺牲太多性能的情况下，生成尽可能小的代码。还有 <code>-O0(无优化)</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code>, <code>-Og</code>(优化调试,不是优化性能或大小)</li>
</ul>
</li>
<li><p><code>-ggdb</code>:</p>
<ul>
<li>这个选项用于生成调试信息。<code>-g</code> 让编译器在对象文件中包含调试信息，使得开发者可以使用调试器（如 <code>GDB</code>）来调试程序。</li>
</ul>
</li>
<li><p><code>-mfpu=fpv4-sp-d16</code>(未使用):</p>
<ul>
<li>符合 <code>FPU 版本 4（FPv4）</code>的浮点单元，它支持单精度（<code>single-precision</code>）和双精度（<code>double-precision</code>）浮点运算。<code>-sp-d16</code> 表示该 <code>FPU</code> 拥有 <code>16</code> 个双精度寄存器，它们被组织为 <code>32</code> 个单精度寄存器。</li>
</ul>
</li>
<li><p><code>-mfloat-abi=hard</code>(未使用):</p>
<ul>
<li>这个选项指定使用“硬”浮点 <code>ABI</code>，意味着浮点运算将使用目标硬件的 FPU 执行，并且浮点函数（如 <code>sin</code>、<code>cos</code>、<code>sqrt</code> 等）将被实现为直接调用硬件支持的浮点指令。这通常可以提高性能，因为 <strong>浮点运算更快</strong>，但可能会 <strong>增加固件的大小</strong>，因为需要包含 FPU 的指令集。</li>
</ul>
</li>
<li><p><code>-mfloat-abi=soft</code>(未使用):</p>
<ul>
<li>soft 浮点 ABI 指定浮点运算将通过软件库实现，而不是直接使用硬件 FPU。这种方式可以 <strong>生成更小的代码</strong>，因为不需要包含 FPU 的指令集，但运行时的 <strong>浮点运算会较慢</strong>，因为它们需要通过软件模拟。</li>
</ul>
</li>
</ul>
<p> <strong>注意：</strong><code>-mfpu=fpv4-sp-d16</code> 与 <code>-mfloat-abi=hard</code> 或 <code>-mfloat-abi=soft</code> 选项一起使用。</p>
</li>
</ol>
<br>

<ol start="10">
<li>编译选项 (<code>CFLAGS</code>):<br>定义了编译 <code>C</code> 源文件时使用的选项,<code>$(MCU)</code> 和 <code>$(C_DEFS)</code>上面有解释，不过多阐述。<ul>
<li><code>-c</code>:<ul>
<li>这个选项告诉编译器 <strong>仅编译源代码</strong> 文件而 <strong>不进行链接</strong>。编译器会为每个源文件生成一个目标（<code>object</code>）文件，这些目标文件 <strong>随后可以被链接</strong> 器链接成<strong>可执行文件</strong>或<strong>库</strong>。</li>
</ul>
</li>
<li><code>-fno-common</code>:<ul>
<li>在一些系统中，<code>-fcommon</code> 是默认行为，它允许存在多个未初始化的相同大小的全局变量或静态变量，它们在<strong>链接时合并为一个</strong>。<code>-fno-common</code> 选项禁用了这一行为，要求每个全局变量或静态变量都有其自己的内存位置。这在嵌入式系统或某些特定系统中可能是必需的。</li>
</ul>
</li>
<li><code>--specs=rdimon.specs</code>:<ul>
<li>这个选项指定使用 <code>rdimon.specs</code> 文件作为编译器的规格说明。规格说明文件包含了特定于系统的编译和链接规则，<code>rdimon.specs</code> 可能是指某个特定实时操作系统（<code>RTOS</code>）或嵌入式平台的规格。</li>
</ul>
</li>
<li><code>-std=gnu99</code>:<ul>
<li>这个选项指定编译器遵循 <code>ISO C99</code> 标准，同时包括 GNU 的扩展。gnu99 意味着除了标准的 <code>C99</code> 特性外，编译器还会接受 GNU C 的特定扩展。</li>
</ul>
</li>
<li><code>-mabi=aapcs</code>:<ul>
<li>这个选项指定使用 <code>ARM</code> 架构程序调用标准（<code>AAPCS，ARM Architecture Procedure Call Standard</code>）。<code>AAPCS</code> 定义了函数调用时的参数传递、返回值以及寄存器使用等规则。</li>
</ul>
</li>
<li><code>-Wall</code>:<ul>
<li>这个选项告诉编译器打开大多数警告信息。虽然 <code>-Wall</code> 并不打开所有的警告选项，但它会启用大量标准警告，帮助开发者发现潜在的问题。</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<ol start="11">
<li><p>链接器脚本和链接选项 (<code>LDSCRIPT</code>, <code>LDFLAGS</code>):</p>
<ul>
<li><code>LDSCRIPT=n32g452_flash.ld</code><ul>
<li>链接器使用的脚本</li>
</ul>
</li>
<li><code>-Wl,--gc-sections</code><ul>
<li><code>Wl</code> 是告诉 <code>GCC</code> 后面的选项是传递给链接器的</li>
<li><code>--gc-sections</code> 告诉链接器在最终的可执行文件中删除未使用的代码段，减小程序大小。</li>
</ul>
</li>
<li><code>--data-sections</code>:<ul>
<li>这个选项类似于 <code>--gc-sections</code>，但它专门用于数据段。它允许链接器移除未使用的数据段，进一步减小程序大小。</li>
</ul>
</li>
<li><code>-mabi=aapcs</code>:<ul>
<li>这个选项指定了应用程序二进制接口（<code>ABI</code>）。<code>aapcs</code> 代表 <code>ARM 架构</code>过程调用标准，它定义了 <code>ARM 架构</code>中函数调用的规则，包括如何传递参数、如何管理堆栈等。</li>
</ul>
</li>
<li><code>-T$(LDSCRIPT)</code>:<ul>
<li><code>-T</code> 是<strong>链接器选项</strong>，用来指定<strong>链接脚本文件</strong>。链接脚本包含了有关如何链接程序的附加信息，比如内存布局、各种段的位置等。<code>$(LDSCRIPT)</code> 是一个 <code>Makefile</code> 变量，它的值是链接脚本文件的名称，通常是一个文本文件，告诉链接器如何组织内存中的段。</li>
</ul>
</li>
<li><code>-x assembler-with-cpp</code>:<ul>
<li>这个选项告诉链接器将<strong>所有输入文件</strong>视为<strong>预处理过</strong>的<strong>汇编源文件</strong>。这通常用于确保链接器正确处理由 <strong>C 预处理器</strong>生成的<strong>汇编代码</strong>。</li>
</ul>
</li>
<li><code>-Wa,-mimplicit-it=thumb</code>:<ul>
<li>这是传递给汇编器的选项（通过 <code>-Wa</code> 前缀）。<code>-mimplicit-it=thumb</code> 指定默认的指令集为 <code>Thumb</code> 模式，这是 <code>ARM 架构</code>的一种 <code>16 位指令集</code>，用于减小代码大小。</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<ol start="12">
<li>目标文件格式转换选项 (<code>OCFLAGS</code>, <code>ODFLAGS</code>):<br>- <code>OCFLAGS = -Obinary</code><br>- <code>ODFLAGS = -S</code></li>
</ol>
<br>

<ol start="13">
<li>输出目录和目标文件名 (<code>BUILD_DIR</code>, <code>TARGET</code>):<ul>
<li>定义了构建输出目录和最终目标文件的名称。</li>
</ul>
</li>
</ol>
<br>

<ol start="14">
<li>目标文件的生成 (<code>C_OBJECTS</code>, <code>ASM_OBJECTS</code>, <code>OBJECTS</code>):<ul>
<li><code>C_OBJECTS = $(addprefix $(BUILD_DIR)/, $(C_SOURCES:.c=.o))</code><ul>
<li><code>$(C_SOURCES:.c=.o)</code>将所有的 <code>C</code> 源文件列表 <code>$(C_SOURCES)</code> 中的每个 <code>.c</code> 扩展名替换为 <code>.o</code> 扩展名，得到目标文件（<code>object files</code>）列表。</li>
<li><code>$(addprefix $(BUILD_DIR)/, ...) </code>为每个 <code>.o</code> 文件<strong>加前缀</strong>加上构建目录 <code>$(BUILD_DIR)/</code> 的路径。</li>
<li><code>C_OBJECTS</code> 变量包含了所有 <code>C</code> 源文件对应的、带有完整路径的目标文件列表。</li>
</ul>
</li>
<li><code>ASM_OBJECTS = $(addprefix $(BUILD_DIR)/, $(ASM_SOURCES:.S=.o))</code>:<ul>
<li>这行代码的逻辑与 <code>C_OBJECTS</code> 类似，但是针对汇编源文件 <code>$(ASM_SOURCES)</code>。</li>
<li>它将所有 <code>.S</code> 源文件扩展名替换为 <code>.o</code>，然后添加构建目录的前缀，生成汇编语言目标文件的列表。</li>
</ul>
</li>
<li><code>OBJECTS += $(ASM_OBJECTS) $(C_OBJECTS)</code>:<ul>
<li>这行代码使用 <code>+=</code> 操作符将 <code>$(ASM_OBJECTS)</code> 和 <code>$(C_OBJECTS)</code> 列表中的所有目标文件添加到 <code>OBJECTS</code> 变量中。</li>
<li>OBJECTS 变量通常用于表示所有需要链接的文件的列表，它可能已经包含了一些其他目标文件，这里通过 <code>+=</code> 操作符将<code>汇编</code>和 <code>C</code> 语言的目标文件列表追加进去。</li>
<li>最终，<code>OBJECTS </code>包含了所有需要被链接器用来生成最终可执行文件或库文件的目标文件。</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<ol start="15">
<li>伪目标 (<code>.PHONY</code>):<ul>
<li>定义了 <code>clean</code>, <code>all</code>, <code>copy</code>, <code>mix</code>, <code>download</code> 等伪目标，用于执行特定的命令序列。</li>
</ul>
</li>
</ol>
<br>

<ol start="16">
<li>条件命令 (<code>SYS</code>, <code>ifeq</code>):<ul>
<li><code>SYS := $(shell uname -a)</code>:<ul>
<li>这行使用 <code>uname -a</code> 命令来获取当前系统的内核信息，并将输出赋值给 <code>SYS</code> 变量。<code>$(shell ...)</code> 命令会在 <code>shell</code> 中执行括号内的内容，并返回其输出。</li>
</ul>
</li>
<li><code>ifeq ($(findstring Microsoft,$(SYS)),Microsoft)</code>:<ul>
<li>这是一个条件语句，用于检查 <code>SYS</code> 变量中是否包含字符串 “<code>Microsoft</code>“。<code>$(findstring ...)</code> 函数在 <code>SYS</code> 的值中搜索 “<code>Microsoft</code>“ 字符串。如果找到，返回 “<code>Microsoft</code>“；否则返回空字符串。</li>
<li><code>ifeq</code> 检查 <code>$(findstring Microsoft,$(SYS))</code> 的结果是否等于 “<code>Microsoft</code>“。如果是，将执行下面的命令</li>
</ul>
</li>
<li><code>wsl.exe -d Ubuntu-20.04 cmd.exe /c &quot;C:\\\Users\\\BREO\\\Desktop\\\iap-tools\\\linux_download\\\program452RC.bat&quot;</code>:<ul>
<li>使用 <code>wsl.exe</code> 调用 <code>WSL</code> 环境。</li>
<li><code>-d Ubuntu-20.04</code>中，<code>-d</code> 选项允许你选择一个特定的发行版来启动,这里是<code>Ubuntu-20.04</code>。</li>
<li><code>cmd.exe</code>:这是 <code>Windows</code> 的命令行解释器，来运行一个 <code>Windows 批处理脚本</code>。</li>
<li><code>/c</code>: 告诉 <code>cmd.exe</code> 执行指定的命令，然后关闭窗口。</li>
<li><code>&quot;C:\\\...bat&quot;</code>: 需要执行脚本的路径。</li>
<li>**不知道为什么要用<code>\\\</code>**。</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<ol start="17">
<li>生成目标文件的规则 (<code>$(TARGET).list</code>, <code>$(TARGET).bin</code>, <code>$(TARGET).elf</code>, <code>$(TARGET).hex</code>):<ul>
<li><code>$(TARGET).list: $(TARGET).elf</code>:(以下规则类似)<ul>
<li><code>$(TARGET).list</code>: <code>$@</code>(<strong>目标文件</strong>)</li>
<li><code>$(TARGET).elf</code>: <code>$&lt;</code>(<strong>输入文件</strong>)</li>
</ul>
</li>
<li><code>$(OD) $(ODFLAGS) $&lt; &gt; $(TARGET).lst</code>:<ul>
<li>这是上述规则的命令部分。<code>$(OD)</code> 是 <code>objdump</code> 工具的变量，<code>$(ODFLAGS)</code> 是 <code>objdump</code> 的相关参数。<code>$&lt;</code> 是自动变量，表示第一个依赖文件，也就是 <code>$(TARGET).elf</code>。</li>
<li>命令使用 <code>objdump</code> 提取 <code>.elf</code> 文件的汇编内容，并重定向输出到 <code>$(TARGET).lst</code> 文件。</li>
</ul>
</li>
<li><code>$(OC) $(OCFLAGS) $(TARGET).elf $(TARGET).bin</code>:<ul>
<li>这是上述规则的命令部分。<code>$(OC)</code> 是 <code>objcopy</code> 工具的变量，<code>$(OCFLAGS)</code> 是 <code>objcopy</code> 的相关参数。</li>
<li>命令使用 <code>objcopy</code> 从 <code>.elf</code> 文件生成二进制格式的 <code>.bin</code> 文件。</li>
</ul>
</li>
<li><code>$(CC) $(ASM_OBJECTS) $(C_OBJECTS) $(LDFLAGS) -Wl,-Map=$(TARGET).map -o $(TARGET).elf</code>:<ul>
<li>这是 <strong>链接命令</strong>，使用 <code>$(CC)</code> 编译器（实际上是链接器）来链接对象文件 <code>$(ASM_OBJECTS)</code> 和 <code>$(C_OBJECTS)</code>，以及链接器标志 <code>$(LDFLAGS)</code>。</li>
<li><code>-Wl,-Map=$(TARGET).map</code> 选项告诉链接器生成一个内存映射文件 <code>$(TARGET).map</code>。</li>
<li><code>-o $(TARGET).elf</code> 指定了输出的 <strong>可执行文件</strong>名。</li>
</ul>
</li>
<li><code>$(OC) -O ihex $&lt; $@</code>:<ul>
<li>这是上述规则的命令部分，使用 <code>objcopy</code> 的 <code>-O ihex</code> 选项将输入文件（<code>$&lt;</code>）转换为 <code>Intel HEX</code> 格式，并命名为 <code>$@</code>，即 <code>$(TARGET).hex</code>。</li>
</ul>
</li>
<li><code>mkdir -p $(dir $@)</code><ul>
<li>这条命令确保目标文件的目录存在。<code>$(dir $@)</code> 获取目标文件的目录路径，<code>mkdir -p</code> 命令 <strong>创建这个目录（如果它还不存在）</strong>。</li>
</ul>
</li>
<li><code>$(CC) $(INCLUDE) $(CFLAGS) -MMD -c $&lt; -o $@</code><ul>
<li>这是编译单个 <code>C</code> 源文件的命令。它使用 <code>$(CC)</code> 编译器，<code>$(INCLUDE)</code> 包含路径，<code>$(CFLAGS)</code> 编译选项，<code>-c</code> 选项来编译不链接，<code>-MMD</code> 生成依赖文件，<code>$&lt;</code> 是源文件，<code>$@</code> 是目标文件。</li>
</ul>
</li>
<li><code>$(BUILD_DIR)/%.o: %.S</code>:<ul>
<li>这是一个模式规则，用于从 <code>.S</code> 汇编源文件生成 <code>.o</code> 目标文件，其命令与上面编译 <code>C</code> 文件的命令类似，但是通常 <strong>不包含编译选项</strong>，因为汇编语言的处理方式与 <code>C</code> 语言不同。</li>
</ul>
</li>
<li><code>-include $(wildcard $(BUILD_DIR)/**/*.d)</code>:<ul>
<li><code>$(wildcard *.c)</code> 会列出当前目录下所有的 <code>.c</code> 文件。</li>
<li><code>$(wildcard $(BUILD_DIR)/**/*.d)</code> 会列出 <code>$(BUILD_DIR)</code> 目录下的所有 <code>.d</code> 文件。</li>
</ul>
</li>
<li><code>DEP_FILES := $(shell find $(BUILD_DIR) -type f -name &#39;*.d&#39;)</code>,<code>-include $(DEP_FILES)</code>:<ul>
<li><code>find</code> 这是一个 <code>find</code> 命令，用于在文件系统中搜索文件。</li>
<li><code>$(BUILD_DIR)</code> 是之前定义的 <code>Makefile</code> 变量，表示构建目录的路径。</li>
<li><code>-type f</code> 指定 <code>find</code> 命令只搜索文件（不包括目录）。</li>
<li><code>-name &#39;*.d&#39;</code> 定义了搜索的文件名模式，<code>*.d</code> 匹配所有以 <code>.d</code> 结尾的文件，这通常是由编译器生成的依赖文件。</li>
<li><code>-include $(DEP_FILES)</code>： <code>make</code> 将会包含这些 <code>.d</code> ,这些文件包含了<strong>头文件的依赖信息</strong>,从而确保 <code>make</code> 能够正确地<strong>检测到源文件的依赖关系</strong>，并且在<strong>源文件</strong>或其<strong>头文件</strong>发生变化时<strong>重新编译</strong>相应的目标文件。</li>
</ul>
</li>
</ul>
</li>
</ol>
<br>

<ol start="18">
<li><p>编译C源文件和汇编源文件的规则 (<code>$(BUILD_DIR)/%.o: %.c</code>, <code>$(BUILD_DIR)/%.o: %.S</code>):</p>
<ul>
<li>定义了如何编译 <code>C</code> 和汇编源文件为 <code>.o</code> 目标文件。</li>
</ul>
</li>
</ol>
<br>

<ol start="19">
<li>包含生成的依赖文件 <code>(-include $(wildcard $(BUILD_DIR)/**/*.d), DEP_FILES)</code>:<ul>
<li>使用 <code>find</code> 命令找到所有的 <code>.d</code> 文件，然后使用 <code>-include</code> 指令包含这些文件，以确保 <code>Make</code> 能够跟踪源文件的变化并避免不必要的重新编译。</li>
</ul>
</li>
</ol>
<br>

<h2 id="标准makefile基本语法"><a href="#标准makefile基本语法" class="headerlink" title="标准makefile基本语法"></a>标准makefile基本语法</h2><p>[参考文档]：<a href="https://seisman.github.io/how-to-write-makefile/index.html">https://seisman.github.io/how-to-write-makefile/index.html</a></p>
<h3 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h3><h4 id="规则的语法"><a href="#规则的语法" class="headerlink" title="规则的语法"></a>规则的语法</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">targets : prerequisites</span><br><span class="line">    command</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>或是这样：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">targets : prerequisites ; command</span><br><span class="line">    command</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>如果命令太长，你可以使用反斜杠（ <code>\</code> ）作为换行符</p>
<br>

<h4 id="在规则中使用通配符"><a href="#在规则中使用通配符" class="headerlink" title="在规则中使用通配符"></a>在规则中使用通配符</h4><p><code>make</code>支持三个通配符： <code>*</code> ， <code>?</code> 和 <code>~</code> 。这是和<code>Unix</code>的<code>B-Shell</code>是相同的。</p>
<ul>
<li><code>*</code>：通配符代替了你一系列的文件，如 <code>*.c</code> 表示所有后缀为c的文件。一个需要我们注意的是，如果我们的文件名中有通配符，如： <code>*</code> ，那么可以用转义字符 <code>\</code> ，如 <code>\*</code> 来表示真实的 <code>*</code> 字符，而不是任意长度的字符串。<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.o</span><br></pre></td></tr></table></figure>
<code>clean</code>是操作系统<code>Shell</code>所支持的通配符。<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = *.o</span><br></pre></td></tr></table></figure>
<code>objects</code>的值就是 <code>*.o</code>, 并不是说 *.o 会展开， 如需展开进行以下操作。<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects := <span class="variable">$(<span class="built_in">wildcard</span> *.o)</span></span><br></pre></td></tr></table></figure>
<strong>示例1</strong>：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">var = <span class="variable">$(<span class="built_in">shell</span> echo &quot;Hello, World!&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><code>:=</code> 和 <code>=</code>区别：<ul>
<li><code>=</code> (递归展开):<strong>示例1</strong>每次引用 <code>$(var)</code> 时，<code>Make</code> 都会执行 <code>echo &quot;Hello, World!&quot;</code></li>
<li><code>:=</code> (直接展开):<strong>示例1</strong>每次引用 <code>$(var)</code> 的值在 <code>Makefile</code> 解析时设置为 <code>&quot;Hello, World!&quot;</code></li>
</ul>
</li>
</ul>
<p><strong>示例2</strong><br>可写出编译并链接所有 <code>.c</code> 和 <code>.o</code> 文件：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,$(<span class="built_in">wildcard</span> *.c)</span>)</span><br><span class="line">foo : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o foo <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>patsubst</code> 函数用于将第一个参数中匹配第二个参数模式的部分替换为第三个参数中的相应模式</li>
<li><code>patsubst</code> 函数用于将 <code>*.c</code> 替换为 <code>*.o</code>，<code>wildcard</code> 函数用于获取当前目录下所有 <code>.c</code> 文件。</li>
</ul>
<br>

<h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">VPATH = src:../headers</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Makefile</code>文件中的特殊变量 <code>VPATH</code>,当<code>make</code>就会在当前目录找不到的情况下，到所指定的目录中去找寻文件了。</li>
<li>“<code>src</code>”和“<code>../headers</code>”，make会按照这个顺序进行搜索。目录由“<code>冒号</code>”分隔。（当然，当前目录永远是最高优先搜索的地方）。</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vpath</span> &lt;pattern&gt; &lt;directories&gt;</span><br><span class="line"><span class="keyword">vpath</span> %.h ../headers</span><br></pre></td></tr></table></figure>
<ul>
<li><code>vpath</code>使用方法中的<code>&lt;pattern&gt;</code>需要包含 <code>%</code> 字符。 <code>%</code> 的意思是匹配<code>零</code>或<code>若干字符</code>，（需引用 <code>%</code> ，使用 <code>\</code> ）例如， <code>%.h</code> 表示所有以 <code>.h</code> 结尾的文件。<code>&lt;pattern&gt;</code>指定了要搜索的文件集，而<code>&lt;directories&gt;</code>则指定了<code>&lt;pattern&gt;</code>的文件集的搜索的目录。</li>
</ul>
<br>

<h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure>
<p>伪目标一般没有依赖的文件。但是，我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为“<strong>默认目标</strong>”，只要将其放在<strong>第一个</strong>。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">all : prog1 prog2 prog3</span><br><span class="line">.PHONY : all</span><br><span class="line"></span><br><span class="line">prog1 : prog1.o utils.o</span><br><span class="line">    cc -o prog1 prog1.o utils.o</span><br><span class="line"></span><br><span class="line">prog2 : prog2.o</span><br><span class="line">    cc -o prog2 prog2.o</span><br><span class="line"></span><br><span class="line">prog3 : prog3.o sort.o utils.o</span><br><span class="line">    cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Makefile</code>中的第一个目标会被作为其<strong>默认目标</strong>。我们声明了一个“<code>all</code>”的伪目标，其依赖于其它三个目标。由于默认目标的特性是，总是被执行的，但由于“<code>all</code>”又是一个伪目标，伪目标只是一个标签不会生成文件，所以不会有“<code>all</code>”文件产生。于是，其它三个目标的规则总是会被决议。也就达到了我们一口气生成多个目标的目的。</li>
<li><code>.PHONY : all</code> 声明了“<code>all</code>”这个目标为“伪目标”。（注：这里的显式“<code>.PHONY : all</code>” 不写的话一般情况也可以正确的执行，这样<code>make</code>可通过隐式规则推导出， “<code>all</code>” 是一个伪目标，执行<code>make</code>不会生成“<code>all</code>”文件，而执行后面的多个目标。建议：显式写出是一个好习惯。）</li>
</ul>
<br>

<h4 id="多目标"><a href="#多目标" class="headerlink" title="多目标"></a>多目标</h4><p><code>Makefile</code>的规则中的目标可以不止一个，其支持多目标，有可能我们的多个目标同时依赖于一个文件，并且其生成的命令大体类似。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">bigoutput littleoutput : text.g</span><br><span class="line">    generate text.g -<span class="variable">$(<span class="built_in">subst</span> output,,<span class="variable">$@</span>)</span> &gt; <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>上述规则等价于：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">bigoutput : text.g</span><br><span class="line">    generate text.g -big &gt; bigoutput</span><br><span class="line">littleoutput : text.g</span><br><span class="line">    generate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure>
<p>其中，<code>-$(subst output,,$@)</code>中的 <code>$</code> 表示执行一个<code>Makefile</code>的函数，函数名为<code>subst</code>，后面的为参数。关于函数，将在后面讲述。这里的这个函数是替换字符串的意思， <code>$@</code> 表示目标的集合，就像一个数组， <code>$@</code> 依次取出目标，并执于命令。</p>
<ul>
<li><code>$(subst from,to,text)</code><ul>
<li><code>from</code> 是您想要替换的字符串。</li>
<li><code>to</code> 是您想要替换成的新字符串。</li>
<li><code>text</code> 是原始文本。</li>
</ul>
</li>
<li><code>generate text.g -$(subst output,,$@) &gt; $@</code>中的”<code>&gt;</code>“ 是一个<code>shell</code>命令，用于将 <code>generate text.g -$(subst output,,$@)</code> 的输出重定向到右侧<code>$@</code>文件中。</li>
</ul>
<br>

<h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是先来看一下语法：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">&lt;targets ...&gt; : &lt;target-pattern&gt; : &lt;prereq-patterns ...&gt;</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>我们的“<strong>目标模式</strong>”或是“<strong>依赖模式</strong>”中都应该有 <code>%</code> 这个字符，如果你的文件名中有 <code>%</code> 那么你可以使用反斜杠 <code>\</code> 进行转义，来标明真实的 <code>%</code> 字符。看一个例子：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<ul>
<li>我们的目标从<code>$object</code>中获取</li>
<li><code>%.o</code> 表明要所有以 <code>.o</code> 结尾的目标，也就是 <code>foo.o</code> <code>bar.o</code>,也就是变量 <code>$object</code> 集合的模式</li>
<li>依赖模式 <code>%.c</code> 则取模式 <code>%.o</code> 的 <code>%</code> ，也就是 <code>foo</code> <code>bar</code> ，并为其加下 <code>.c</code> 的后缀，于是，我们的依赖目标就是 <code>foo.c</code> <code>bar.c </code></li>
<li>命令中的 <code>$&lt;</code> 和 <code>$@</code> 则是自动化变量， <code>$&lt;</code> 表示 <strong>第一个依赖文件</strong>， <code>$@</code> 表示 <strong>目标集</strong>（也就是“<code>foo.o</code> <code>bar.o</code>”）</li>
</ul>
<p>上面的规则展开后等价于下面的规则：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">foo.o : foo.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class="line">bar.o : bar.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> bar.c -o bar.o</span><br></pre></td></tr></table></figure>
<p>如果我们的 <code>%.o</code> 有几百个，使用“<strong>静态模式规则</strong>”很方便，再看一个例子：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">files = foo.elc bar.o lose.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span> %.o,<span class="variable">$(files)</span>)</span>: %.o: %.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span> %.elc,<span class="variable">$(files)</span>)</span>: %.elc: %.el</span><br><span class="line">    emacs -f batch-byte-compile <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>$(filter %.o,$(files))</code>表示调用<code>Makefile</code>的<code>filter</code>函数，过滤“<code>$files</code>”集，只要其中模式为“<code>%.o</code>”的内容。</li>
</ul>
<br>

<h4 id="自动生成依赖性"><a href="#自动生成依赖性" class="headerlink" title="自动生成依赖性"></a>自动生成依赖性</h4><p>在<code>Makefile</code>中，我们的依赖关系可能会需要包含一系列的头文件，比如，如果我们的<code>main.c</code>中有一句 <code>#include &quot;defs.h&quot;</code> ，那么我们的依赖关系应该是：</p>
<pre><code>main.o : main.c defs.h
</code></pre>
<p>但是，如果是一个比较大型的工程，你必需清楚哪些C文件包含了哪些头文件,例如，如果我们执行下面的命令:</p>
<pre><code>cc -M main.c
</code></pre>
<p>其输出是：</p>
<pre><code>main.o : main.c defs.h
</code></pre>
<p>需要提醒一句的是，如果你使用<code>GNU</code>的<code>C/C++</code>编译器，你得用 <code>-MM</code> 参数，不然，<code>-M</code> 参数会把一些 <strong>标准库的头文件也包含进来</strong>。</p>
<ul>
<li><code>gcc -M main.c</code>的输出是:<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main.o: main.c defs.h /usr/include/stdio.h /usr/include/features.h \</span></span><br><span class="line">    /usr/<span class="keyword">include</span>/sys/cdefs.h /usr/<span class="keyword">include</span>/gnu/stubs.h \</span><br><span class="line">    /usr/lib/gcc-lib/i486-suse-linux/2.95.3/<span class="keyword">include</span>/stddef.h \</span><br><span class="line">    /usr/<span class="keyword">include</span>/bits/types.h /usr/<span class="keyword">include</span>/bits/pthreadtypes.h \</span><br><span class="line">    /usr/<span class="keyword">include</span>/bits/sched.h /usr/<span class="keyword">include</span>/libio.h \</span><br><span class="line">    /usr/<span class="keyword">include</span>/_G_config.h /usr/<span class="keyword">include</span>/wchar.h \</span><br><span class="line">    /usr/<span class="keyword">include</span>/bits/wchar.h /usr/<span class="keyword">include</span>/gconv.h \</span><br><span class="line">    /usr/lib/gcc-lib/i486-suse-linux/2.95.3/<span class="keyword">include</span>/stdarg.h \</span><br><span class="line">    /usr/<span class="keyword">include</span>/bits/stdio_lim.h</span><br></pre></td></tr></table></figure></li>
<li><code>gcc -MM main.c</code>的输出则是:<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main.o: main.c defs.h</span></span><br></pre></td></tr></table></figure></li>
<li><code>GNU</code>组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个 <code>name.c</code> 的文件都生成一个 <code>name.d</code> 的<code>Makefile</code>文件， <code>.d</code> 文件中就存放对应 <code>.c</code> 文件的依赖关系。</li>
<li>我们可以写出 <code>.c</code> 文件和 <code>.d</code> 文件的依赖关系，并让<code>make</code>自动更新或生成 <code>.d</code> 文件，并把其包含在我们的主<code>Makefile</code>中，这样，我们就可以自动化地生成每个文件的依赖关系了。</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">%.d: %.c</span></span><br><span class="line">    @set -e; rm -f <span class="variable">$@</span>; \</span><br><span class="line">    <span class="variable">$(CC)</span> -M <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> &gt; <span class="variable">$@</span>.$$$$; \</span><br><span class="line">    sed &#x27;s,\(<span class="variable">$*</span>\)\.o[ :]*,\1.o <span class="variable">$@</span> : ,g&#x27; &lt; <span class="variable">$@</span>.$$$$ &gt; <span class="variable">$@</span>; \</span><br><span class="line">    rm -f <span class="variable">$@</span>.$$$$</span><br></pre></td></tr></table></figure>
<ul>
<li>规则的意思是，所有的 <code>.d</code> 文件依赖于 <code>.c</code> 文件</li>
<li><code>rm -f $@</code> 的意思是删除所有的目标，也就是 <code>.d</code> 文件</li>
<li>第二行的意思是，为每个依赖文件 <code>$&lt;</code> ，也就是 <code>.c</code> 文件生成依赖文件， <code>$@</code> 表示模式 <code>%.d</code> 文件，如果有一个<code>C</code>文件是<code>name.c</code>，那么 <code>%</code> 就是 <code>name</code> ， <code>$$$$</code> 意为一个随机编号，第二行生成的文件有可能是“<code>name.d.12345</code>”</li>
<li>第三行使用<code>sed</code>命令做了一个替换，关于<code>sed</code>命令的用法请参看相关的使用文档</li>
<li>第四行就是删除临时文件</li>
</ul>
<p>总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入 <code>.d</code> 文件的依赖，即把依赖关系：</p>
<pre><code>main.o : main.c defs.h
</code></pre>
<p>转成：</p>
<pre><code>main.o main.d : main.c defs.h
</code></pre>
<p>于是，我们的 <code>.d</code> 文件也会自动更新了，并会自动生成了, 你还可以在这个 <code>.d</code> 文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个 <code>.d</code> 文件都包含一个完整的规则, 例如：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">sources = foo.c bar.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> $(sources:.c=.d)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>$(sources:.c=.d)</code> 中的 <code>.c=.d</code> 的意思是做一个替换，把变量 <code>$(sources)</code> 所有 <code>.c</code> 的字串都替换成 <code>.d</code></li>
<li>因为<code>include</code>是按次序来载入文件，最先载入的 <code>.d</code> 文件中的目标会成为默认目标。</li>
</ul>
<br>

<h3 id="书写命令"><a href="#书写命令" class="headerlink" title="书写命令"></a>书写命令</h3><h4 id="显示命令"><a href="#显示命令" class="headerlink" title="显示命令"></a>显示命令</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">@echo 正在编译XXX模块......</span><br></pre></td></tr></table></figure>
<p>当<code>make</code>执行时，会输出“正在编译XXX模块……”字串，但不会输出命令，如果没有“<code>@</code>”，那么，<code>make</code>将输出:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">echo 正在编译XXX模块......		//输出命令</span><br><span class="line">正在编译XXX模块......</span><br></pre></td></tr></table></figure>
<ul>
<li>如果<code>make</code>执行时，带入<code>make</code>参数 <code>-n</code> 或 <code>--just-print</code> ，那么其只是显示命令，但不会执行命令。</li>
<li><code>make</code>参数 <code>-s</code> 或 <code>--silent</code> 或 <code>--quiet</code> 则是全面禁止命令的显示。</li>
</ul>
<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>当依赖目标新于目标时，也就是当规则的目标需要被更新时，make会一条一条的执行其后的命令。如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。比如你的第一条命令是<code>cd</code>命令，你希望第二条命令得在<code>cd</code>之后的基础上运行，那么你就不能把这两条命令写在两行上，而应该把这两条命令写在一行上，用分号分隔。</p>
<ul>
<li>示例一：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">exec:</span></span><br><span class="line">    cd /home/hchen</span><br><span class="line">    pwd</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">exec:</span></span><br><span class="line">    cd /home/hchen; pwd</span><br></pre></td></tr></table></figure>
<p>当我们执行 <code>make exec</code> 时，第一个例子中的<code>cd</code>没有作用，<code>pwd</code>会打印出当前的<code>Makefile</code>目录，而第二个例子中，<code>cd</code>就起作用了，<code>pwd</code>会打印出“<code>/home/hchen</code>”。</p>
<h4 id="命令出错"><a href="#命令出错" class="headerlink" title="命令出错"></a>命令出错</h4><p>忽略命令的出错，我们可以在<code>Makefile</code>的命令行前加一个减号 <code>-</code> （在<code>Tab</code>键之后），标记为不管命令出不出错都认为是成功的。如：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    -rm -f *.o</span><br></pre></td></tr></table></figure>
<ul>
<li>还有一个全局的办法是，给<code>make</code>加上 <code>-i</code> 或是 <code>--ignore-errors</code> 参数，那么，<code>Makefile</code>中所有命令都会忽略错误。如果一个规则是以 <code>.IGNORE</code> 作为目标的，那么这个规则中的所有命令将会忽略错误。</li>
<li>还有一个要提一下的<code>make</code>的参数的是 <code>-k</code> 或是 <code>--keep-going </code>，这个参数的意思是，如果某规则中的命令出错了，那么就 <strong>终止该规则</strong> 的执行，但 <strong>继续执行其它规则</strong>。</li>
</ul>
<h4 id="嵌套执行make"><a href="#嵌套执行make" class="headerlink" title="嵌套执行make"></a>嵌套执行make</h4><p>在一些大的工程中，我们会把我们不同模块或是不同功能的源文件放在不同的目录中，我们可以在每个目录中都书写一个该目录的<code>Makefile</code></p>
<p>例如，我们有一个子目录叫<code>subdir</code>，这个目录下有个<code>Makefile</code>文件，来指明了这个目录下文件的编译规则。那么我们总控的<code>Makefile</code>可以这样书写：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">subsystem:</span></span><br><span class="line">    cd subdir &amp;&amp; <span class="variable">$(MAKE)</span></span><br></pre></td></tr></table></figure>
<p>其等价于：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">subsystem:</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C subdir</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>Makefile</code>的<code>-C</code>选项，可以指定编译目录，<code>-f</code>选项可以指定编译文件。</p>
</li>
<li><p>定义<code>$(MAKE)</code>宏变量的意思是，也许我们的<code>make</code>需要一些参数，所以定义成一个变量比较利于维护。这两个例子的意思都是先进入“<code>subdir</code>”目录，然后执行<code>make</code>命令。</p>
</li>
<li><p>我们把这个<code>Makefile</code>叫做“<code>总控Makefile</code>”，<code>总控Makefile</code>的<strong>变量</strong>可以传递到<code>下级的Makefile</code>中（如果你显示的声明），但是<strong>不会覆盖</strong>下层的<code>Makefile</code>中所定义的变量，除非指定了 <code>-e</code> 参数。</p>
</li>
<li><p>如果你要传递变量到下级<code>Makefile</code>中，那么你可以使用这样的声明: <code>export &lt;variable ...&gt;;</code></p>
</li>
<li><p>如果你不想让某些变量传递到下级<code>Makefile</code>中，那么你可以这样声明: <code>unexport &lt;variable ...&gt;;</code></p>
</li>
<li><p>如果你要传递所有的变量，那么，只要一个<code>export</code>就行了。后面什么也不用跟，表示传递所有的变量。<br>示例一：</p>
<p>  export variable &#x3D; value<br>  &#x2F;&#x2F; 其等价于：<br>  variable &#x3D; value<br>  export variable<br>  &#x2F;&#x2F; 其等价于：<br>  export variable :&#x3D; value<br>  &#x2F;&#x2F; 其等价于：<br>  variable :&#x3D; value<br>  export variable</p>
</li>
</ul>
<p>示例二：</p>
<pre><code>export variable += value
// 其等价于：
variable += value
export variable
</code></pre>
<ul>
<li>需要注意的是，有两个变量，一个是 <code>SHELL</code> ，一个是 <code>MAKEFLAGS</code> ，这两个变量不管你是否<code>export</code>，其总是要 <strong>传递到下层</strong> <code>Makefile</code>中，特别是 <code>MAKEFLAGS</code> 变量，其中包含了<code>make</code>的 <strong>参数信息</strong>，如果我们执行“<code>总控Makefile</code>”时有<code>make</code>参数或是在上层 <code>Makefile</code>中定义了这个变量，那么 <code>MAKEFLAGS</code> 变量将会是这些参数，并会传递到下层<code>Makefile</code>中，这是一个系统级的环境变量。</li>
<li>但是<code>make</code>命令中的有几个参数并不往下传递，它们是 <code>-C</code> , <code>-f</code> , <code>-h</code>, <code>-o</code> 和 <code>-W</code> （有关<code>Makefile</code>参数的细节将在后面说明），如果你不想往下层传递参数，那么，你可以这样来：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">subsystem:</span></span><br><span class="line">cd subdir &amp;&amp; <span class="variable">$(MAKE)</span> MAKEFLAGS=</span><br></pre></td></tr></table></figure></li>
<li>如果你定义了环境变量 <code>MAKEFLAGS</code> ，那么你得确信其中的选项是大家都会用到的，如果其中有 <code>-t</code> , <code>-n</code> 和 <code>-q</code> 参数，那么将会有让你意想不到的结果，或许会让你异常地恐慌。</li>
<li>还有一个在“<strong>嵌套执行</strong>”中比较有用的参数， <code>-w</code> 或是 <code>--print-directory</code> 会在<code>make</code>的过程中输出一些信息，让你看到目前的工作目录。比如，如果我们的下级<code>make</code>目录是“<code>/home/hchen/gnu/make</code>”，如果我们使用 <code>make -w</code> 来执行，那么当进入该目录时，我们会看到:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make: Entering directory `/home/hchen/gnu/make&#x27;.</span><br></pre></td></tr></table></figure>
而在完成下层make后离开目录时，我们会看到:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make: Leaving directory `/home/hchen/gnu/make&#x27;</span><br></pre></td></tr></table></figure></li>
<li>当你使用 <code>-C</code> 参数来指定<code>make</code>下层<code>Makefile</code>时， <code>-w</code> 会被自动打开的。如果参数中有 <code>-s</code> （ <code>--slient</code> ）或是 <code>--no-print-directory</code> ，那么， <code>-w</code> 总是失效的。</li>
</ul>
<br>

<h4 id="定义命令包"><a href="#定义命令包" class="headerlink" title="定义命令包"></a>定义命令包</h4><p>如果Makefile中出现一些相同命令序列，那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以 <code>define</code> 开始，以 <code>endef</code> 结束，如:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">define</span> run-yacc</span><br><span class="line">yacc <span class="variable">$(<span class="built_in">firstword</span> <span class="variable">$^</span>)</span></span><br><span class="line">mv y.tab.c <span class="variable">$@</span></span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里，“run-yacc”是这个命令包的名字，其不要和Makefile中的变量重名。在 define 和 endef 中的两行就是命令序列。这个命令包中的第一个命令是运行Yacc程序，因为Yacc程序总是生成“y.tab.c”的文件，所以第二行的命令就是把这个文件改改名字。还是把这个命令包放到一个示例中来看看吧。</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">foo.c : foo.y</span><br><span class="line">    $(run-yacc)</span><br></pre></td></tr></table></figure>
<p>我们可以看见，要使用这个命令包，我们就好像使用变量一样。在这个命令包的使用中，命令包“<code>run-yacc</code>”中的 <code>$^</code> 就是 <code>foo.y</code> ， <code>$@</code> 就是 <code>foo.c</code> （有关这种以 <code>$</code> 开头的特殊变量，我们会在后面介绍），<code>make</code>在执行命令包时，命令包中的每个命令会被依次独立执行。</p>
<br>

<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><h4 id="函数的调用语法"><a href="#函数的调用语法" class="headerlink" title="函数的调用语法"></a>函数的调用语法</h4><p>函数调用，很像变量的使用，也是以 <code>$</code> 来标识的，其语法如下：</p>
<pre><code>$(&lt;function&gt; &lt;arguments&gt;)    
// 或者
$&#123;&lt;function&gt; &lt;arguments&gt;&#125;
</code></pre>
<h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><h5 id="subst"><a href="#subst" class="headerlink" title="subst"></a>subst</h5><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">subst</span> &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>名称：字符串替换函数</li>
<li>功能：把字串 <code>&lt;text&gt;</code> 中的 <code>&lt;from&gt;</code> 字符串替换成 <code>&lt;to&gt;</code> 。</li>
<li>返回：函数返回被替换过后的字符串。</li>
</ul>
<h5 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h5><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>名称：<strong>模式</strong> 字符串替换函数。</li>
<li>功能：查找 <code>&lt;text&gt;</code> 中的单词（单词以“<strong>空格</strong>”、“<strong>Tab</strong>”或“<strong>回车</strong>”“<strong>换行</strong>”分隔）是否符合模式 <code>&lt;pattern&gt;</code> ，如果匹配的话，则以 <code>&lt;replacement&gt;</code> 替换。这里， <code>&lt;pattern&gt;</code> 可以包括通配符 <code>%</code> ，表示任意长度的字串。如果 <code>&lt;replacement&gt;</code> 中也包含 <code>%</code> ，那么， <code>&lt;replacement&gt;</code> 中的这个 <code>%</code> 将是 <code>&lt;pattern&gt;</code> 中的那个 % 所代表的字串。（可以用 <code>\</code> 来转义，以 <code>\%</code> 来表示真实含义的 <code>%</code> 字符）</li>
<li>返回：函数返回被替换过后的字符串。</li>
<li>示例：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,x.c.c bar.c)</span></span><br></pre></td></tr></table></figure>
把字串 <code>x.c.c</code> <code>bar.c</code> 符合模式 <code>%.c</code> 的单词替换成 <code>%.o</code> ，返回结果是 <code>x.c.o</code> <code>bar.o</code></li>
</ul>
<h5 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h5><pre><code>$(strip &lt;string&gt;)
</code></pre>
<ul>
<li>名称：去空格函数。</li>
<li>功能：去掉 <code>&lt;string&gt;</code> 字串中开头和结尾的空字符。</li>
<li>返回：返回被去掉空格的字符串值。</li>
<li>示例：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">strip</span> a b c )</span></span><br></pre></td></tr></table></figure>
把字串<code>a b c</code> 去掉开头和结尾的空格，结果是 <code>a b c</code>。</li>
</ul>
<h5 id="findstring"><a href="#findstring" class="headerlink" title="findstring"></a>findstring</h5><pre><code>$(findstring &lt;find&gt;,&lt;in&gt;)
</code></pre>
<ul>
<li>名称：查找字符串函数</li>
<li>功能：在字串 <in> 中查找 <find> 字串。</li>
<li>返回：如果找到，那么返回 <find> ，否则返回空字符串。</li>
<li>示例：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">findstring</span> a,a b c)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">findstring</span> a,b c)</span></span><br></pre></td></tr></table></figure>
第一个函数返回 <code>a</code> 字符串，第二个返回<code>空</code>字符串</li>
</ul>
<h5 id="混合总结"><a href="#混合总结" class="headerlink" title="混合总结"></a>混合总结</h5><pre><code>override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
</code></pre>
<p>如果我们的 <code>$(VPATH)</code> 值是 <code>src:../headers </code>，那么 <code>$(patsubst %,-I%,$(subst :, ,$(VPATH)))</code> 将返回 <code>-Isrc -I../headers</code> ，这正是<code>cc</code>或<code>gcc</code>搜索头文件路径的参数。</p>
<p><strong>注</strong>：函数太多，不做概述。详见：<a href="https://seisman.github.io/how-to-write-makefile/functions.html">https://seisman.github.io/how-to-write-makefile/functions.html</a><br><strong>例程</strong>：<a href="https://github.com/XUAN9527/linux_test/tree/main/make_demo">https://github.com/XUAN9527/linux_test/tree/main/make_demo</a></p>
<br>

<h2 id="Makefile搭配Kconfig使用"><a href="#Makefile搭配Kconfig使用" class="headerlink" title="Makefile搭配Kconfig使用"></a>Makefile搭配Kconfig使用</h2><p>话不多说，我们一般使用<code>menuconfig</code>+<code>Kconfig</code>的方式进行版本配置，这里简单的笔记一个<code>Python</code>解析器版本的实现<code>Kconfiglib</code>。<br>[参考链接1]：<a href="https://cstriker1407.info/blog/kconfiglib-simple-note/">https://cstriker1407.info/blog/kconfiglib-simple-note/</a><br>[参考链接2]：<a href="https://juejin.cn/post/7101836149915648030">https://juejin.cn/post/7101836149915648030</a></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>安装必须组件：<code>Python3</code> + <code>kconfiglib</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">pip3 install kconfiglib</span><br></pre></td></tr></table></figure>

<ul>
<li>验证安装:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 --version</span></span><br><span class="line">Python 3.10.14</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 show kconfiglib</span></span><br><span class="line">Name: kconfiglib</span><br><span class="line">Version: 14.1.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><ul>
<li><p>在跟目录下创建<code>Kconfig</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mainmenu &quot;N32l40x 128K MCU, Flash Configuration&quot;</span><br><span class="line">config SPI_FLASH_ENABLE</span><br><span class="line">  bool &quot;spi flash enable&quot;</span><br><span class="line">  default n</span><br><span class="line">  help </span><br><span class="line">  config spi flash enable/disable</span><br><span class="line"></span><br><span class="line">menu &quot;Internal Flash Configuration&quot;</span><br><span class="line">depends on !SPI_FLASH_ENABLE</span><br><span class="line">config INTER_BOOTLOAD_FIRMWARE_SIZE</span><br><span class="line">    int &quot;bootloader fireware size (K)&quot;</span><br><span class="line">    range 10 32</span><br><span class="line">    default 10</span><br><span class="line">    help</span><br><span class="line">    config bootloader fireware size</span><br><span class="line"></span><br><span class="line">config INTER_FACTORY_FIRMWARE_SIZE</span><br><span class="line">    int &quot;factory fireware size (K)&quot;</span><br><span class="line">    range 56 96</span><br><span class="line">    default 56</span><br><span class="line">    help</span><br><span class="line">    config factory fireware size 56K/96K</span><br><span class="line"></span><br><span class="line">config INTER_APPLICATION_FIRMWARE_SIZE</span><br><span class="line">    int &quot;application fireware size (K)&quot;</span><br><span class="line">    range 56 96</span><br><span class="line">    default 56</span><br><span class="line">    help</span><br><span class="line">    config application fireware size 56K/96K</span><br><span class="line"></span><br><span class="line">config INTER_DOWNLOAD_AREA_SIZE</span><br><span class="line">    int &quot;download fireware size (K)&quot;</span><br><span class="line">    range 56 96</span><br><span class="line">    default 56</span><br><span class="line">    help</span><br><span class="line">    config download area size 56K/96K</span><br><span class="line"></span><br><span class="line">config INTER_UPGRADE_DATA_SIZE</span><br><span class="line">    int &quot;upgrade data size (K)&quot;</span><br><span class="line">    range 2 4</span><br><span class="line">    default 2</span><br><span class="line">    help</span><br><span class="line">    config upgrade data size 2K/4K</span><br><span class="line"></span><br><span class="line">config INTER_DCD_DATA_SIZE</span><br><span class="line">    int &quot;dcd data size (K)&quot;</span><br><span class="line">    range 2 4</span><br><span class="line">    default 2</span><br><span class="line">    help</span><br><span class="line">    config dcd data size 2K/4K</span><br><span class="line"></span><br><span class="line">config INTER_USER_DATA_SIZE</span><br><span class="line">    int &quot;user data size (K)&quot;</span><br><span class="line">    range 2 408</span><br><span class="line">    default 2</span><br><span class="line">    help</span><br><span class="line">    config user data size 2K/408K; 2k - inter flash; 408K - outerflash</span><br><span class="line">endmenu</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>shell</code>执行<code>menuconfig</code>指令：</p>
</li>
</ul>
<p><img src="/../pictures/menuconfig.png" alt="menuconfig"><br><img src="/../pictures/menusubconfig.png" alt="menusubconfig"></p>
<ul>
<li>选择好需要的参数后，保存退出，生成<code>.config</code>配置文件。</li>
<li><code>shell</code>执行<code>genconfig</code>指令，将<code>.config</code>文件生成<code>config.h</code>文件，可供程序调用。</li>
<li>如需搭配<code>makefile</code>使用，则需要将<code>config.h</code>文件添加到<code>Makefile</code>中,添加以下依赖规则。<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">all: genconfig ...</span></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="section">menuconfig:</span></span><br><span class="line">	menuconfig</span><br><span class="line">	@echo <span class="string">&quot;menuconfig running!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">genconfig:</span></span><br><span class="line">	genconfig</span><br><span class="line">	@echo <span class="string">&quot;genconfig .config &gt; config.h complete!&quot;</span></span><br></pre></td></tr></table></figure>
执行<code>make menuconfig</code>进行配置，<code>make</code>编译生成即可。</li>
</ul>
]]></content>
      <categories>
        <category>编译工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Cotex-M4启动详解</title>
    <url>/2024/05/29/Cotex-M4%E5%90%AF%E5%8A%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h2><p><code>startup_n32l40x_gcc.s</code> 文件为例，以下是源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  ****************************************************************************</span><br><span class="line">  Copyright (c) 2019, Nations Technologies Inc.</span><br><span class="line"></span><br><span class="line">  All rights reserved.</span><br><span class="line">  ****************************************************************************</span><br><span class="line"></span><br><span class="line">  Redistribution and use in source and binary forms, with or without</span><br><span class="line">  modification, are permitted provided that the following conditions are met:</span><br><span class="line"></span><br><span class="line">  - Redistributions of source code must retain the above copyright notice,</span><br><span class="line">  this list of conditions and the disclaimer below.</span><br><span class="line"></span><br><span class="line">  Nations&#x27; name may not be used to endorse or promote products derived from</span><br><span class="line">  this software without specific prior written permission.</span><br><span class="line"></span><br><span class="line">  DISCLAIMER: THIS SOFTWARE IS PROVIDED BY NATIONS &quot;AS IS&quot; AND ANY EXPRESS OR</span><br><span class="line">  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF</span><br><span class="line">  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE</span><br><span class="line">  DISCLAIMED. IN NO EVENT SHALL NATIONS BE LIABLE FOR ANY DIRECT, INDIRECT,</span><br><span class="line">  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span><br><span class="line">  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,</span><br><span class="line">  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</span><br><span class="line">  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</span><br><span class="line">  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,</span><br><span class="line">  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line">  ****************************************************************************</span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">* Amount of memory (in bytes) allocated for Stack</span><br><span class="line">* Tailor this value to your application needs</span><br><span class="line">* &lt;h&gt; Stack Configuration</span><br><span class="line">*   &lt;o&gt; Stack Size (in Bytes) &lt;0x0-0xFFFFFFFF:8&gt;</span><br><span class="line">* &lt;/h&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">******************************************************************************</span><br><span class="line">* @file      startup_n32l40x_gcc.s</span><br><span class="line">******************************************************************************</span><br><span class="line">*/</span><br><span class="line">    </span><br><span class="line">  .syntax unified</span><br><span class="line">  .cpu cortex-m4</span><br><span class="line">  .fpu softvfp</span><br><span class="line">  .thumb</span><br><span class="line"></span><br><span class="line">.global  g_pfnVectors</span><br><span class="line">.global  Default_Handler</span><br><span class="line"></span><br><span class="line">/* start address for the initialization values of the .data section. </span><br><span class="line">defined in linker script */</span><br><span class="line">.word  _sidata</span><br><span class="line">/* start address for the .data section. defined in linker script */  </span><br><span class="line">.word  _sdata</span><br><span class="line">/* end address for the .data section. defined in linker script */</span><br><span class="line">.word  _edata</span><br><span class="line">/* start address for the .bss section. defined in linker script */</span><br><span class="line">.word  _sbss</span><br><span class="line">/* end address for the .bss section. defined in linker script */</span><br><span class="line">.word  _ebss</span><br><span class="line">/* stack used for SystemInit_ExtMemCtl; always internal RAM used */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief  This is the code that gets called when the processor first</span><br><span class="line"> *          starts execution following a reset event. Only the absolutely</span><br><span class="line"> *          necessary set is performed, after which the application</span><br><span class="line"> *          supplied main() routine is called. </span><br><span class="line"> * @param  None</span><br><span class="line"> * @retval : None</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">  .section  .text.Reset_Handler</span><br><span class="line">  .weak  Reset_Handler</span><br><span class="line">  .type  Reset_Handler, %function</span><br><span class="line">  Reset_Handler:  </span><br><span class="line"></span><br><span class="line">/* Copy the data segment initializers from flash to SRAM */  </span><br><span class="line">  movs  r1, #0</span><br><span class="line">  b  LoopCopyDataInit</span><br><span class="line"></span><br><span class="line">CopyDataInit:</span><br><span class="line">  ldr  r3, =_sidata</span><br><span class="line">  ldr  r3, [r3, r1]</span><br><span class="line">  str  r3, [r0, r1]</span><br><span class="line">  adds  r1, r1, #4</span><br><span class="line">    </span><br><span class="line">LoopCopyDataInit:</span><br><span class="line">  ldr  r0, =_sdata</span><br><span class="line">  ldr  r3, =_edata</span><br><span class="line">  adds  r2, r0, r1</span><br><span class="line">  cmp  r2, r3</span><br><span class="line">  bcc  CopyDataInit</span><br><span class="line">  ldr  r2, =_sbss</span><br><span class="line">  b  LoopFillZerobss</span><br><span class="line">/* Zero fill the bss segment. */  </span><br><span class="line">FillZerobss:</span><br><span class="line">  movs  r3, #0</span><br><span class="line">  str  r3, [r2], #4</span><br><span class="line">    </span><br><span class="line">LoopFillZerobss:</span><br><span class="line">  ldr  r3, = _ebss</span><br><span class="line">  cmp  r2, r3</span><br><span class="line">  bcc  FillZerobss</span><br><span class="line"></span><br><span class="line">/* Call the clock system intitialization function.*/</span><br><span class="line">  bl  SystemInit   </span><br><span class="line">/* Call static constructors */</span><br><span class="line">  bl __libc_init_array</span><br><span class="line">/* Call the application&#x27;s entry point.*/</span><br><span class="line">  bl  main</span><br><span class="line">  bx  lr    </span><br><span class="line">.size  Reset_Handler, .-Reset_Handler</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief  This is the code that gets called when the processor receives an </span><br><span class="line"> *         unexpected interrupt.  This simply enters an infinite loop, preserving</span><br><span class="line"> *         the system state for examination by a debugger.</span><br><span class="line"> * @param  None     </span><br><span class="line"> * @retval None       </span><br><span class="line">*/</span><br><span class="line">    .section  .text.Default_Handler,&quot;ax&quot;,%progbits</span><br><span class="line">Default_Handler:</span><br><span class="line">Infinite_Loop:</span><br><span class="line">  b  Infinite_Loop</span><br><span class="line">  .size  Default_Handler, .-Default_Handler</span><br><span class="line">/******************************************************************************</span><br><span class="line">*</span><br><span class="line">* The minimal vector table for a Cortex M3. Note that the proper constructs</span><br><span class="line">* must be placed on this to ensure that it ends up at physical address</span><br><span class="line">* 0x0000.0000.</span><br><span class="line">* </span><br><span class="line">*******************************************************************************/</span><br><span class="line">   .section  .isr_vector,&quot;a&quot;,%progbits</span><br><span class="line">  .type  g_pfnVectors, %object</span><br><span class="line">  .size  g_pfnVectors, .-g_pfnVectors</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">g_pfnVectors:</span><br><span class="line">  .word  _estack</span><br><span class="line">  .word  Reset_Handler</span><br><span class="line">  .word  NMI_Handler</span><br><span class="line">  .word  HardFault_Handler</span><br><span class="line">  .word  MemManage_Handler</span><br><span class="line">  .word  BusFault_Handler</span><br><span class="line">  .word  UsageFault_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  SVC_Handler</span><br><span class="line">  .word  DebugMon_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  PendSV_Handler</span><br><span class="line">  .word  SysTick_Handler</span><br><span class="line">  </span><br><span class="line">  /* External Interrupts */</span><br><span class="line">  .word     WWDG_IRQHandler                     /* Window WatchDog                      */                                        </span><br><span class="line">  .word     PVD_IRQHandler                      /* PVD through EXTI Line detection      */                        </span><br><span class="line">  .word     TAMPER_IRQHandler                   /* Tamper                               */            </span><br><span class="line">  .word     RTC_WKUP_IRQHandler                 /* RTC Wakeup                           */                      </span><br><span class="line">  .word     FLASH_IRQHandler                    /* FLASH                                */                                          </span><br><span class="line">  .word     RCC_IRQHandler                      /* RCC                                  */                                            </span><br><span class="line">  .word     EXTI0_IRQHandler                    /* EXTI Line0                           */                        </span><br><span class="line">  .word     EXTI1_IRQHandler                    /* EXTI Line1                           */                          </span><br><span class="line">  .word     EXTI2_IRQHandler                    /* EXTI Line2                           */                          </span><br><span class="line">  .word     EXTI3_IRQHandler                    /* EXTI Line3                           */                          </span><br><span class="line">  .word     EXTI4_IRQHandler                    /* EXTI Line4                           */                          </span><br><span class="line">  .word     DMA_Channel1_IRQHandler            /* DMA1 Channel 1                       */                  </span><br><span class="line">  .word     DMA_Channel2_IRQHandler            /* DMA1 Channel 2                       */                   </span><br><span class="line">  .word     DMA_Channel3_IRQHandler            /* DMA1 Channel 3                       */                   </span><br><span class="line">  .word     DMA_Channel4_IRQHandler            /* DMA1 Channel 4                       */                   </span><br><span class="line">  .word     DMA_Channel5_IRQHandler            /* DMA1 Channel 5                       */                   </span><br><span class="line">  .word     DMA_Channel6_IRQHandler            /* DMA1 Channel 6                       */                   </span><br><span class="line">  .word     DMA_Channel7_IRQHandler            /* DMA1 Channel 7                       */       </span><br><span class="line">  .word     DMA_Channel8_IRQHandler             /* DMA1 Channel 8                       */ </span><br><span class="line">  .word     ADC_IRQHandler                      /* ADC                                  */                   </span><br><span class="line">  .word     USB_HP_IRQHandler                   /* USB High Priority                    */                         </span><br><span class="line">  .word     USB_LP_IRQHandler                   /* USB Low  Priority                    */                          </span><br><span class="line">  .word     COMP_1_2_IRQHandler                 /* COMP1 &amp; COMP2 through EXTI line 21/22    */                          </span><br><span class="line">  .word     EXTI9_5_IRQHandler                  /* EXTI Line 9..5                       */                          </span><br><span class="line">  .word     TIM1_BRK_IRQHandler                 /* TIM1 Break                           */</span><br><span class="line">  .word     TIM1_UP_IRQHandler                  /* TIM1 Update                          */         </span><br><span class="line">  .word     TIM1_TRG_COM_IRQHandler             /* TIM1 Trigger and Commutation         */</span><br><span class="line">  .word     TIM1_CC_IRQHandler                  /* TIM1 Capture Compare                 */                          </span><br><span class="line">  .word     TIM2_IRQHandler                     /* TIM2                                 */                   </span><br><span class="line">  .word     TIM3_IRQHandler                     /* TIM3                                 */                   </span><br><span class="line">  .word     TIM4_IRQHandler                     /* TIM4                                 */                   </span><br><span class="line">  .word     I2C1_EV_IRQHandler                  /* I2C1 Event                           */                          </span><br><span class="line">  .word     I2C1_ER_IRQHandler                  /* I2C1 Error                           */                          </span><br><span class="line">  .word     I2C2_EV_IRQHandler                  /* I2C2 Event                           */                          </span><br><span class="line">  .word     I2C2_ER_IRQHandler                  /* I2C2 Error                           */                            </span><br><span class="line">  .word     SPI1_IRQHandler                     /* SPI1                                 */                   </span><br><span class="line">  .word     SPI2_IRQHandler                     /* SPI2                                 */                   </span><br><span class="line">  .word     USART1_IRQHandler                   /* USART1                               */                   </span><br><span class="line">  .word     USART2_IRQHandler                   /* USART2                               */                   </span><br><span class="line">  .word     USART3_IRQHandler                   /* USART3                               */                   </span><br><span class="line">  .word     EXTI15_10_IRQHandler                /* EXTI Line 15..10                     */                          </span><br><span class="line">  .word     RTCAlarm_IRQHandler                 /* RTC Alarm through EXTI Line          */                 </span><br><span class="line">  .word     USBWakeUp_IRQHandler                /* USB Wakeup from suspend              */                       </span><br><span class="line">  .word     TIM8_BRK_IRQHandler                 /* TIM8 Break                           */         </span><br><span class="line">  .word     TIM8_UP_IRQHandler                  /* TIM8 Update                          */         </span><br><span class="line">  .word     TIM8_TRG_COM_IRQHandler             /* TIM8 Trigger and Commutation         */</span><br><span class="line">  .word     TIM8_CC_IRQHandler                  /* TIM8 Capture Compare                 */                          </span><br><span class="line">  .word     UART4_IRQHandler                    /* UART4                                */                   </span><br><span class="line">  .word     UART5_IRQHandler                    /* UART5                                */       </span><br><span class="line">  .word     LPUART_IRQHandler                   /* LPUART                               */</span><br><span class="line">  .word     TIM5_IRQHandler                     /* TIM5                                 */   </span><br><span class="line">  .word     TIM6_IRQHandler                     /* TIM6                                 */                   </span><br><span class="line">  .word     TIM7_IRQHandler                     /* TIM7                                 */</span><br><span class="line">  .word     CAN_TX_IRQHandler                   /* CAN TX                               */                          </span><br><span class="line">  .word     CAN_RX0_IRQHandler                  /* CAN RX0                              */                          </span><br><span class="line">  .word     CAN_RX1_IRQHandler                  /* CAN RX1                              */                          </span><br><span class="line">  .word     CAN_SCE_IRQHandler                  /* CAN SCE                              */                          </span><br><span class="line">  .word     LPUART_WKUP_IRQHandler              /* LPUART_WKUP                          */                   </span><br><span class="line">  .word     LPTIM_WKUP_IRQHandler               /* LPTIM_WKUP                           */                   </span><br><span class="line">  .word     LCD_IRQHandler                      /* LCD                                  */                   </span><br><span class="line">  .word     SAC_IRQHandler                      /* SAC                                  */                   </span><br><span class="line">  .word     MMU_IRQHandler                      /* MMU                                  */</span><br><span class="line">  .word     TSC_IRQHandler                      /* TSC                                  */</span><br><span class="line">  .word     RAMC_PERR_IRQHandler                /* RAMC ERR                             */</span><br><span class="line">  .word     TIM9_IRQHandler                     /* TIM9                                 */</span><br><span class="line">  .word     UCDR_IRQHandler                     /* UCDR ERR                             */</span><br><span class="line"></span><br><span class="line">/*******************************************************************************</span><br><span class="line">*</span><br><span class="line">* Provide weak aliases for each Exception handler to the Default_Handler. </span><br><span class="line">* As they are weak aliases, any function with the same name will override </span><br><span class="line">* this definition.</span><br><span class="line">* </span><br><span class="line">*******************************************************************************/</span><br><span class="line">   .weak      NMI_Handler</span><br><span class="line">   .thumb_set NMI_Handler,Default_Handler</span><br><span class="line">  </span><br><span class="line">   .weak      HardFault_Handler</span><br><span class="line">   .thumb_set HardFault_Handler,Default_Handler</span><br><span class="line">  </span><br><span class="line">   .weak      MemManage_Handler</span><br><span class="line">   .thumb_set MemManage_Handler,Default_Handler</span><br><span class="line">  </span><br><span class="line">   .weak      BusFault_Handler</span><br><span class="line">   .thumb_set BusFault_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      UsageFault_Handler</span><br><span class="line">   .thumb_set UsageFault_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      SVC_Handler</span><br><span class="line">   .thumb_set SVC_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      DebugMon_Handler</span><br><span class="line">   .thumb_set DebugMon_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      PendSV_Handler</span><br><span class="line">   .thumb_set PendSV_Handler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      SysTick_Handler</span><br><span class="line">   .thumb_set SysTick_Handler,Default_Handler              </span><br><span class="line">  </span><br><span class="line">   .weak      WWDG_IRQHandler                   </span><br><span class="line">   .thumb_set WWDG_IRQHandler,Default_Handler      </span><br><span class="line">                  </span><br><span class="line">   .weak      PVD_IRQHandler      </span><br><span class="line">   .thumb_set PVD_IRQHandler,Default_Handler</span><br><span class="line">               </span><br><span class="line">   .weak      TAMPER_IRQHandler            </span><br><span class="line">   .thumb_set TAMPER_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      RTC_WKUP_IRQHandler                  </span><br><span class="line">   .thumb_set RTC_WKUP_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      FLASH_IRQHandler         </span><br><span class="line">   .thumb_set FLASH_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      RCC_IRQHandler      </span><br><span class="line">   .thumb_set RCC_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      EXTI0_IRQHandler         </span><br><span class="line">   .thumb_set EXTI0_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      EXTI1_IRQHandler         </span><br><span class="line">   .thumb_set EXTI1_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      EXTI2_IRQHandler         </span><br><span class="line">   .thumb_set EXTI2_IRQHandler,Default_Handler </span><br><span class="line">                 </span><br><span class="line">   .weak      EXTI3_IRQHandler         </span><br><span class="line">   .thumb_set EXTI3_IRQHandler,Default_Handler</span><br><span class="line">                        </span><br><span class="line">   .weak      EXTI4_IRQHandler         </span><br><span class="line">   .thumb_set EXTI4_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      DMA_Channel1_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel1_IRQHandler,Default_Handler</span><br><span class="line">         </span><br><span class="line">   .weak      DMA_Channel2_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel2_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      DMA_Channel3_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel3_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      DMA_Channel4_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel4_IRQHandler,Default_Handler </span><br><span class="line">                 </span><br><span class="line">   .weak      DMA_Channel5_IRQHandler              </span><br><span class="line">   .thumb_set DMA_Channel5_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      DMA_Channel6_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel6_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      DMA_Channel7_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel7_IRQHandler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      DMA_Channel8_IRQHandler               </span><br><span class="line">   .thumb_set DMA_Channel8_IRQHandler,Default_Handler</span><br><span class="line">   </span><br><span class="line">   .weak      ADC_IRQHandler      </span><br><span class="line">   .thumb_set ADC_IRQHandler,Default_Handler</span><br><span class="line">               </span><br><span class="line">   .weak      USB_HP_IRQHandler   </span><br><span class="line">   .thumb_set USB_HP_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      USB_LP_IRQHandler                  </span><br><span class="line">   .thumb_set USB_LP_IRQHandler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      COMP_1_2_IRQHandler                  </span><br><span class="line">   .thumb_set COMP_1_2_IRQHandler,Default_Handler</span><br><span class="line"> </span><br><span class="line">   .weak      EXTI9_5_IRQHandler   </span><br><span class="line">   .thumb_set EXTI9_5_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      TIM1_BRK_IRQHandler            </span><br><span class="line">   .thumb_set TIM1_BRK_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      TIM1_UP_IRQHandler            </span><br><span class="line">   .thumb_set TIM1_UP_IRQHandler,Default_Handler</span><br><span class="line">      </span><br><span class="line">   .weak      TIM1_TRG_COM_IRQHandler      </span><br><span class="line">   .thumb_set TIM1_TRG_COM_IRQHandler,Default_Handler</span><br><span class="line">      </span><br><span class="line">   .weak      TIM1_CC_IRQHandler   </span><br><span class="line">   .thumb_set TIM1_CC_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      TIM2_IRQHandler            </span><br><span class="line">   .thumb_set TIM2_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      TIM3_IRQHandler            </span><br><span class="line">   .thumb_set TIM3_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      TIM4_IRQHandler            </span><br><span class="line">   .thumb_set TIM4_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      I2C1_EV_IRQHandler   </span><br><span class="line">   .thumb_set I2C1_EV_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      I2C1_ER_IRQHandler   </span><br><span class="line">   .thumb_set I2C1_ER_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      I2C2_EV_IRQHandler   </span><br><span class="line">   .thumb_set I2C2_EV_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      I2C2_ER_IRQHandler   </span><br><span class="line">   .thumb_set I2C2_ER_IRQHandler,Default_Handler</span><br><span class="line">                           </span><br><span class="line">   .weak      SPI1_IRQHandler            </span><br><span class="line">   .thumb_set SPI1_IRQHandler,Default_Handler</span><br><span class="line">                        </span><br><span class="line">   .weak      SPI2_IRQHandler            </span><br><span class="line">   .thumb_set SPI2_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      USART1_IRQHandler      </span><br><span class="line">   .thumb_set USART1_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      USART2_IRQHandler      </span><br><span class="line">   .thumb_set USART2_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      USART3_IRQHandler      </span><br><span class="line">   .thumb_set USART3_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      EXTI15_10_IRQHandler               </span><br><span class="line">   .thumb_set EXTI15_10_IRQHandler,Default_Handler</span><br><span class="line">               </span><br><span class="line">   .weak      RTCAlarm_IRQHandler               </span><br><span class="line">   .thumb_set RTCAlarm_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      USBWakeUp_IRQHandler         </span><br><span class="line">   .thumb_set USBWakeUp_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      TIM8_BRK_IRQHandler         </span><br><span class="line">   .thumb_set TIM8_BRK_IRQHandler,Default_Handler</span><br><span class="line">         </span><br><span class="line">   .weak      TIM8_UP_IRQHandler            </span><br><span class="line">   .thumb_set TIM8_UP_IRQHandler,Default_Handler</span><br><span class="line">         </span><br><span class="line">   .weak      TIM8_TRG_COM_IRQHandler      </span><br><span class="line">   .thumb_set TIM8_TRG_COM_IRQHandler,Default_Handler</span><br><span class="line">      </span><br><span class="line">   .weak      TIM8_CC_IRQHandler   </span><br><span class="line">   .thumb_set TIM8_CC_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      UART4_IRQHandler         </span><br><span class="line">   .thumb_set UART4_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      UART5_IRQHandler         </span><br><span class="line">   .thumb_set UART5_IRQHandler,Default_Handler</span><br><span class="line">   </span><br><span class="line">   .weak      LPUART_IRQHandler         </span><br><span class="line">   .thumb_set LPUART_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      TIM5_IRQHandler            </span><br><span class="line">   .thumb_set TIM5_IRQHandler,Default_Handler</span><br><span class="line">                  </span><br><span class="line">   .weak      TIM6_IRQHandler                  </span><br><span class="line">   .thumb_set TIM6_IRQHandler,Default_Handler</span><br><span class="line">               </span><br><span class="line">   .weak      TIM7_IRQHandler            </span><br><span class="line">   .thumb_set TIM7_IRQHandler,Default_Handler</span><br><span class="line">            </span><br><span class="line">   .weak      CAN_TX_IRQHandler   </span><br><span class="line">   .thumb_set CAN_TX_IRQHandler,Default_Handler</span><br><span class="line">                           </span><br><span class="line">   .weak      CAN_RX0_IRQHandler                  </span><br><span class="line">   .thumb_set CAN_RX0_IRQHandler,Default_Handler</span><br><span class="line">                           </span><br><span class="line">   .weak      CAN_RX1_IRQHandler                  </span><br><span class="line">   .thumb_set CAN_RX1_IRQHandler,Default_Handler</span><br><span class="line">                           </span><br><span class="line">   .weak      CAN_SCE_IRQHandler                  </span><br><span class="line">   .thumb_set CAN_SCE_IRQHandler,Default_Handler</span><br><span class="line">                           </span><br><span class="line">   .weak      LPUART_WKUP_IRQHandler      </span><br><span class="line">   .thumb_set LPUART_WKUP_IRQHandler,Default_Handler</span><br><span class="line">                     </span><br><span class="line">   .weak      LPTIM_WKUP_IRQHandler               </span><br><span class="line">   .thumb_set LPTIM_WKUP_IRQHandler,Default_Handler</span><br><span class="line"></span><br><span class="line">   .weak      LCD_IRQHandler            </span><br><span class="line">   .thumb_set LCD_IRQHandler,Default_Handler</span><br><span class="line">   </span><br><span class="line">   .weak      SAC_IRQHandler            </span><br><span class="line">   .thumb_set SAC_IRQHandler,Default_Handler</span><br><span class="line">               </span><br><span class="line">   .weak      MMU_IRQHandler                  </span><br><span class="line">   .thumb_set MMU_IRQHandler,Default_Handler   </span><br><span class="line"></span><br><span class="line">   .weak      TSC_IRQHandler                  </span><br><span class="line">   .thumb_set TSC_IRQHandler,Default_Handler  </span><br><span class="line">    </span><br><span class="line">   .weak      RAMC_PERR_IRQHandler                  </span><br><span class="line">   .thumb_set RAMC_PERR_IRQHandler,Default_Handler  </span><br><span class="line">    </span><br><span class="line">   .weak      TIM9_IRQHandler                  </span><br><span class="line">   .thumb_set TIM9_IRQHandler,Default_Handler  </span><br><span class="line">   </span><br><span class="line">   .weak      UCDR_IRQHandler                  </span><br><span class="line">   .thumb_set UCDR_IRQHandler,Default_Handler  </span><br><span class="line">   </span><br><span class="line">/************************ (C) COPYRIGHT Nations Technologies Inc *****END OF FILE****/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<p><strong>以下为这段<code>assembly</code>代码的注释</strong>：</p>
<pre><code>.syntax unified
</code></pre>
<p>指定统一的<code>ARM</code>和<code>Thumb</code>指令集语法。</p>
<pre><code>.cpu cortex-m4
.fpu softvfp
.thumb
</code></pre>
<p>指定目标<code>CPU</code>为<code>Cortex-M4</code>，浮点单元为软件实现（<code>softvfp</code>），并使用<code>Thumb</code>指令集。</p>
<pre><code>.global  g_pfnVectors
.global  Default_Handler
</code></pre>
<p>声明全局符号<code>g_pfnVectors</code>和<code>Default_Handler</code>，使其在其他汇编文件或<code>C</code>代码中也可访问。</p>
<pre><code>.section  .text.Reset_Handler
.weak  Reset_Handler
.type  Reset_Handler, %function
</code></pre>
<p>定义了一个名为<code>.text.Reset_Handler</code>的代码段，并声明<code>Reset_Handler</code>函数较弱，意味着如果有其他同名函数，将覆盖此声明。</p>
<pre><code>Reset_Handler:	
</code></pre>
<p>定义<code>Reset_Handler</code>函数的开始。</p>
<pre><code>movs  r1, #0
b  LoopCopyDataInit
</code></pre>
<p>将寄存器r1清零，并跳转到<code>LoopCopyDataInit</code>标签。</p>
<pre><code>CopyDataInit:
ldr  r3, =_sidata
ldr  r3, [r3, r1]
str  r3, [r0, r1]
adds  r1, r1, #4
</code></pre>
<p>定义<code>CopyDataInit</code>代码块，从<code>_sidata</code>地址开始复制初始化数据到数据段(<code>_sdata</code>至<code>_edata</code>)。</p>
<pre><code>LoopCopyDataInit:
ldr  r0, =_sdata
ldr  r3, =_edata
adds  r2, r0, r1
cmp  r2, r3
bcc  CopyDataInit
</code></pre>
<p>创建一个循环，将初始化数据从<code>_sidata</code>复制到<code>_sdata</code>，直到<code>_edata</code>。</p>
<pre><code>ldr  r2, =_sbss
b  LoopFillZerobss
</code></pre>
<p>将<code>r2</code>寄存器加载到<code>BSS</code>段的起始地址，并跳转到<code>LoopFillZerobss</code>。</p>
<pre><code>FillZerobss:
movs  r3, #0
str  r3, [r2], #4
</code></pre>
<p>将<code>BSS</code>段的每个位置初始化为<code>0</code>。</p>
<pre><code>LoopFillZerobss:
ldr  r3, = _ebss
cmp  r2, r3
bcc  FillZerobss
</code></pre>
<p>创建一个循环，将<code>BSS</code>段从<code>_sbss</code>到<code>_ebss</code>的所有字节初始化为<code>0</code>。</p>
<pre><code>bl  SystemInit   
bl __libc_init_array
bl  main
bx  lr    
</code></pre>
<p>调用系统初始化函数<code>SystemInit</code>，调用<code>C++</code>静态对象构造函数<code>__libc_init_array</code>，然后调用<code>main</code>函数，并从<code>Reset_Handler</code>返回。</p>
<pre><code>.size  Reset_Handler, .-Reset_Handler
</code></pre>
<p>指定<code>Reset_Handler</code>函数的大小。</p>
<pre><code>.section  .text.Default_Handler,&quot;ax&quot;,%progbits
</code></pre>
<p>定义一个新的代码段，用于默认的中断处理函数。</p>
<p>Default_Handler:<br>Infinite_Loop:<br>  b  Infinite_Loop<br>定义<code>Default_Handler</code>函数，如果处理器接收到未处理的中断，则进入无限循环。</p>
<pre><code>.size  Default_Handler, .-Default_Handler
</code></pre>
<p>指定<code>Default_Handler</code>函数的大小。</p>
<pre><code>.section  .isr_vector,&quot;a&quot;,%progbits
</code></pre>
<p>定义中断向量表的代码段。</p>
<pre><code>g_pfnVectors:
</code></pre>
<p>定义中断向量表的开始。</p>
<pre><code>.word  _estack
.word  Reset_Handler
...
</code></pre>
<p>中断向量表包含了系统堆栈的顶端、重置处理程序的地址和其他中断处理程序的地址。</p>
<pre><code>.weak      NMI_Handler
.thumb_set NMI_Handler,Default_Handler
</code></pre>
<p>声明<code>NMI_Handler</code>为弱引用，并将其默认地址设置为<code>Default_Handler</code>。<br>这段代码的其余部分继续定义中断向量表和提供中断处理程序的弱引用，以便在没有提供特定中断处理程序时使用默认处理程序。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>启动文件</category>
      </categories>
      <tags>
        <tag>MCU</tag>
      </tags>
  </entry>
  <entry>
    <title>I.MX6ULL开发指南</title>
    <url>/2024/07/13/I.MX6ULL%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><ol>
<li>下载安装VMware Workstation Pro工具。</li>
<li>下载安装ubuntu 20.04 LTS系统镜像。</li>
<li>快速创建虚拟机。</li>
<li>配置虚拟机环境。</li>
</ol>
<ul>
<li><p>虚拟机-设置(见以下图片)：<br><img src="/../pictures/ubuntu%E9%85%8D%E7%BD%AE1.png" alt="ubuntu配置"><br><img src="/../pictures/ubuntu%E9%85%8D%E7%BD%AE2.png" alt="ubuntu配置"><br><img src="/../pictures/ubuntu%E9%85%8D%E7%BD%AE3.png" alt="ubuntu配置"></p>
</li>
<li><p>网络适配器可按自己需要设置。<br><img src="/../pictures/ubuntu%E9%85%8D%E7%BD%AE4.png" alt="ubuntu配置"></p>
</li>
</ul>
<ol start="5">
<li>启动虚拟机，进入<code>ubuntu</code>系统。</li>
</ol>
<ul>
<li><p>进入系统后会自动弹出<code>DVD</code>, 里面有<code>VMware Tools</code>的压缩包。</p>
</li>
<li><p>复制压缩包到<code>Donwnloads</code>目录下，解压。</p>
</li>
<li><p>执行<code>sudo ./vmware-install.pl</code>安装。 </p>
</li>
<li><p>解决Windows和Ubuntu之间复制粘贴问题。</p>
<ul>
<li>输入安装命令：sudo apt install open-vm-tools</li>
<li>输入命令：sudo apt install open-vm-tools-desktop</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>：输入第一条命令后，等待安装，遇到选择<code>Y/N</code>，选择<code>Y</code>；第一条安装完成后，输入第二条命令，同样遇到选择<code>Y/N</code>，选择<code>Y</code>。<br>安装完毕后，切记：一定要<strong>重新启动Linux系统</strong>才可以双向复制粘贴。</p>
<h3 id="虚拟机安装配置遇到的问题"><a href="#虚拟机安装配置遇到的问题" class="headerlink" title="虚拟机安装配置遇到的问题"></a>虚拟机安装配置遇到的问题</h3><p><a href="https://segmentfault.com/a/1190000039918994">桥接模式资料(仅供参考)</a></p>
<ul>
<li>尝试解决无法使用桥接使用与PC机相同IP上网<ul>
<li>虚拟网络编辑器-还原默认设置（该过程会卸载虚拟网卡，重新安装适配器）</li>
<li>桥接模式启动</li>
<li>笔试还不能关闭网络服务，<code>ubuntu</code>内部配置<code>IPv4</code>（先打开<code>PC主机</code>以太网，按下图所示手动填写<code>地址</code>和<code>DNS</code>）,重新启动网络服务。</li>
</ul>
</li>
</ul>
<p><img src="/../pictures/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="虚拟网络"><br><img src="/../pictures/PC%E6%9C%BAIPv4%E9%85%8D%E7%BD%AE.png" alt="PC以太网配置"><br><img src="/../pictures/ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png" alt="ubuntu网络配置"></p>
<ul>
<li>虚拟机右下角的USB是灰的，不能链接&#x2F;断开。</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_44259058/article/details/127639566">参考资料</a><br><br></p>
<h2 id="Uboot移植"><a href="#Uboot移植" class="headerlink" title="Uboot移植"></a>Uboot移植</h2><p><a href="https://www.eet-china.com/mp/a68264.html">参考资料</a></p>
<h3 id="I-MX6ULL启动模式"><a href="#I-MX6ULL启动模式" class="headerlink" title="I.MX6ULL启动模式"></a>I.MX6ULL启动模式</h3><p><img src="/../pictures/IMX6ULL%E5%90%AF%E5%8A%A8%E6%8B%A8%E7%A0%81%E5%9B%BE.png" alt="IMX6ULL启动拨码图"></p>
<h3 id="Uboot编译烧录"><a href="#Uboot编译烧录" class="headerlink" title="Uboot编译烧录"></a>Uboot编译烧录</h3><ul>
<li><p>将<code>uboot</code>压缩文件<code>uboot-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4.tar.bz2</code>放到<code>/home/xuan/linux/</code>目录下。</p>
</li>
<li><p>将<code>uboot</code>文件<code>tar -xjvf uboot-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4.tar.bz2</code> 解压到该目录下。</p>
</li>
<li><p><code>cd /home/xuan/linux/uboot-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4</code></p>
</li>
<li><p>编写以下脚本：(<code>mx6ull_14x14_evk_emmc.sh</code>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_alientek_emmc_defconfig</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- V=1 -j12</span><br></pre></td></tr></table></figure></li>
<li><p>执行脚本：<code>./mx6ull_14x14_evk_emmc.sh</code></p>
</li>
</ul>
<h4 id="Uboot烧录到SD卡"><a href="#Uboot烧录到SD卡" class="headerlink" title="Uboot烧录到SD卡"></a>Uboot烧录到SD卡</h4><ul>
<li>插上<code>SD卡</code>，启动<code>uboot</code>, <code>SD</code>卡和<code>EMMC</code>驱动检查:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mmc dev 0</span><br><span class="line">mmc info</span><br><span class="line"></span><br><span class="line">mmc dev 1</span><br><span class="line">mmc info</span><br></pre></td></tr></table></figure></li>
<li>烧写验证与驱动测试<ul>
<li>挂载<code>SD卡</code>，不做描述，挂载上之后<code>ls /dev/sd*</code>显示。</li>
<li>执行以下<code>shell</code>指令。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 imxdownload 				//给予 imxdownload 可执行权限</span><br><span class="line">./imxdownload u-boot.bin /dev/sdd 	//烧写到 SD 卡中，不能烧写到/dev/sda 或 sda1 里面</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<br>

<ul>
<li><code>U-Boot</code> 图形化配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libncurses5-dev</span><br><span class="line"></span><br><span class="line">make mx6ull_alientek_emmc_defconfig</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<ul>
<li>配置网口的环境变量，开发板上的<code>ENET2</code>,上电进入<code>uboot</code>,打开的<code>USB_TTL</code>对应的串口控制台。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenv ipaddr 192.168.104.130		//开发板 ip 地址</span><br><span class="line">setenv ethaddr b8:ae:1d:01:00:00	//开发板的MAC地址，一定要设置, 如有多块开发板，MAC需不一致</span><br><span class="line">setenv gatewayip 192.168.104.129	//网关地址</span><br><span class="line">setenv netmask 255.255.240.0		//子网掩码</span><br><span class="line">setenv serverip 192.168.104.29		//服务器 IP 地址，也就是 Ubuntu 主机 IP 地址，用于调试代码。</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<h2 id="Linux内核移植"><a href="#Linux内核移植" class="headerlink" title="Linux内核移植"></a>Linux内核移植</h2><h3 id="移植步骤"><a href="#移植步骤" class="headerlink" title="移植步骤"></a>移植步骤</h3><p><strong>1. Ubuntu下搭建网络传输环境</strong></p>
<p><strong>1.1 搭建网络tftp服务</strong></p>
<ul>
<li><p>执行以下指令，安装<code>xinetd</code>: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xinetd</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询<code>/etc/</code>下是否存在 <code>xinetd.conf</code> 文件，没有的话则自己新建一个。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /etc/xinetd.conf</span><br><span class="line">sudo vi /etc/xinetd.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建出来的文件是空白的， 修改 <code>xinetd.conf</code> 文件内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Simple configuration file <span class="keyword">for</span> xinetd</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Some defaults, and include /etc/xinetd.d/</span></span></span><br><span class="line">defaults</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please note that you need a log_type line to be able to use log_on_success</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and log_on_failure. The default is the following :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log_type = SYSLOG daemon info</span></span><br><span class="line">&#125;</span><br><span class="line">includedir /etc/xinetd.d</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建 <code>TFTP</code> 目录，这里建立在&#x2F;home&#x2F;xuan&#x2F;linux 目录下，目录名为 tftp。将 tftp 目录赋予可读可写可执行权限。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/xuan/linux/tftp</span><br><span class="line">sudo chmod 777 /home/xuan/linux/tftp/</span><br><span class="line">cd /home/xuan/linux/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行以下程序安装 <code>tftp-hpa</code> 和 <code>tftpd-hpa</code> 服务程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftp-hpa tftpd-hpa</span><br><span class="line">sudo vi /etc/default/tftpd-hpa</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下指令创建<code>/etc/xinetd.d/tftp</code>配置文件。（如果没有 <code>xinetd.d</code> 这个目录，可以先自己手动创建）,注意 <code>server_args = -s</code> 后面要添加自己的 <code>tftp</code> 工作路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server tftp</span><br><span class="line">&#123;</span><br><span class="line">socket_type = dgram</span><br><span class="line">wait = yes</span><br><span class="line">disable = no</span><br><span class="line">user = root</span><br><span class="line">protocol = udp</span><br><span class="line">server = /usr/sbin/in.tftpd</span><br><span class="line">server_args = -s /home/xuan/linux/tftp -c</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log_on_success += PID HOST DURATION</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log_on_failure += HOST</span></span><br><span class="line">per_source = 11</span><br><span class="line">cps =100 2</span><br><span class="line">flags =IPv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改&#x2F;添加 <code>tftp</code> 文件后， 执行以下指令重启 <code>tftpd-hpa</code>, 重启 <code>xinetd</code> 服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service tftpd-hpa restart</span><br><span class="line">sudo service xinetd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保网络环境正常，<code>Ubuntu</code>、<code>Windows</code>和<code>开发板</code>能相互 <code>ping</code> 通。</p>
<ul>
<li>开发板 IP： 192.168.104.130</li>
<li>虚拟机 IP： 192.168.104.129</li>
<li>电脑网口的 IP： 192.168.104.29</li>
</ul>
</li>
</ul>
<br>

<p><strong>1.2 搭建网络nfs服务</strong></p>
<ul>
<li><p>在 <code>Ubuntu</code> 终端执行以下指令安装 <code>NFS</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建 <code>NFS</code> 共享目录，并给予 <code>NFS</code> 目录可读可写可执行权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/xuan/linux/nfs</span><br><span class="line">sudo chmod 777 /home/xuan/linux/nfs/</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下指令打开 <code>etc/exports</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/exports</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 <code>etc/exports</code> 文件，在最后添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/alientek/linux/nfs *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>/home/alientek/linux/nfs</code> 表示 <code>NFS</code> 共享的目录<br><code>*</code>表示允许所有的网络段访问<br><code>rw</code> 表示访问者具有可读写权限<br><code>sync</code> 表示将缓存写入设备中，可以说是同步缓存的意思<br><code>no_root_squash</code> 表示访问者具有 <code>root</code> 权限。</p>
<ul>
<li><p>执行以下指令重启 <code>NFS</code> 服务器, 查看 <code>NFS</code> 共享目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/nfs-kernel-server restart</span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试 <code>NFS</code> 服务，执行以下指令设置开发板 <code>IP</code>，创建一个 <code>get</code> 目录，将虚拟机（<code>192.168.104.129</code>） <code>NFS</code> 共享目<br>录挂载到到开发板的 <code>get</code> 目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir get</span><br><span class="line">mount -t nfs -o nolock,nfsvers=3 192.168.104.129:/home/xuan/linux/nfs get/</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看挂载的 <code>NFS</code> 目录：<code>df</code>, 显示如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.104.129:/home/xuan/linux/nfs 204795392 14416896 179902464   8% /home/root/get</span><br></pre></td></tr></table></figure></li>
<li><p>卸载 <code>NFS</code> 目录：<code>umount get</code></p>
</li>
</ul>
<br>

<p><strong>2. 拷贝内核文件</strong></p>
<ul>
<li><p>将内核压缩文件<code>linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4.tar.bz2</code>放到<code>/home/xuan/linux/linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4</code>目录下。</p>
</li>
<li><p>将内核文件<code>tar -xjvf linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4.tar.bz2</code> 解压到该目录下。</p>
</li>
</ul>
<p><strong>3. 编译内核文件</strong></p>
<p>按以下步骤进行编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean 					//第一次编译 Linux 内核之前先清理一下</span><br><span class="line">make imx_v7_mfg_defconfig 	//配置 Linux 内核</span><br><span class="line">make -j16					//编译 Linux 内核</span><br></pre></td></tr></table></figure>
<p>发现编译报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  LZO     arch/arm/boot/compressed/piggy.lzo</span><br><span class="line">/bin/sh: 1: lzop: not found</span><br><span class="line">make[2]: *** [arch/arm/boot/compressed/Makefile:180：arch/arm/boot/compressed/piggy.lzo] 错误 1</span><br><span class="line">make[1]: *** [arch/arm/boot/Makefile:52：arch/arm/boot/compressed/vmlinux] 错误 2</span><br><span class="line">make: *** [arch/arm/Makefile:316：zImage] 错误 2</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ol>
<li>安装lzop：sudo apt install lzop</li>
<li>添加lzop到环境变量：export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin(直接安装的不需要添加环境变量)</li>
<li>重新编译：make -j16</li>
</ol>
<br>

<ul>
<li>若执行 <code>./mx6ull_alientek_emmc.sh</code></li>
</ul>
<p>发现编译报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;command-line&gt;: fatal error: curses.h: 没有那个文件或目录</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>执行 <code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</code> 后报错 <code>fatal error:curses.h:</code>没有那个文件或目录，这个是少了某个库，执行如下指令安装库：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libncurses*</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<p><strong>4. 整理编译后的镜像文件</strong></p>
<p><code>Linux</code> 内核编译完成以后会在 <code>arch/arm/boot</code> 目录下生成 <code>zImage</code> 镜像文件，如果使用设备树<br>的话还会在 <code>arch/arm/boot/dts</code> 目录下开发板对应的.dtb(设备树)文件，比如 <code>imx6ull-alientek-emmc.dtb</code><br>就是 <code>NXP</code> 官方的 <code>I.MX6ULL EVK开发板</code>对应的设备树文件。至此我们得到两个文件：</p>
<ul>
<li><code>Linux</code> 内核镜像文件： <code>zImage。</code></li>
<li><code>NXP</code>官方<code>I.MX6ULL EVK开发板</code>对应的设备树文件： imx6ull-alientek-emmc.dtb。</li>
</ul>
<br>

<p><strong>5. 内核启动测试</strong></p>
<ul>
<li><p>修改<code>uboot</code> 中的环境变量 <code>bootargs</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw</span><br></pre></td></tr></table></figure>
</li>
<li><p>将上一小节编译出来的 <code>zImage</code> 和 <code>imx6ull-alientek-emmc.dtb</code> 复制到 <code>Ubuntu</code> 中的 <code>tftp</code> 目录下，<br>因为我们要在 <code>uboot</code> 中使用 <code>tftp</code> 命令将其下载到开发板中，拷贝命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp arch/arm/boot/zImage /home/xuan/linux/tftpboot/ -f</span><br><span class="line">cp arch/arm/boot/dts/imx6ull-alientek-emmc.dtb /home/xuan/linux/tftpboot/ -f</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝完成以后就可以测试了，启动开发板，进入 <code>uboot</code> 命令行模式，然后输入如下命令将<br><code>zImage</code> 和 <code>imx6ull-alientek-emmc.dtb</code> 下载到开发板中：</p>
</li>
</ul>
<p><strong>从网络启动：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tftp 80800000 zImage</span><br><span class="line">tftp 83000000 imx6ull-alientek-emmc.dtb</span><br><span class="line">bootz 80800000 - 83000000</span><br></pre></td></tr></table></figure>

<p><strong>从EMMC启动：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatload mmc 1:1 80800000 zImage</span><br><span class="line">fatload mmc 1:1 83000000 imx6ull-alientek-emmc.dtb</span><br><span class="line">bootz 80800000 - 83000000</span><br></pre></td></tr></table></figure>

<br>

<h3 id="从网络启动Linux系统"><a href="#从网络启动Linux系统" class="headerlink" title="从网络启动Linux系统"></a>从网络启动Linux系统</h3><ul>
<li>这里使用<code>tftpboot</code>启动传输。</li>
<li>拨码到从<code>SD</code>卡启动，开发板上电&#x2F;<code>RESET</code>，进入<code>uboot</code>。</li>
<li>在<code>uboot</code>配置<code>bootargs</code>和<code>bootcmd</code>参数并保存。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenv bootargs &#x27;console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw&#x27;</span><br><span class="line">=&gt; setenv bootcmd &#x27;tftp 80800000 zImage; tftp 83000000 imx6ull-alientek-emmc.dtb; bootz 80800000 - 83000000&#x27;</span><br><span class="line">=&gt; saveenv</span><br></pre></td></tr></table></figure>

<ul>
<li>输入<code>boot</code>启动</li>
</ul>
<br>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>I.MX6ULL</tag>
        <tag>NXP</tag>
      </tags>
  </entry>
</search>
